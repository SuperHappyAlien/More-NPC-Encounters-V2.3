<?xml version="1.0"?>
<Definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Prefabs>
    <Prefab xsi:type="MyObjectBuilder_PrefabDefinition">
      <Id Type="MyObjectBuilder_PrefabDefinition" Subtype="VC Scout Car" />
      <CubeGrids>
        <CubeGrid>
          <SubtypeName />
          <EntityId>77615166414242270</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="0" y="0" z="0" />
            <Forward x="0.269326061" y="0.962838769" z="-0.0201188326" />
            <Up x="0.937678039" y="-0.25740993" z="0.233451635" />
            <Orientation>
              <X>0.603508234</X>
              <Y>0.3545679</Y>
              <Z>-0.514278948</Z>
              <W>0.4955569</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="12" z="1" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>100961987416379971</EntityId>
              <Min x="-2" y="12" z="1" />
              <IntegrityPercent>0.8888889</IntegrityPercent>
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>130364558303498688</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>0.6</PowerNew>
              <StrengthNew>0.1</StrengthNew>
              <FrictionNew>0.5</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>86507751682209502</EntityId>
              <Min x="1" y="12" z="1" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId xsi:nil="true" />
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>0.6</PowerNew>
              <StrengthNew>0.1</StrengthNew>
              <FrictionNew>0.5</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="0" y="12" z="2" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="0" y="12" z="3" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="0" y="12" z="0" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
              <Min x="-1" y="13" z="1" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
              <SubtypeName>SmallAirVent</SubtypeName>
              <EntityId>119559362486808175</EntityId>
              <Min x="0" y="13" z="0" />
              <IntegrityPercent>0.8969957</IntegrityPercent>
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Air Vent</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsDepressurizing>true</IsDepressurizing>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="-1" y="14" z="2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockSmallContainer</SubtypeName>
              <EntityId>119915375371665370</EntityId>
              <Min x="0" y="13" z="2" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                            <SubtypeName>AutomaticRifleItem</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>20</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                            <SubtypeName>NATO_5p56x45mm</SubtypeName>
                            <ProjectilesCount>0</ProjectilesCount>
                          </PhysicalContent>
                          <ItemId>1</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                            <SubtypeName>AngleGrinderItem</SubtypeName>
                          </PhysicalContent>
                          <ItemId>2</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                            <SubtypeName>WelderItem</SubtypeName>
                          </PhysicalContent>
                          <ItemId>3</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                            <SubtypeName>HandDrillItem</SubtypeName>
                          </PhysicalContent>
                          <ItemId>4</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>5</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>VC SC Small Cargo Container 1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallBlockConveyor</SubtypeName>
              <EntityId>84625836595646649</EntityId>
              <Min x="0" y="13" z="3" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
              <Min x="-1" y="13" z="2" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
              <EntityId>93610674609576434</EntityId>
              <Min x="1" y="13" z="3" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>3.3336</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                            <SubtypeName>Uranium</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>VC SC Small Reactor 1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Inventory>
                <Items>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>3.3336</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                      <SubtypeName>Uranium</SubtypeName>
                    </PhysicalContent>
                    <ItemId>0</ItemId>
                  </MyObjectBuilder_InventoryItem>
                </Items>
                <nextItemId>1</nextItemId>
                <Volume>0.125</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="14" z="10" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="1" y="14" z="1" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockSmallContainer</SubtypeName>
              <EntityId>107544427204194078</EntityId>
              <Min x="0" y="13" z="1" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>6</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>VC SC Small Cargo Container 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallTextPanel</SubtypeName>
              <EntityId>75653010485225320</EntityId>
              <Min x="1" y="14" z="3" />
              <IntegrityPercent>0.220779225</IntegrityPercent>
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages />
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1.6</FontSize>
              <PublicDescription>Location: {X:-2155 Y:-6256 Z:-6746}

No damaged blocks found.
</PublicDescription>
              <PublicTitle>POS;Echo;Damage</PublicTitle>
              <ShowText>PUBLIC</ShowText>
              <FontColor>
                <PackedValue>4281501695</PackedValue>
                <X>255</X>
                <Y>135</Y>
                <Z>50</Z>
                <R>255</R>
                <G>135</G>
                <B>50</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
              <SubtypeName>SmallBlockCockpit</SubtypeName>
              <EntityId>131785521420012108</EntityId>
              <Min x="-1" y="13" z="4" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>1</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>VC SC Cockpit</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>131785521420012108</BlockEntityId>
                      <GroupName>VC SC Lights</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>131785521420012108</BlockEntityId>
                      <GroupName>VC SC Artificial Mass</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseHeight</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>131785521420012108</BlockEntityId>
                      <GroupName>VC SC Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseHeight</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>131785521420012108</BlockEntityId>
                      <GroupName>VC SC Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>131785521420012108</BlockEntityId>
                      <GroupName>VC SC Thrusters</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>102185830791045122</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Stockpile</Action>
                      <BlockEntityId>122851673498006899</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>131785521420012108</BlockEntityId>
                      <GroupName>VC SC Reactors</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>123298669580000273</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>9</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>122025771275547084</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>10</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>IncreaseRadius</Action>
                      <BlockEntityId>122025771275547084</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>11</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>DecreaseRadius</Action>
                      <BlockEntityId>122025771275547084</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>12</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>109701243834944346</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>13</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>IncreaseRadius</Action>
                      <BlockEntityId>109701243834944346</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>14</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>DecreaseRadius</Action>
                      <BlockEntityId>109701243834944346</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>15</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Depressurize</Action>
                      <BlockEntityId>119559362486808175</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>16</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>119559362486808175</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>18</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>136750512336658876</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>19</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>IncreasePower</Action>
                      <BlockEntityId>136750512336658876</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>20</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>DecreasePower</Action>
                      <BlockEntityId>136750512336658876</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>21</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff_On</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>131785521420012108</BlockEntityId>
                      <GroupName>VC SC Systems</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>22</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff_Off</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>131785521420012108</BlockEntityId>
                      <GroupName>VC SC Systems</GroupName>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
              </BuildToolbar>
              <PilotRelativeWorld>
                <Position x="1.8431144952774048" y="-1.1097607612609863" z="-1.4832192659378052" />
                <Forward x="-0.8805113" y="-0.0172744673" z="0.473710418" />
                <Up x="0.05557353" y="0.9886825" z="0.139351353" />
                <Orientation>
                  <X>0.05973214</X>
                  <Y>0.856321931</Y>
                  <Z>0.045726303</Z>
                  <W>0.510934353</W>
                </Orientation>
              </PilotRelativeWorld>
              <PilotGunDefinition Type="MyObjectBuilder_Welder" Subtype="Welder" />
              <IsInFirstPersonView>true</IsInFirstPersonView>
              <OxygenLevel>1</OxygenLevel>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallTextPanel</SubtypeName>
              <EntityId>93233750417351381</EntityId>
              <Min x="-1" y="14" z="3" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages />
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1.6</FontSize>
              <PublicDescription>Speed:                  0.0 m/s 

Power:      15 kW / 1.5 MW
[''''''''''''''''''''''''''''''''''''''']     1.0%




Oxygen Tanks    100.00%
[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
</PublicDescription>
              <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
              <ShowText>PUBLIC</ShowText>
              <FontColor>
                <PackedValue>4281501695</PackedValue>
                <X>255</X>
                <Y>135</Y>
                <Z>50</Z>
                <R>255</R>
                <G>135</G>
                <B>50</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="12" z="0" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="-2" y="14" z="1" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="1" y="14" z="2" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
              <Min x="-2" y="14" z="4" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="-1" y="14" z="1" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="13" z="0" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
              <Min x="-2" y="14" z="3" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
              <Min x="-2" y="14" z="2" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
              <SubtypeName>SmallBlockBeacon</SubtypeName>
              <EntityId>109701243834944346</EntityId>
              <Min x="-2" y="13" z="5" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Beacon</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <BroadcastRadius>10000</BroadcastRadius>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
              <Min x="2" y="14" z="4" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
              <Min x="2" y="14" z="3" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
              <Min x="2" y="14" z="2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="2" y="14" z="1" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="2" y="13" z="5" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="13" z="4" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
              <SubtypeName>SmallProjector</SubtypeName>
              <EntityId>107678154548851754</EntityId>
              <Min x="2" y="13" z="4" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Vehicle Repair Projector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <ProjectedGrid>
                <SubtypeName />
                <EntityId>140030780056075651</EntityId>
                <PersistentFlags>CastShadows InScene</PersistentFlags>
                <PositionAndOrientation>
                  <Position x="0" y="0" z="0" />
                  <Forward x="-0.7337308" y="0.6270901" z="-0.261528462" />
                  <Up x="-0.627640963" y="-0.4781583" z="0.6143545" />
                  <Orientation>
                    <X>0.6076252</X>
                    <Y>-0.005235214</Y>
                    <Z>0.608170033</Z>
                    <W>0.5107773</W>
                  </Orientation>
                </PositionAndOrientation>
                <GridSizeEnum>Small</GridSizeEnum>
                <CubeBlocks>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                    <Min x="0" y="12" z="1" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                    <SubtypeName>SmallSuspension3x3</SubtypeName>
                    <EntityId>94267035749202326</EntityId>
                    <Min x="-2" y="12" z="1" />
                    <BlockOrientation Forward="Up" Up="Left" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <TopBlockId xsi:nil="true" />
                    <ShareInertiaTensor>false</ShareInertiaTensor>
                    <SafetyDetach xsi:nil="true" />
                    <RotorEntityId>95018496299661964</RotorEntityId>
                    <WeldedEntityId xsi:nil="true" />
                    <SteerAngle>0</SteerAngle>
                    <Damping>0.75</Damping>
                    <Strength>0.18</Strength>
                    <Propulsion>true</Propulsion>
                    <Friction>2.4</Friction>
                    <Power>0.5</Power>
                    <Height>-0.32</Height>
                    <MaxSteerAngle>0.32</MaxSteerAngle>
                    <InvertSteer>false</InvertSteer>
                    <InvertPropulsion>false</InvertPropulsion>
                    <SpeedLimit>100.000008</SpeedLimit>
                    <PowerNew>0.6</PowerNew>
                    <StrengthNew>0.1</StrengthNew>
                    <FrictionNew xsi:nil="true" />
                    <AirShockEnabled>true</AirShockEnabled>
                    <BrakingEnabled>true</BrakingEnabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                    <SubtypeName>SmallSuspension3x3</SubtypeName>
                    <EntityId>119484785420418303</EntityId>
                    <Min x="1" y="12" z="1" />
                    <BlockOrientation Forward="Up" Up="Right" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <TopBlockId xsi:nil="true" />
                    <ShareInertiaTensor>false</ShareInertiaTensor>
                    <SafetyDetach xsi:nil="true" />
                    <RotorEntityId>114629558435233891</RotorEntityId>
                    <WeldedEntityId xsi:nil="true" />
                    <SteerAngle>0</SteerAngle>
                    <Damping>0.75</Damping>
                    <Strength>0.18</Strength>
                    <Propulsion>true</Propulsion>
                    <Friction>2.4</Friction>
                    <Power>0.5</Power>
                    <Height>-0.32</Height>
                    <MaxSteerAngle>0.32</MaxSteerAngle>
                    <InvertSteer>false</InvertSteer>
                    <InvertPropulsion>false</InvertPropulsion>
                    <SpeedLimit>100.000008</SpeedLimit>
                    <PowerNew>0.6</PowerNew>
                    <StrengthNew>0.1</StrengthNew>
                    <FrictionNew xsi:nil="true" />
                    <AirShockEnabled>true</AirShockEnabled>
                    <BrakingEnabled>true</BrakingEnabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="0" y="12" z="2" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <Min x="0" y="12" z="3" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="0" y="12" z="0" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                    <Min x="-1" y="13" z="1" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                    <SubtypeName>SmallAirVent</SubtypeName>
                    <EntityId>115035709890912048</EntityId>
                    <Min x="0" y="13" z="0" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Air Vent</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <IsDepressurizing>true</IsDepressurizing>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                    <Min x="-1" y="14" z="2" />
                    <BlockOrientation Forward="Left" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                    <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                    <EntityId>80174752529579494</EntityId>
                    <Min x="0" y="13" z="2" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <ComponentContainer>
                      <Components>
                        <ComponentData>
                          <TypeId>MyInventoryBase</TypeId>
                          <Component xsi:type="MyObjectBuilder_Inventory">
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>1</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                  <SubtypeName>AutomaticRifleItem</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>20</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                                  <SubtypeName>NATO_5p56x45mm</SubtypeName>
                                  <ProjectilesCount>0</ProjectilesCount>
                                </PhysicalContent>
                                <ItemId>1</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>1</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                  <SubtypeName>AngleGrinderItem</SubtypeName>
                                </PhysicalContent>
                                <ItemId>2</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>1</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                  <SubtypeName>WelderItem</SubtypeName>
                                </PhysicalContent>
                                <ItemId>3</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>1</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                  <SubtypeName>HandDrillItem</SubtypeName>
                                </PhysicalContent>
                                <ItemId>4</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>5</nextItemId>
                            <Volume>0.125</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Component>
                        </ComponentData>
                      </Components>
                    </ComponentContainer>
                    <CustomName>VC SC Small Cargo Container 1</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                    <SubtypeName>SmallBlockConveyor</SubtypeName>
                    <EntityId>111871395489103020</EntityId>
                    <Min x="0" y="13" z="3" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                    <Min x="-1" y="13" z="2" />
                    <BlockOrientation Forward="Forward" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                    <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                    <EntityId>143392386389093521</EntityId>
                    <Min x="1" y="13" z="3" />
                    <BlockOrientation Forward="Left" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <ComponentContainer>
                      <Components>
                        <ComponentData>
                          <TypeId>MyInventoryBase</TypeId>
                          <Component xsi:type="MyObjectBuilder_Inventory">
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>3.3336</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                  <SubtypeName>Uranium</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>1</nextItemId>
                            <Volume>0.125</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Component>
                        </ComponentData>
                      </Components>
                    </ComponentContainer>
                    <CustomName>VC SC Small Reactor 1</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Inventory>
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>3.3336</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                            <SubtypeName>Uranium</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Inventory>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                    <Min x="3" y="14" z="10" />
                    <BlockOrientation Forward="Forward" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <Min x="1" y="14" z="1" />
                    <BlockOrientation Forward="Backward" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                    <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                    <EntityId>126364717210382563</EntityId>
                    <Min x="0" y="13" z="1" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <ComponentContainer>
                      <Components>
                        <ComponentData>
                          <TypeId>MyInventoryBase</TypeId>
                          <Component xsi:type="MyObjectBuilder_Inventory">
                            <Items />
                            <nextItemId>6</nextItemId>
                            <Volume>0.125</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Component>
                        </ComponentData>
                      </Components>
                    </ComponentContainer>
                    <CustomName>VC SC Small Cargo Container 2</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                    <SubtypeName>SmallTextPanel</SubtypeName>
                    <EntityId>120588954043468451</EntityId>
                    <Min x="1" y="14" z="3" />
                    <BlockOrientation Forward="Right" Up="Up" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Description />
                    <Title>Title</Title>
                    <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                    <ChangeInterval>0</ChangeInterval>
                    <SelectedImages />
                    <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                    <FontSize>1.6</FontSize>
                    <PublicDescription>Location: {X:-2155 Y:-6256 Z:-6746}

No damaged blocks found.
</PublicDescription>
                    <PublicTitle>POS;Echo;Damage</PublicTitle>
                    <ShowText>PUBLIC</ShowText>
                    <FontColor>
                      <PackedValue>4281501695</PackedValue>
                      <X>255</X>
                      <Y>135</Y>
                      <Z>50</Z>
                      <R>255</R>
                      <G>135</G>
                      <B>50</B>
                      <A>255</A>
                    </FontColor>
                    <BackgroundColor>
                      <PackedValue>4278190080</PackedValue>
                      <X>0</X>
                      <Y>0</Y>
                      <Z>0</Z>
                      <R>0</R>
                      <G>0</G>
                      <B>0</B>
                      <A>255</A>
                    </BackgroundColor>
                    <CurrentShownTexture>0</CurrentShownTexture>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                    <SubtypeName>SmallBlockCockpit</SubtypeName>
                    <EntityId>136959116440721827</EntityId>
                    <Min x="-1" y="13" z="4" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <ComponentContainer>
                      <Components>
                        <ComponentData>
                          <TypeId>MyInventoryBase</TypeId>
                          <Component xsi:type="MyObjectBuilder_Inventory">
                            <Items />
                            <nextItemId>0</nextItemId>
                            <Volume>1</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Component>
                        </ComponentData>
                      </Components>
                    </ComponentContainer>
                    <CustomName>VC SC Cockpit</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <UseSingleWeaponMode>false</UseSingleWeaponMode>
                    <Toolbar>
                      <ToolbarType>Character</ToolbarType>
                      <SelectedSlot xsi:nil="true" />
                      <Slots>
                        <Slot>
                          <Index>0</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>OnOff</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>136959116440721827</BlockEntityId>
                            <GroupName>VC SC Lights</GroupName>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>1</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>OnOff</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>136959116440721827</BlockEntityId>
                            <GroupName>VC SC Artificial Mass</GroupName>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>2</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>IncreaseHeight</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>136959116440721827</BlockEntityId>
                            <GroupName>VC SC Wheels</GroupName>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>3</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>DecreaseHeight</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>136959116440721827</BlockEntityId>
                            <GroupName>VC SC Wheels</GroupName>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>4</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>OnOff</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>136959116440721827</BlockEntityId>
                            <GroupName>VC SC Thrusters</GroupName>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>5</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>View</Action>
                            <BlockEntityId>118494890799624401</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>6</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>Stockpile</Action>
                            <BlockEntityId>136984162930863360</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>7</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>OnOff</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>136959116440721827</BlockEntityId>
                            <GroupName>VC SC Reactors</GroupName>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>8</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>TriggerNow</Action>
                            <BlockEntityId>77902433155569916</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>9</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>OnOff</Action>
                            <BlockEntityId>123497400575371776</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>10</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>IncreaseRadius</Action>
                            <BlockEntityId>123497400575371776</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>11</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>DecreaseRadius</Action>
                            <BlockEntityId>123497400575371776</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>12</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>OnOff</Action>
                            <BlockEntityId>132027301551389130</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>13</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>IncreaseRadius</Action>
                            <BlockEntityId>132027301551389130</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>14</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>DecreaseRadius</Action>
                            <BlockEntityId>132027301551389130</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>15</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>Depressurize</Action>
                            <BlockEntityId>115035709890912048</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>16</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>OnOff</Action>
                            <BlockEntityId>115035709890912048</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>18</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>OnOff</Action>
                            <BlockEntityId>85243018391134245</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>19</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>IncreasePower</Action>
                            <BlockEntityId>85243018391134245</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>20</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>DecreasePower</Action>
                            <BlockEntityId>85243018391134245</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>21</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>OnOff_On</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>136959116440721827</BlockEntityId>
                            <GroupName>VC SC Systems</GroupName>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>22</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>OnOff_Off</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>136959116440721827</BlockEntityId>
                            <GroupName>VC SC Systems</GroupName>
                          </Data>
                        </Slot>
                      </Slots>
                    </Toolbar>
                    <SelectedGunId xsi:nil="true" />
                    <BuildToolbar>
                      <ToolbarType>Character</ToolbarType>
                      <SelectedSlot xsi:nil="true" />
                      <Slots />
                    </BuildToolbar>
                    <PilotRelativeWorld>
                      <Position x="2.7404639720916748" y="1.414639949798584" z="-3.341545581817627" />
                      <Forward x="-0.622945368" y="-0.5502525" z="0.5560227" />
                      <Up x="-0.0554092526" y="0.740037441" z="0.6702793" />
                      <Orientation>
                        <X>0.09445203</X>
                        <Y>0.876977861</Y>
                        <Z>0.3479369</Z>
                        <W>0.317692548</W>
                      </Orientation>
                    </PilotRelativeWorld>
                    <PilotGunDefinition xsi:nil="true" />
                    <IsInFirstPersonView>true</IsInFirstPersonView>
                    <OxygenLevel>1</OxygenLevel>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                    <SubtypeName>SmallTextPanel</SubtypeName>
                    <EntityId>136303373753284723</EntityId>
                    <Min x="-1" y="14" z="3" />
                    <BlockOrientation Forward="Left" Up="Up" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Description />
                    <Title>Title</Title>
                    <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                    <ChangeInterval>0</ChangeInterval>
                    <SelectedImages />
                    <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                    <FontSize>1.6</FontSize>
                    <PublicDescription>Speed:                  0.0 m/s 

Power:      14 kW / 1.5 MW
[''''''''''''''''''''''''''''''''''''''']   0.9%




Oxygen Tanks    100.00%
[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
</PublicDescription>
                    <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                    <ShowText>PUBLIC</ShowText>
                    <FontColor>
                      <PackedValue>4281501695</PackedValue>
                      <X>255</X>
                      <Y>135</Y>
                      <Z>50</Z>
                      <R>255</R>
                      <G>135</G>
                      <B>50</B>
                      <A>255</A>
                    </FontColor>
                    <BackgroundColor>
                      <PackedValue>4278190080</PackedValue>
                      <X>0</X>
                      <Y>0</Y>
                      <Z>0</Z>
                      <R>0</R>
                      <G>0</G>
                      <B>0</B>
                      <A>255</A>
                    </BackgroundColor>
                    <CurrentShownTexture>0</CurrentShownTexture>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="-1" y="13" z="0" />
                    <BlockOrientation Forward="Down" Up="Forward" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="-1" y="12" z="0" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                    <Min x="-2" y="14" z="1" />
                    <BlockOrientation Forward="Backward" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                    <Min x="1" y="14" z="2" />
                    <BlockOrientation Forward="Down" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                    <Min x="-2" y="14" z="4" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <Min x="-1" y="14" z="1" />
                    <BlockOrientation Forward="Backward" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="1" y="13" z="0" />
                    <BlockOrientation Forward="Down" Up="Forward" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                    <Min x="-2" y="14" z="3" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                    <Min x="-2" y="14" z="2" />
                    <BlockOrientation Forward="Down" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                    <SubtypeName>SmallBlockBeacon</SubtypeName>
                    <EntityId>132027301551389130</EntityId>
                    <Min x="-2" y="13" z="5" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Beacon</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                    <BroadcastRadius>10000</BroadcastRadius>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                    <Min x="2" y="14" z="4" />
                    <BlockOrientation Forward="Forward" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                    <Min x="2" y="14" z="3" />
                    <BlockOrientation Forward="Forward" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                    <Min x="2" y="14" z="2" />
                    <BlockOrientation Forward="Left" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                    <Min x="2" y="14" z="1" />
                    <BlockOrientation Forward="Backward" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                    <Min x="2" y="13" z="5" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                    <Min x="-2" y="13" z="4" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                    <SubtypeName>SmallProjector</SubtypeName>
                    <EntityId>89052748736145756</EntityId>
                    <Min x="2" y="13" z="4" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Vehicle Repair Projector</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                    <ProjectedGrid>
                      <SubtypeName />
                      <EntityId>115206874060097910</EntityId>
                      <PersistentFlags>CastShadows InScene</PersistentFlags>
                      <PositionAndOrientation>
                        <Position x="0" y="0" z="0" />
                        <Forward x="-0.7337308" y="0.627090156" z="-0.261528343" />
                        <Up x="-0.627640963" y="-0.4781584" z="0.614354432" />
                        <Orientation>
                          <X>0.607625246</X>
                          <Y>-0.00523527246</Y>
                          <Z>0.608170033</Z>
                          <W>0.510777235</W>
                        </Orientation>
                      </PositionAndOrientation>
                      <GridSizeEnum>Small</GridSizeEnum>
                      <CubeBlocks>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                          <Min x="0" y="12" z="1" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                          <SubtypeName>SmallSuspension3x3</SubtypeName>
                          <EntityId>77473765642122882</EntityId>
                          <Min x="-2" y="12" z="1" />
                          <BlockOrientation Forward="Up" Up="Left" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <TopBlockId xsi:nil="true" />
                          <ShareInertiaTensor>false</ShareInertiaTensor>
                          <SafetyDetach xsi:nil="true" />
                          <RotorEntityId>80070288293757051</RotorEntityId>
                          <WeldedEntityId xsi:nil="true" />
                          <SteerAngle>0</SteerAngle>
                          <Damping>0.75</Damping>
                          <Strength>0.18</Strength>
                          <Propulsion>true</Propulsion>
                          <Friction>2.4</Friction>
                          <Power>0.5</Power>
                          <Height>-0.32</Height>
                          <MaxSteerAngle>0.32</MaxSteerAngle>
                          <InvertSteer>false</InvertSteer>
                          <InvertPropulsion>false</InvertPropulsion>
                          <SpeedLimit>100.000008</SpeedLimit>
                          <PowerNew>0.6</PowerNew>
                          <StrengthNew>0.1</StrengthNew>
                          <FrictionNew xsi:nil="true" />
                          <AirShockEnabled>true</AirShockEnabled>
                          <BrakingEnabled>true</BrakingEnabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                          <SubtypeName>SmallSuspension3x3</SubtypeName>
                          <EntityId>119634967427584469</EntityId>
                          <Min x="1" y="12" z="1" />
                          <BlockOrientation Forward="Up" Up="Right" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <TopBlockId xsi:nil="true" />
                          <ShareInertiaTensor>false</ShareInertiaTensor>
                          <SafetyDetach xsi:nil="true" />
                          <RotorEntityId>139482735275117027</RotorEntityId>
                          <WeldedEntityId xsi:nil="true" />
                          <SteerAngle>0</SteerAngle>
                          <Damping>0.75</Damping>
                          <Strength>0.18</Strength>
                          <Propulsion>true</Propulsion>
                          <Friction>2.4</Friction>
                          <Power>0.5</Power>
                          <Height>-0.32</Height>
                          <MaxSteerAngle>0.32</MaxSteerAngle>
                          <InvertSteer>false</InvertSteer>
                          <InvertPropulsion>false</InvertPropulsion>
                          <SpeedLimit>100.000008</SpeedLimit>
                          <PowerNew>0.6</PowerNew>
                          <StrengthNew>0.1</StrengthNew>
                          <FrictionNew xsi:nil="true" />
                          <AirShockEnabled>true</AirShockEnabled>
                          <BrakingEnabled>true</BrakingEnabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="0" y="12" z="2" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <Min x="0" y="12" z="3" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="0" y="12" z="0" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                          <Min x="-1" y="13" z="1" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                          <SubtypeName>SmallAirVent</SubtypeName>
                          <EntityId>77735182118638558</EntityId>
                          <Min x="0" y="13" z="0" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Air Vent</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <IsDepressurizing>true</IsDepressurizing>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                          <Min x="-1" y="14" z="2" />
                          <BlockOrientation Forward="Left" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                          <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                          <EntityId>125954082062108821</EntityId>
                          <Min x="0" y="13" z="2" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <ComponentContainer>
                            <Components>
                              <ComponentData>
                                <TypeId>MyInventoryBase</TypeId>
                                <Component xsi:type="MyObjectBuilder_Inventory">
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>1</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                        <SubtypeName>AutomaticRifleItem</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>20</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                                        <SubtypeName>NATO_5p56x45mm</SubtypeName>
                                        <ProjectilesCount>0</ProjectilesCount>
                                      </PhysicalContent>
                                      <ItemId>1</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>1</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                        <SubtypeName>AngleGrinderItem</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>2</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>1</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                        <SubtypeName>WelderItem</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>3</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>1</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                        <SubtypeName>HandDrillItem</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>4</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>5</nextItemId>
                                  <Volume>0.125</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Component>
                              </ComponentData>
                            </Components>
                          </ComponentContainer>
                          <CustomName>VC SC Small Cargo Container 1</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                          <SubtypeName>SmallBlockConveyor</SubtypeName>
                          <EntityId>112062295849205484</EntityId>
                          <Min x="0" y="13" z="3" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                          <Min x="-1" y="13" z="2" />
                          <BlockOrientation Forward="Forward" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                          <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                          <EntityId>96839342480473613</EntityId>
                          <Min x="1" y="13" z="3" />
                          <BlockOrientation Forward="Left" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <ComponentContainer>
                            <Components>
                              <ComponentData>
                                <TypeId>MyInventoryBase</TypeId>
                                <Component xsi:type="MyObjectBuilder_Inventory">
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>3.058211</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                        <SubtypeName>Uranium</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>1</nextItemId>
                                  <Volume>0.125</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Component>
                              </ComponentData>
                            </Components>
                          </ComponentContainer>
                          <CustomName>VC SC Small Reactor 1</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Inventory>
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>3.058211</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                  <SubtypeName>Uranium</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>1</nextItemId>
                            <Volume>0.125</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Inventory>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                          <Min x="3" y="14" z="10" />
                          <BlockOrientation Forward="Forward" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <Min x="1" y="14" z="1" />
                          <BlockOrientation Forward="Backward" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                          <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                          <EntityId>130218169324579088</EntityId>
                          <Min x="0" y="13" z="1" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <ComponentContainer>
                            <Components>
                              <ComponentData>
                                <TypeId>MyInventoryBase</TypeId>
                                <Component xsi:type="MyObjectBuilder_Inventory">
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>0.825367</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                        <SubtypeName>Uranium</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>4</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>6</nextItemId>
                                  <Volume>0.125</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Component>
                              </ComponentData>
                            </Components>
                          </ComponentContainer>
                          <CustomName>VC SC Small Cargo Container 2</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                          <SubtypeName>SmallTextPanel</SubtypeName>
                          <EntityId>86317937021033853</EntityId>
                          <Min x="1" y="14" z="3" />
                          <BlockOrientation Forward="Right" Up="Up" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Description />
                          <Title>Title</Title>
                          <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                          <ChangeInterval>0</ChangeInterval>
                          <SelectedImages />
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1.6</FontSize>
                          <PublicDescription>Location: {X:-2155 Y:-6256 Z:-6746}

No damaged blocks found.
</PublicDescription>
                          <PublicTitle>POS;Echo;Damage</PublicTitle>
                          <ShowText>PUBLIC</ShowText>
                          <FontColor>
                            <PackedValue>4281501695</PackedValue>
                            <X>255</X>
                            <Y>135</Y>
                            <Z>50</Z>
                            <R>255</R>
                            <G>135</G>
                            <B>50</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                          <SubtypeName>SmallBlockCockpit</SubtypeName>
                          <EntityId>78380590417338570</EntityId>
                          <Min x="-1" y="13" z="4" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <ComponentContainer>
                            <Components>
                              <ComponentData>
                                <TypeId>MyInventoryBase</TypeId>
                                <Component xsi:type="MyObjectBuilder_Inventory">
                                  <Items />
                                  <nextItemId>0</nextItemId>
                                  <Volume>1</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Component>
                              </ComponentData>
                            </Components>
                          </ComponentContainer>
                          <CustomName>VC SC Cockpit</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <UseSingleWeaponMode>false</UseSingleWeaponMode>
                          <Toolbar>
                            <ToolbarType>Character</ToolbarType>
                            <SelectedSlot xsi:nil="true" />
                            <Slots>
                              <Slot>
                                <Index>0</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                  <Action>OnOff</Action>
                                  <GridEntityId>0</GridEntityId>
                                  <BlockEntityId>78380590417338570</BlockEntityId>
                                  <GroupName>VC SC Lights</GroupName>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>1</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                  <Action>OnOff</Action>
                                  <GridEntityId>0</GridEntityId>
                                  <BlockEntityId>78380590417338570</BlockEntityId>
                                  <GroupName>VC SC Artificial Mass</GroupName>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>2</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                  <Action>IncreaseHeight</Action>
                                  <GridEntityId>0</GridEntityId>
                                  <BlockEntityId>78380590417338570</BlockEntityId>
                                  <GroupName>VC SC Wheels</GroupName>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>3</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                  <Action>DecreaseHeight</Action>
                                  <GridEntityId>0</GridEntityId>
                                  <BlockEntityId>78380590417338570</BlockEntityId>
                                  <GroupName>VC SC Wheels</GroupName>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>4</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                  <Action>OnOff</Action>
                                  <GridEntityId>0</GridEntityId>
                                  <BlockEntityId>78380590417338570</BlockEntityId>
                                  <GroupName>VC SC Thrusters</GroupName>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>5</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>View</Action>
                                  <BlockEntityId>90251586578563012</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>6</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>Stockpile</Action>
                                  <BlockEntityId>91077590016549167</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>7</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                  <Action>OnOff</Action>
                                  <GridEntityId>0</GridEntityId>
                                  <BlockEntityId>78380590417338570</BlockEntityId>
                                  <GroupName>VC SC Reactors</GroupName>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>8</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>TriggerNow</Action>
                                  <BlockEntityId>128274794419004336</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>9</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>OnOff</Action>
                                  <BlockEntityId>86984484400294539</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>10</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>IncreaseRadius</Action>
                                  <BlockEntityId>86984484400294539</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>11</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>DecreaseRadius</Action>
                                  <BlockEntityId>86984484400294539</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>12</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>OnOff</Action>
                                  <BlockEntityId>95929307824137875</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>13</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>IncreaseRadius</Action>
                                  <BlockEntityId>95929307824137875</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>14</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>DecreaseRadius</Action>
                                  <BlockEntityId>95929307824137875</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>15</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>Depressurize</Action>
                                  <BlockEntityId>77735182118638558</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>16</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>OnOff</Action>
                                  <BlockEntityId>77735182118638558</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>18</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>OnOff</Action>
                                  <BlockEntityId>131532077763287004</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>19</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>IncreasePower</Action>
                                  <BlockEntityId>131532077763287004</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>20</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>DecreasePower</Action>
                                  <BlockEntityId>131532077763287004</BlockEntityId>
                                </Data>
                              </Slot>
                            </Slots>
                          </Toolbar>
                          <SelectedGunId xsi:nil="true" />
                          <BuildToolbar>
                            <ToolbarType>Character</ToolbarType>
                            <SelectedSlot xsi:nil="true" />
                            <Slots />
                          </BuildToolbar>
                          <PilotRelativeWorld>
                            <Position x="3.9610700607299805" y="0.031192399561405182" z="-1.7385303974151611" />
                            <Forward x="-0.938079357" y="-0.198142469" z="0.2841597" />
                            <Up x="0.0206417441" y="0.7868454" z="0.6168049" />
                            <Orientation>
                              <X>0.194621</X>
                              <Y>0.777304649</Y>
                              <Z>0.2621068</Z>
                              <W>0.537791967</W>
                            </Orientation>
                          </PilotRelativeWorld>
                          <PilotGunDefinition xsi:nil="true" />
                          <IsInFirstPersonView>true</IsInFirstPersonView>
                          <OxygenLevel>1</OxygenLevel>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                          <SubtypeName>SmallTextPanel</SubtypeName>
                          <EntityId>107845029323657245</EntityId>
                          <Min x="-1" y="14" z="3" />
                          <BlockOrientation Forward="Left" Up="Up" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Description />
                          <Title>Title</Title>
                          <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                          <ChangeInterval>0</ChangeInterval>
                          <SelectedImages />
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1.6</FontSize>
                          <PublicDescription>Speed:                  0.0 m/s 

Power:      14 kW / 1.5 MW
[''''''''''''''''''''''''''''''''''''''']   0.9%




Oxygen Tanks    100.00%
[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
</PublicDescription>
                          <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                          <ShowText>PUBLIC</ShowText>
                          <FontColor>
                            <PackedValue>4281501695</PackedValue>
                            <X>255</X>
                            <Y>135</Y>
                            <Z>50</Z>
                            <R>255</R>
                            <G>135</G>
                            <B>50</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="-1" y="13" z="0" />
                          <BlockOrientation Forward="Down" Up="Forward" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="-1" y="12" z="0" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                          <Min x="-2" y="14" z="1" />
                          <BlockOrientation Forward="Backward" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                          <Min x="1" y="14" z="2" />
                          <BlockOrientation Forward="Down" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                          <Min x="-2" y="14" z="4" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <Min x="-1" y="14" z="1" />
                          <BlockOrientation Forward="Backward" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="1" y="13" z="0" />
                          <BlockOrientation Forward="Down" Up="Forward" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                          <Min x="-2" y="14" z="3" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                          <Min x="-2" y="14" z="2" />
                          <BlockOrientation Forward="Down" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                          <SubtypeName>SmallBlockBeacon</SubtypeName>
                          <EntityId>95929307824137875</EntityId>
                          <Min x="-2" y="13" z="5" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Beacon</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                          <BroadcastRadius>10000</BroadcastRadius>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                          <Min x="2" y="14" z="4" />
                          <BlockOrientation Forward="Forward" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                          <Min x="2" y="14" z="3" />
                          <BlockOrientation Forward="Forward" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                          <Min x="2" y="14" z="2" />
                          <BlockOrientation Forward="Left" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                          <Min x="2" y="14" z="1" />
                          <BlockOrientation Forward="Backward" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                          <Min x="2" y="13" z="5" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                          <Min x="-2" y="13" z="4" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                          <SubtypeName>SmallProjector</SubtypeName>
                          <EntityId>116464660725762424</EntityId>
                          <Min x="2" y="13" z="4" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Vehicle Repair Projector</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                          <ProjectedGrid>
                            <SubtypeName />
                            <EntityId>79312349719385131</EntityId>
                            <PersistentFlags>CastShadows InScene</PersistentFlags>
                            <PositionAndOrientation>
                              <Position x="0" y="0" z="0" />
                              <Forward x="-0.7337329" y="0.627109" z="-0.261477143" />
                              <Up x="-0.6275254" y="-0.4779415" z="0.61464113" />
                              <Orientation>
                                <X>0.60764724</X>
                                <Y>-0.00512610842</Y>
                                <Z>0.60805887</Z>
                                <W>0.510884464</W>
                              </Orientation>
                            </PositionAndOrientation>
                            <GridSizeEnum>Small</GridSizeEnum>
                            <CubeBlocks>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                <Min x="0" y="12" z="1" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                <SubtypeName>SmallSuspension3x3</SubtypeName>
                                <EntityId>120035964597117391</EntityId>
                                <Min x="-2" y="12" z="1" />
                                <BlockOrientation Forward="Up" Up="Left" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <TopBlockId xsi:nil="true" />
                                <ShareInertiaTensor>false</ShareInertiaTensor>
                                <SafetyDetach xsi:nil="true" />
                                <RotorEntityId>80676004755959446</RotorEntityId>
                                <WeldedEntityId xsi:nil="true" />
                                <SteerAngle>0</SteerAngle>
                                <Damping>0.75</Damping>
                                <Strength>0.18</Strength>
                                <Propulsion>true</Propulsion>
                                <Friction>2.4</Friction>
                                <Power>0.5</Power>
                                <Height>-0.32</Height>
                                <MaxSteerAngle>0.32</MaxSteerAngle>
                                <InvertSteer>false</InvertSteer>
                                <InvertPropulsion>false</InvertPropulsion>
                                <SpeedLimit>100.000008</SpeedLimit>
                                <PowerNew>0.6</PowerNew>
                                <StrengthNew>0.1</StrengthNew>
                                <FrictionNew xsi:nil="true" />
                                <AirShockEnabled>true</AirShockEnabled>
                                <BrakingEnabled>true</BrakingEnabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                <SubtypeName>SmallSuspension3x3</SubtypeName>
                                <EntityId>134096833931861415</EntityId>
                                <Min x="1" y="12" z="1" />
                                <BlockOrientation Forward="Up" Up="Right" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <TopBlockId xsi:nil="true" />
                                <ShareInertiaTensor>false</ShareInertiaTensor>
                                <SafetyDetach xsi:nil="true" />
                                <RotorEntityId>75827782451953337</RotorEntityId>
                                <WeldedEntityId xsi:nil="true" />
                                <SteerAngle>0</SteerAngle>
                                <Damping>0.75</Damping>
                                <Strength>0.18</Strength>
                                <Propulsion>true</Propulsion>
                                <Friction>2.4</Friction>
                                <Power>0.5</Power>
                                <Height>-0.32</Height>
                                <MaxSteerAngle>0.32</MaxSteerAngle>
                                <InvertSteer>false</InvertSteer>
                                <InvertPropulsion>false</InvertPropulsion>
                                <SpeedLimit>100.000008</SpeedLimit>
                                <PowerNew>0.6</PowerNew>
                                <StrengthNew>0.1</StrengthNew>
                                <FrictionNew xsi:nil="true" />
                                <AirShockEnabled>true</AirShockEnabled>
                                <BrakingEnabled>true</BrakingEnabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="0" y="12" z="2" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <Min x="0" y="12" z="3" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="0" y="12" z="0" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                <Min x="-1" y="13" z="1" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                                <SubtypeName>SmallAirVent</SubtypeName>
                                <EntityId>142030579960364983</EntityId>
                                <Min x="0" y="13" z="0" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Air Vent</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <IsDepressurizing>true</IsDepressurizing>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                <Min x="-1" y="14" z="2" />
                                <BlockOrientation Forward="Left" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                <EntityId>126241950349406815</EntityId>
                                <Min x="0" y="13" z="2" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <ComponentContainer>
                                  <Components>
                                    <ComponentData>
                                      <TypeId>MyInventoryBase</TypeId>
                                      <Component xsi:type="MyObjectBuilder_Inventory">
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>1</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                              <SubtypeName>AutomaticRifleItem</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>20</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                                              <SubtypeName>NATO_5p56x45mm</SubtypeName>
                                              <ProjectilesCount>0</ProjectilesCount>
                                            </PhysicalContent>
                                            <ItemId>1</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>1</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                              <SubtypeName>AngleGrinderItem</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>2</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>1</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                              <SubtypeName>WelderItem</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>3</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>1</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                              <SubtypeName>HandDrillItem</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>4</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>5</nextItemId>
                                        <Volume>0.125</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Component>
                                    </ComponentData>
                                  </Components>
                                </ComponentContainer>
                                <CustomName>VC SC Small Cargo Container 1</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                                <SubtypeName>SmallBlockConveyor</SubtypeName>
                                <EntityId>109477014708741174</EntityId>
                                <Min x="0" y="13" z="3" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                <Min x="-1" y="13" z="2" />
                                <BlockOrientation Forward="Forward" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                <EntityId>92399987550190404</EntityId>
                                <Min x="1" y="13" z="3" />
                                <BlockOrientation Forward="Left" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <ComponentContainer>
                                  <Components>
                                    <ComponentData>
                                      <TypeId>MyInventoryBase</TypeId>
                                      <Component xsi:type="MyObjectBuilder_Inventory">
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2.549898</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                              <SubtypeName>Uranium</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>1</nextItemId>
                                        <Volume>0.125</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Component>
                                    </ComponentData>
                                  </Components>
                                </ComponentContainer>
                                <CustomName>VC SC Small Reactor 1</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Inventory>
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>2.549898</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                        <SubtypeName>Uranium</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>1</nextItemId>
                                  <Volume>0.125</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Inventory>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                <Min x="3" y="14" z="10" />
                                <BlockOrientation Forward="Forward" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <Min x="1" y="14" z="1" />
                                <BlockOrientation Forward="Backward" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                <EntityId>99295618012613217</EntityId>
                                <Min x="0" y="13" z="1" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <ComponentContainer>
                                  <Components>
                                    <ComponentData>
                                      <TypeId>MyInventoryBase</TypeId>
                                      <Component xsi:type="MyObjectBuilder_Inventory">
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2.350306</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                              <SubtypeName>Uranium</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>4</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>6</nextItemId>
                                        <Volume>0.125</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Component>
                                    </ComponentData>
                                  </Components>
                                </ComponentContainer>
                                <CustomName>VC SC Small Cargo Container 2</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                <SubtypeName>SmallTextPanel</SubtypeName>
                                <EntityId>123371884011716452</EntityId>
                                <Min x="1" y="14" z="3" />
                                <BlockOrientation Forward="Right" Up="Up" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Description />
                                <Title>Title</Title>
                                <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                <ChangeInterval>0</ChangeInterval>
                                <SelectedImages />
                                <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                <FontSize>1.6</FontSize>
                                <PublicDescription>Location: {X:994511 Y:98784 Z:1671065}

No damaged blocks found.
</PublicDescription>
                                <PublicTitle>POS;Echo;Damage</PublicTitle>
                                <ShowText>PUBLIC</ShowText>
                                <FontColor>
                                  <PackedValue>4281501695</PackedValue>
                                  <X>255</X>
                                  <Y>135</Y>
                                  <Z>50</Z>
                                  <R>255</R>
                                  <G>135</G>
                                  <B>50</B>
                                  <A>255</A>
                                </FontColor>
                                <BackgroundColor>
                                  <PackedValue>4278190080</PackedValue>
                                  <X>0</X>
                                  <Y>0</Y>
                                  <Z>0</Z>
                                  <R>0</R>
                                  <G>0</G>
                                  <B>0</B>
                                  <A>255</A>
                                </BackgroundColor>
                                <CurrentShownTexture>0</CurrentShownTexture>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                                <SubtypeName>SmallBlockCockpit</SubtypeName>
                                <EntityId>113225079230274238</EntityId>
                                <Min x="-1" y="13" z="4" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <ComponentContainer>
                                  <Components>
                                    <ComponentData>
                                      <TypeId>MyInventoryBase</TypeId>
                                      <Component xsi:type="MyObjectBuilder_Inventory">
                                        <Items />
                                        <nextItemId>0</nextItemId>
                                        <Volume>1</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Component>
                                    </ComponentData>
                                  </Components>
                                </ComponentContainer>
                                <CustomName>VC SC Cockpit</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <UseSingleWeaponMode>false</UseSingleWeaponMode>
                                <Toolbar>
                                  <ToolbarType>Character</ToolbarType>
                                  <SelectedSlot xsi:nil="true" />
                                  <Slots>
                                    <Slot>
                                      <Index>0</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                        <Action>OnOff</Action>
                                        <GridEntityId>0</GridEntityId>
                                        <BlockEntityId>113225079230274238</BlockEntityId>
                                        <GroupName>VC SC Lights</GroupName>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>1</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                        <Action>OnOff</Action>
                                        <GridEntityId>0</GridEntityId>
                                        <BlockEntityId>113225079230274238</BlockEntityId>
                                        <GroupName>VC SC Artificial Mass</GroupName>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>2</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                        <Action>IncreaseHeight</Action>
                                        <GridEntityId>0</GridEntityId>
                                        <BlockEntityId>113225079230274238</BlockEntityId>
                                        <GroupName>VC SC Wheels</GroupName>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>3</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                        <Action>DecreaseHeight</Action>
                                        <GridEntityId>0</GridEntityId>
                                        <BlockEntityId>113225079230274238</BlockEntityId>
                                        <GroupName>VC SC Wheels</GroupName>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>4</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                        <Action>OnOff</Action>
                                        <GridEntityId>0</GridEntityId>
                                        <BlockEntityId>113225079230274238</BlockEntityId>
                                        <GroupName>VC SC Thrusters</GroupName>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>5</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>View</Action>
                                        <BlockEntityId>123677925820358715</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>6</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>Stockpile</Action>
                                        <BlockEntityId>123313640738398953</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>7</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                        <Action>OnOff</Action>
                                        <GridEntityId>0</GridEntityId>
                                        <BlockEntityId>113225079230274238</BlockEntityId>
                                        <GroupName>VC SC Reactors</GroupName>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>8</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>TriggerNow</Action>
                                        <BlockEntityId>95519143933491588</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>9</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>OnOff</Action>
                                        <BlockEntityId>114337212133667652</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>10</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>IncreaseRadius</Action>
                                        <BlockEntityId>114337212133667652</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>11</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>DecreaseRadius</Action>
                                        <BlockEntityId>114337212133667652</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>12</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>OnOff</Action>
                                        <BlockEntityId>118022331731517303</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>13</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>IncreaseRadius</Action>
                                        <BlockEntityId>118022331731517303</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>14</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>DecreaseRadius</Action>
                                        <BlockEntityId>118022331731517303</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>15</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>Depressurize</Action>
                                        <BlockEntityId>142030579960364983</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>16</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>OnOff</Action>
                                        <BlockEntityId>142030579960364983</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>18</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>OnOff</Action>
                                        <BlockEntityId>80885718678810440</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>19</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>IncreasePower</Action>
                                        <BlockEntityId>80885718678810440</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>20</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>DecreasePower</Action>
                                        <BlockEntityId>80885718678810440</BlockEntityId>
                                      </Data>
                                    </Slot>
                                  </Slots>
                                </Toolbar>
                                <SelectedGunId xsi:nil="true" />
                                <BuildToolbar>
                                  <ToolbarType>Character</ToolbarType>
                                  <SelectedSlot xsi:nil="true" />
                                  <Slots />
                                </BuildToolbar>
                                <PilotRelativeWorld xsi:nil="true" />
                                <PilotGunDefinition xsi:nil="true" />
                                <IsInFirstPersonView>true</IsInFirstPersonView>
                                <OxygenLevel>1</OxygenLevel>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                <SubtypeName>SmallTextPanel</SubtypeName>
                                <EntityId>117040654345747940</EntityId>
                                <Min x="-1" y="14" z="3" />
                                <BlockOrientation Forward="Left" Up="Up" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Description />
                                <Title>Title</Title>
                                <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                <ChangeInterval>0</ChangeInterval>
                                <SelectedImages />
                                <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                <FontSize>1.6</FontSize>
                                <PublicDescription>Speed:                  0.0 m/s 

Power:      14 kW / 1.5 MW
[''''''''''''''''''''''''''''''''''''''']   0.9%




Oxygen Tanks    100.00%
[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
</PublicDescription>
                                <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                                <ShowText>PUBLIC</ShowText>
                                <FontColor>
                                  <PackedValue>4281501695</PackedValue>
                                  <X>255</X>
                                  <Y>135</Y>
                                  <Z>50</Z>
                                  <R>255</R>
                                  <G>135</G>
                                  <B>50</B>
                                  <A>255</A>
                                </FontColor>
                                <BackgroundColor>
                                  <PackedValue>4278190080</PackedValue>
                                  <X>0</X>
                                  <Y>0</Y>
                                  <Z>0</Z>
                                  <R>0</R>
                                  <G>0</G>
                                  <B>0</B>
                                  <A>255</A>
                                </BackgroundColor>
                                <CurrentShownTexture>0</CurrentShownTexture>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="-1" y="13" z="0" />
                                <BlockOrientation Forward="Down" Up="Forward" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="-1" y="12" z="0" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                <Min x="-2" y="14" z="1" />
                                <BlockOrientation Forward="Backward" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                <Min x="1" y="14" z="2" />
                                <BlockOrientation Forward="Down" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                <Min x="-2" y="14" z="4" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <Min x="-1" y="14" z="1" />
                                <BlockOrientation Forward="Backward" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="1" y="13" z="0" />
                                <BlockOrientation Forward="Down" Up="Forward" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                <Min x="-2" y="14" z="3" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                <Min x="-2" y="14" z="2" />
                                <BlockOrientation Forward="Down" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                                <SubtypeName>SmallBlockBeacon</SubtypeName>
                                <EntityId>118022331731517303</EntityId>
                                <Min x="-2" y="13" z="5" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Beacon</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                                <BroadcastRadius>10000</BroadcastRadius>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                <Min x="2" y="14" z="4" />
                                <BlockOrientation Forward="Forward" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                <Min x="2" y="14" z="3" />
                                <BlockOrientation Forward="Forward" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                <Min x="2" y="14" z="2" />
                                <BlockOrientation Forward="Left" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                <Min x="2" y="14" z="1" />
                                <BlockOrientation Forward="Backward" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                <Min x="2" y="13" z="5" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                <Min x="-2" y="13" z="4" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                                <SubtypeName>SmallProjector</SubtypeName>
                                <EntityId>72908132733296140</EntityId>
                                <Min x="2" y="13" z="4" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Vehicle Repair Projector</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                                <ProjectedGrid>
                                  <SubtypeName />
                                  <EntityId>126453382689918348</EntityId>
                                  <PersistentFlags>CastShadows InScene</PersistentFlags>
                                  <PositionAndOrientation>
                                    <Position x="0" y="0" z="0" />
                                    <Forward x="-0.75090605" y="0.613463938" z="-0.244544744" />
                                    <Up x="0.6040443" y="0.48830694" z="-0.6298308" />
                                    <Orientation>
                                      <X>-0.0067590354</X>
                                      <Y>0.614558339</Y>
                                      <Z>-0.5057676</Z>
                                      <W>0.6053689</W>
                                    </Orientation>
                                  </PositionAndOrientation>
                                  <GridSizeEnum>Small</GridSizeEnum>
                                  <CubeBlocks>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                      <Min x="0" y="12" z="1" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                      <SubtypeName>SmallSuspension3x3</SubtypeName>
                                      <EntityId>132119629890545430</EntityId>
                                      <Min x="-2" y="12" z="1" />
                                      <BlockOrientation Forward="Up" Up="Left" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <TopBlockId xsi:nil="true" />
                                      <ShareInertiaTensor>false</ShareInertiaTensor>
                                      <SafetyDetach xsi:nil="true" />
                                      <RotorEntityId>91676898761716179</RotorEntityId>
                                      <WeldedEntityId xsi:nil="true" />
                                      <SteerAngle>0</SteerAngle>
                                      <Damping>0.75</Damping>
                                      <Strength>0.18</Strength>
                                      <Propulsion>true</Propulsion>
                                      <Friction>2.4</Friction>
                                      <Power>0.5</Power>
                                      <Height>-0.32</Height>
                                      <MaxSteerAngle>0.32</MaxSteerAngle>
                                      <InvertSteer>false</InvertSteer>
                                      <InvertPropulsion>false</InvertPropulsion>
                                      <SpeedLimit>100.000008</SpeedLimit>
                                      <PowerNew>0.6</PowerNew>
                                      <StrengthNew>0.1</StrengthNew>
                                      <FrictionNew xsi:nil="true" />
                                      <AirShockEnabled>true</AirShockEnabled>
                                      <BrakingEnabled>true</BrakingEnabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                      <SubtypeName>SmallSuspension3x3</SubtypeName>
                                      <EntityId>103630609740106495</EntityId>
                                      <Min x="1" y="12" z="1" />
                                      <BlockOrientation Forward="Up" Up="Right" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <TopBlockId xsi:nil="true" />
                                      <ShareInertiaTensor>false</ShareInertiaTensor>
                                      <SafetyDetach xsi:nil="true" />
                                      <RotorEntityId>141480187327188140</RotorEntityId>
                                      <WeldedEntityId xsi:nil="true" />
                                      <SteerAngle>0</SteerAngle>
                                      <Damping>0.75</Damping>
                                      <Strength>0.18</Strength>
                                      <Propulsion>true</Propulsion>
                                      <Friction>2.4</Friction>
                                      <Power>0.5</Power>
                                      <Height>-0.32</Height>
                                      <MaxSteerAngle>0.32</MaxSteerAngle>
                                      <InvertSteer>false</InvertSteer>
                                      <InvertPropulsion>false</InvertPropulsion>
                                      <SpeedLimit>100.000008</SpeedLimit>
                                      <PowerNew>0.6</PowerNew>
                                      <StrengthNew>0.1</StrengthNew>
                                      <FrictionNew xsi:nil="true" />
                                      <AirShockEnabled>true</AirShockEnabled>
                                      <BrakingEnabled>true</BrakingEnabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="0" y="12" z="2" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="0" y="12" z="3" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="0" y="12" z="0" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                      <Min x="-1" y="13" z="1" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                                      <SubtypeName>SmallAirVent</SubtypeName>
                                      <EntityId>127832878788400892</EntityId>
                                      <Min x="0" y="13" z="0" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Air Vent</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <IsDepressurizing>true</IsDepressurizing>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                      <Min x="-1" y="14" z="2" />
                                      <BlockOrientation Forward="Left" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                      <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                      <EntityId>75622448546244681</EntityId>
                                      <Min x="0" y="13" z="2" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <ComponentContainer>
                                        <Components>
                                          <ComponentData>
                                            <TypeId>MyInventoryBase</TypeId>
                                            <Component xsi:type="MyObjectBuilder_Inventory">
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>1</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                                    <SubtypeName>AutomaticRifleItem</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>20</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                                                    <SubtypeName>NATO_5p56x45mm</SubtypeName>
                                                    <ProjectilesCount>0</ProjectilesCount>
                                                  </PhysicalContent>
                                                  <ItemId>1</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>1</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                                    <SubtypeName>AngleGrinderItem</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>2</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>1</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                                    <SubtypeName>WelderItem</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>3</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>1</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                                    <SubtypeName>HandDrillItem</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>4</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>5</nextItemId>
                                              <Volume>0.125</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Component>
                                          </ComponentData>
                                        </Components>
                                      </ComponentContainer>
                                      <CustomName>VC SC Small Cargo Container 1</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                                      <SubtypeName>SmallBlockConveyor</SubtypeName>
                                      <EntityId>124464532175927751</EntityId>
                                      <Min x="0" y="13" z="3" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                      <Min x="-1" y="13" z="2" />
                                      <BlockOrientation Forward="Forward" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                      <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                      <EntityId>102106141102389494</EntityId>
                                      <Min x="1" y="13" z="3" />
                                      <BlockOrientation Forward="Left" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <ComponentContainer>
                                        <Components>
                                          <ComponentData>
                                            <TypeId>MyInventoryBase</TypeId>
                                            <Component xsi:type="MyObjectBuilder_Inventory">
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2.33324</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                    <SubtypeName>Uranium</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>1</nextItemId>
                                              <Volume>0.125</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Component>
                                          </ComponentData>
                                        </Components>
                                      </ComponentContainer>
                                      <CustomName>VC SC Small Reactor 1</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Inventory>
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2.33324</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                              <SubtypeName>Uranium</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>1</nextItemId>
                                        <Volume>0.125</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Inventory>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="3" y="14" z="10" />
                                      <BlockOrientation Forward="Forward" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="1" y="14" z="1" />
                                      <BlockOrientation Forward="Backward" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                      <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                      <EntityId>95934478225779002</EntityId>
                                      <Min x="0" y="13" z="1" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <ComponentContainer>
                                        <Components>
                                          <ComponentData>
                                            <TypeId>MyInventoryBase</TypeId>
                                            <Component xsi:type="MyObjectBuilder_Inventory">
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>3.00028</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                    <SubtypeName>Uranium</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>4</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>6</nextItemId>
                                              <Volume>0.125</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Component>
                                          </ComponentData>
                                        </Components>
                                      </ComponentContainer>
                                      <CustomName>VC SC Small Cargo Container 2</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                      <SubtypeName>SmallTextPanel</SubtypeName>
                                      <EntityId>75174188021235907</EntityId>
                                      <Min x="1" y="14" z="3" />
                                      <BlockOrientation Forward="Right" Up="Up" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Description />
                                      <Title>Title</Title>
                                      <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                      <ChangeInterval>0</ChangeInterval>
                                      <SelectedImages />
                                      <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                      <FontSize>1.6</FontSize>
                                      <PublicDescription>Location: {X:532 Y:205 Z:157}

No damaged blocks found.
</PublicDescription>
                                      <PublicTitle>POS;Echo;Damage</PublicTitle>
                                      <ShowText>PUBLIC</ShowText>
                                      <FontColor>
                                        <PackedValue>4281501695</PackedValue>
                                        <X>255</X>
                                        <Y>135</Y>
                                        <Z>50</Z>
                                        <R>255</R>
                                        <G>135</G>
                                        <B>50</B>
                                        <A>255</A>
                                      </FontColor>
                                      <BackgroundColor>
                                        <PackedValue>4278190080</PackedValue>
                                        <X>0</X>
                                        <Y>0</Y>
                                        <Z>0</Z>
                                        <R>0</R>
                                        <G>0</G>
                                        <B>0</B>
                                        <A>255</A>
                                      </BackgroundColor>
                                      <CurrentShownTexture>0</CurrentShownTexture>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                                      <SubtypeName>SmallBlockCockpit</SubtypeName>
                                      <EntityId>130272509576448896</EntityId>
                                      <Min x="-1" y="13" z="4" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <ComponentContainer>
                                        <Components>
                                          <ComponentData>
                                            <TypeId>MyInventoryBase</TypeId>
                                            <Component xsi:type="MyObjectBuilder_Inventory">
                                              <Items />
                                              <nextItemId>0</nextItemId>
                                              <Volume>1</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Component>
                                          </ComponentData>
                                        </Components>
                                      </ComponentContainer>
                                      <CustomName>VC SC Cockpit</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <UseSingleWeaponMode>false</UseSingleWeaponMode>
                                      <Toolbar>
                                        <ToolbarType>Character</ToolbarType>
                                        <SelectedSlot xsi:nil="true" />
                                        <Slots>
                                          <Slot>
                                            <Index>0</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                              <Action>OnOff</Action>
                                              <GridEntityId>0</GridEntityId>
                                              <BlockEntityId>130272509576448896</BlockEntityId>
                                              <GroupName>VC SC Lights</GroupName>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>1</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                              <Action>OnOff</Action>
                                              <GridEntityId>0</GridEntityId>
                                              <BlockEntityId>130272509576448896</BlockEntityId>
                                              <GroupName>VC SC Artificial Mass</GroupName>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>2</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                              <Action>IncreaseHeight</Action>
                                              <GridEntityId>0</GridEntityId>
                                              <BlockEntityId>130272509576448896</BlockEntityId>
                                              <GroupName>VC SC Wheels</GroupName>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>3</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                              <Action>DecreaseHeight</Action>
                                              <GridEntityId>0</GridEntityId>
                                              <BlockEntityId>130272509576448896</BlockEntityId>
                                              <GroupName>VC SC Wheels</GroupName>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>4</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                              <Action>OnOff</Action>
                                              <GridEntityId>0</GridEntityId>
                                              <BlockEntityId>130272509576448896</BlockEntityId>
                                              <GroupName>VC SC Thrusters</GroupName>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>5</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>View</Action>
                                              <BlockEntityId>120252882816328092</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>6</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>Stockpile</Action>
                                              <BlockEntityId>140381581832582269</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>7</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                              <Action>OnOff</Action>
                                              <GridEntityId>0</GridEntityId>
                                              <BlockEntityId>130272509576448896</BlockEntityId>
                                              <GroupName>VC SC Reactors</GroupName>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>8</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>TriggerNow</Action>
                                              <BlockEntityId>100245666623628261</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>9</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>OnOff</Action>
                                              <BlockEntityId>74072395174758701</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>10</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>IncreaseRadius</Action>
                                              <BlockEntityId>74072395174758701</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>11</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>DecreaseRadius</Action>
                                              <BlockEntityId>74072395174758701</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>12</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>OnOff</Action>
                                              <BlockEntityId>106740962582302554</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>13</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>IncreaseRadius</Action>
                                              <BlockEntityId>106740962582302554</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>14</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>DecreaseRadius</Action>
                                              <BlockEntityId>106740962582302554</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>15</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>Depressurize</Action>
                                              <BlockEntityId>127832878788400892</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>16</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>OnOff</Action>
                                              <BlockEntityId>127832878788400892</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>18</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>OnOff</Action>
                                              <BlockEntityId>122719714305163029</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>19</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>IncreasePower</Action>
                                              <BlockEntityId>122719714305163029</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>20</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>DecreasePower</Action>
                                              <BlockEntityId>122719714305163029</BlockEntityId>
                                            </Data>
                                          </Slot>
                                        </Slots>
                                      </Toolbar>
                                      <SelectedGunId xsi:nil="true" />
                                      <BuildToolbar>
                                        <ToolbarType>Character</ToolbarType>
                                        <SelectedSlot xsi:nil="true" />
                                        <Slots />
                                      </BuildToolbar>
                                      <PilotRelativeWorld>
                                        <Position x="2.5397765636444092" y="-1.1716357469558716" z="-2.9971885681152344" />
                                        <Forward x="-0.6240339" y="0.0974534" z="0.7752963" />
                                        <Up x="0.0251393355" y="0.994182646" z="-0.104732454" />
                                        <Orientation>
                                          <X>-0.005499967</X>
                                          <Y>0.942134738</Y>
                                          <Z>-0.0536509939</Z>
                                          <W>0.330867648</W>
                                        </Orientation>
                                      </PilotRelativeWorld>
                                      <PilotGunDefinition xsi:nil="true" />
                                      <IsInFirstPersonView>false</IsInFirstPersonView>
                                      <OxygenLevel>1</OxygenLevel>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                      <SubtypeName>SmallTextPanel</SubtypeName>
                                      <EntityId>136719269497690521</EntityId>
                                      <Min x="-1" y="14" z="3" />
                                      <BlockOrientation Forward="Left" Up="Up" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Description />
                                      <Title>Title</Title>
                                      <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                      <ChangeInterval>0</ChangeInterval>
                                      <SelectedImages />
                                      <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                      <FontSize>1.6</FontSize>
                                      <PublicDescription>Speed:                  0.0 m/s 

Power:      14 kW / 1.5 MW
[''''''''''''''''''''''''''''''''''''''']   0.9%




Oxygen Tanks    100.00%
[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
</PublicDescription>
                                      <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                                      <ShowText>PUBLIC</ShowText>
                                      <FontColor>
                                        <PackedValue>4281501695</PackedValue>
                                        <X>255</X>
                                        <Y>135</Y>
                                        <Z>50</Z>
                                        <R>255</R>
                                        <G>135</G>
                                        <B>50</B>
                                        <A>255</A>
                                      </FontColor>
                                      <BackgroundColor>
                                        <PackedValue>4278190080</PackedValue>
                                        <X>0</X>
                                        <Y>0</Y>
                                        <Z>0</Z>
                                        <R>0</R>
                                        <G>0</G>
                                        <B>0</B>
                                        <A>255</A>
                                      </BackgroundColor>
                                      <CurrentShownTexture>0</CurrentShownTexture>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="-1" y="13" z="0" />
                                      <BlockOrientation Forward="Down" Up="Forward" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="-1" y="12" z="0" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="-2" y="14" z="1" />
                                      <BlockOrientation Forward="Backward" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                      <Min x="1" y="14" z="2" />
                                      <BlockOrientation Forward="Down" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                      <Min x="-2" y="14" z="4" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="-1" y="14" z="1" />
                                      <BlockOrientation Forward="Backward" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="1" y="13" z="0" />
                                      <BlockOrientation Forward="Down" Up="Forward" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                      <Min x="-2" y="14" z="3" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                      <Min x="-2" y="14" z="2" />
                                      <BlockOrientation Forward="Down" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                                      <SubtypeName>SmallBlockBeacon</SubtypeName>
                                      <EntityId>106740962582302554</EntityId>
                                      <Min x="-2" y="13" z="5" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Beacon</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                      <BroadcastRadius>10000</BroadcastRadius>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                      <Min x="2" y="14" z="4" />
                                      <BlockOrientation Forward="Forward" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                      <Min x="2" y="14" z="3" />
                                      <BlockOrientation Forward="Forward" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                      <Min x="2" y="14" z="2" />
                                      <BlockOrientation Forward="Left" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="2" y="14" z="1" />
                                      <BlockOrientation Forward="Backward" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                      <Min x="2" y="13" z="5" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                      <Min x="-2" y="13" z="4" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                                      <SubtypeName>SmallProjector</SubtypeName>
                                      <EntityId>78030332643612284</EntityId>
                                      <Min x="2" y="13" z="4" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Vehicle Repair Projector</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                      <ProjectedGrid>
                                        <SubtypeName />
                                        <EntityId>116227212708133996</EntityId>
                                        <PersistentFlags>CastShadows InScene</PersistentFlags>
                                        <PositionAndOrientation>
                                          <Position x="0" y="0" z="0" />
                                          <Forward x="-0.749901354" y="0.613670945" z="-0.247094646" />
                                          <Up x="0.605780959" y="0.486888021" z="-0.629261" />
                                          <Orientation>
                                            <X>-0.0064333044</X>
                                            <Y>0.613523662</Y>
                                            <Z>-0.5064727</Z>
                                            <W>0.6058322</W>
                                          </Orientation>
                                        </PositionAndOrientation>
                                        <GridSizeEnum>Small</GridSizeEnum>
                                        <CubeBlocks>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                            <Min x="0" y="12" z="1" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                            <SubtypeName>SmallSuspension3x3</SubtypeName>
                                            <EntityId>141390650472912168</EntityId>
                                            <Min x="-2" y="12" z="1" />
                                            <BlockOrientation Forward="Up" Up="Left" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <TopBlockId xsi:nil="true" />
                                            <ShareInertiaTensor>false</ShareInertiaTensor>
                                            <SafetyDetach xsi:nil="true" />
                                            <RotorEntityId>140882401002342678</RotorEntityId>
                                            <WeldedEntityId xsi:nil="true" />
                                            <SteerAngle>0</SteerAngle>
                                            <Damping>0.75</Damping>
                                            <Strength>0.18</Strength>
                                            <Propulsion>true</Propulsion>
                                            <Friction>2.4</Friction>
                                            <Power>0.5</Power>
                                            <Height>-0.32</Height>
                                            <MaxSteerAngle>0.32</MaxSteerAngle>
                                            <InvertSteer>false</InvertSteer>
                                            <InvertPropulsion>false</InvertPropulsion>
                                            <SpeedLimit>100.000008</SpeedLimit>
                                            <PowerNew>0.6</PowerNew>
                                            <StrengthNew>0.1</StrengthNew>
                                            <FrictionNew xsi:nil="true" />
                                            <AirShockEnabled>true</AirShockEnabled>
                                            <BrakingEnabled>true</BrakingEnabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                            <SubtypeName>SmallSuspension3x3</SubtypeName>
                                            <EntityId>98491274139024553</EntityId>
                                            <Min x="1" y="12" z="1" />
                                            <BlockOrientation Forward="Up" Up="Right" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <TopBlockId xsi:nil="true" />
                                            <ShareInertiaTensor>false</ShareInertiaTensor>
                                            <SafetyDetach xsi:nil="true" />
                                            <RotorEntityId>124962009902335146</RotorEntityId>
                                            <WeldedEntityId xsi:nil="true" />
                                            <SteerAngle>0</SteerAngle>
                                            <Damping>0.75</Damping>
                                            <Strength>0.18</Strength>
                                            <Propulsion>true</Propulsion>
                                            <Friction>2.4</Friction>
                                            <Power>0.5</Power>
                                            <Height>-0.32</Height>
                                            <MaxSteerAngle>0.32</MaxSteerAngle>
                                            <InvertSteer>false</InvertSteer>
                                            <InvertPropulsion>false</InvertPropulsion>
                                            <SpeedLimit>100.000008</SpeedLimit>
                                            <PowerNew>0.6</PowerNew>
                                            <StrengthNew>0.1</StrengthNew>
                                            <FrictionNew xsi:nil="true" />
                                            <AirShockEnabled>true</AirShockEnabled>
                                            <BrakingEnabled>true</BrakingEnabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="0" y="12" z="2" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="0" y="12" z="3" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="0" y="12" z="0" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                            <Min x="-1" y="13" z="1" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                                            <SubtypeName>SmallAirVent</SubtypeName>
                                            <EntityId>102385125259194301</EntityId>
                                            <Min x="0" y="13" z="0" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Air Vent</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <IsDepressurizing>true</IsDepressurizing>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                            <Min x="-1" y="14" z="2" />
                                            <BlockOrientation Forward="Left" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                            <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                            <EntityId>110333105150868896</EntityId>
                                            <Min x="0" y="13" z="2" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <ComponentContainer>
                                              <Components>
                                                <ComponentData>
                                                  <TypeId>MyInventoryBase</TypeId>
                                                  <Component xsi:type="MyObjectBuilder_Inventory">
                                                    <Items>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>1</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                                          <SubtypeName>AutomaticRifleItem</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>0</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>20</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                                                          <SubtypeName>NATO_5p56x45mm</SubtypeName>
                                                          <ProjectilesCount>0</ProjectilesCount>
                                                        </PhysicalContent>
                                                        <ItemId>1</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>1</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                                          <SubtypeName>AngleGrinderItem</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>2</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>1</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                                          <SubtypeName>WelderItem</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>3</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>1</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_PhysicalGunObject">
                                                          <SubtypeName>HandDrillItem</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>4</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                    </Items>
                                                    <nextItemId>5</nextItemId>
                                                    <Volume>0.125</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Component>
                                                </ComponentData>
                                              </Components>
                                            </ComponentContainer>
                                            <CustomName>VC SC Small Cargo Container 1</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                                            <SubtypeName>SmallBlockConveyor</SubtypeName>
                                            <EntityId>99883363427750599</EntityId>
                                            <Min x="0" y="13" z="3" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                            <Min x="-1" y="13" z="2" />
                                            <BlockOrientation Forward="Forward" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                            <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                            <EntityId>137294557887603320</EntityId>
                                            <Min x="1" y="13" z="3" />
                                            <BlockOrientation Forward="Left" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <ComponentContainer>
                                              <Components>
                                                <ComponentData>
                                                  <TypeId>MyInventoryBase</TypeId>
                                                  <Component xsi:type="MyObjectBuilder_Inventory">
                                                    <Items>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>2.158247</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                          <SubtypeName>Uranium</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>0</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                    </Items>
                                                    <nextItemId>1</nextItemId>
                                                    <Volume>0.125</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Component>
                                                </ComponentData>
                                              </Components>
                                            </ComponentContainer>
                                            <CustomName>VC SC Small Reactor 1</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Inventory>
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2.158247</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                    <SubtypeName>Uranium</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>1</nextItemId>
                                              <Volume>0.125</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Inventory>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="3" y="14" z="10" />
                                            <BlockOrientation Forward="Forward" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="1" y="14" z="1" />
                                            <BlockOrientation Forward="Backward" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                            <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                            <EntityId>137173043949349773</EntityId>
                                            <Min x="0" y="13" z="1" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <ComponentContainer>
                                              <Components>
                                                <ComponentData>
                                                  <TypeId>MyInventoryBase</TypeId>
                                                  <Component xsi:type="MyObjectBuilder_Inventory">
                                                    <Items>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>3.525259</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                          <SubtypeName>Uranium</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>4</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                    </Items>
                                                    <nextItemId>6</nextItemId>
                                                    <Volume>0.125</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Component>
                                                </ComponentData>
                                              </Components>
                                            </ComponentContainer>
                                            <CustomName>VC SC Small Cargo Container 2</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                            <SubtypeName>SmallTextPanel</SubtypeName>
                                            <EntityId>107376577064492753</EntityId>
                                            <Min x="1" y="14" z="3" />
                                            <BlockOrientation Forward="Right" Up="Up" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Description />
                                            <Title>Title</Title>
                                            <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                            <ChangeInterval>0</ChangeInterval>
                                            <SelectedImages />
                                            <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                            <FontSize>1.6</FontSize>
                                            <PublicDescription>Location: {X:532 Y:205 Z:157}

No damaged blocks found.
</PublicDescription>
                                            <PublicTitle>POS;Echo;Damage</PublicTitle>
                                            <ShowText>PUBLIC</ShowText>
                                            <FontColor>
                                              <PackedValue>4281501695</PackedValue>
                                              <X>255</X>
                                              <Y>135</Y>
                                              <Z>50</Z>
                                              <R>255</R>
                                              <G>135</G>
                                              <B>50</B>
                                              <A>255</A>
                                            </FontColor>
                                            <BackgroundColor>
                                              <PackedValue>4278190080</PackedValue>
                                              <X>0</X>
                                              <Y>0</Y>
                                              <Z>0</Z>
                                              <R>0</R>
                                              <G>0</G>
                                              <B>0</B>
                                              <A>255</A>
                                            </BackgroundColor>
                                            <CurrentShownTexture>0</CurrentShownTexture>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                                            <SubtypeName>SmallBlockCockpit</SubtypeName>
                                            <EntityId>92867909795888188</EntityId>
                                            <Min x="-1" y="13" z="4" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <ComponentContainer>
                                              <Components>
                                                <ComponentData>
                                                  <TypeId>MyInventoryBase</TypeId>
                                                  <Component xsi:type="MyObjectBuilder_Inventory">
                                                    <Items />
                                                    <nextItemId>0</nextItemId>
                                                    <Volume>1</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Component>
                                                </ComponentData>
                                              </Components>
                                            </ComponentContainer>
                                            <CustomName>VC SC Cockpit</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <UseSingleWeaponMode>false</UseSingleWeaponMode>
                                            <Toolbar>
                                              <ToolbarType>Character</ToolbarType>
                                              <SelectedSlot xsi:nil="true" />
                                              <Slots>
                                                <Slot>
                                                  <Index>0</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                    <Action>OnOff</Action>
                                                    <GridEntityId>0</GridEntityId>
                                                    <BlockEntityId>92867909795888188</BlockEntityId>
                                                    <GroupName>VC SC Lights</GroupName>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>1</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                    <Action>OnOff</Action>
                                                    <GridEntityId>0</GridEntityId>
                                                    <BlockEntityId>92867909795888188</BlockEntityId>
                                                    <GroupName>VC SC Artificial Mass</GroupName>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>2</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                    <Action>IncreaseHeight</Action>
                                                    <GridEntityId>0</GridEntityId>
                                                    <BlockEntityId>92867909795888188</BlockEntityId>
                                                    <GroupName>VC SC Wheels</GroupName>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>3</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                    <Action>DecreaseHeight</Action>
                                                    <GridEntityId>0</GridEntityId>
                                                    <BlockEntityId>92867909795888188</BlockEntityId>
                                                    <GroupName>VC SC Wheels</GroupName>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>4</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                    <Action>OnOff</Action>
                                                    <GridEntityId>0</GridEntityId>
                                                    <BlockEntityId>92867909795888188</BlockEntityId>
                                                    <GroupName>VC SC Thrusters</GroupName>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>5</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>View</Action>
                                                    <BlockEntityId>107561106207480908</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>6</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>Stockpile</Action>
                                                    <BlockEntityId>126216917753354709</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>7</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                    <Action>OnOff</Action>
                                                    <GridEntityId>0</GridEntityId>
                                                    <BlockEntityId>92867909795888188</BlockEntityId>
                                                    <GroupName>VC SC Reactors</GroupName>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>8</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>TriggerNow</Action>
                                                    <BlockEntityId>131119759599806763</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>9</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>OnOff</Action>
                                                    <BlockEntityId>91110317786647716</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>10</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>IncreaseRadius</Action>
                                                    <BlockEntityId>91110317786647716</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>11</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>DecreaseRadius</Action>
                                                    <BlockEntityId>91110317786647716</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>12</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>OnOff</Action>
                                                    <BlockEntityId>119713937172233186</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>13</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>IncreaseRadius</Action>
                                                    <BlockEntityId>119713937172233186</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>14</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>DecreaseRadius</Action>
                                                    <BlockEntityId>119713937172233186</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>15</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>Depressurize</Action>
                                                    <BlockEntityId>102385125259194301</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>16</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>OnOff</Action>
                                                    <BlockEntityId>102385125259194301</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>18</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>OnOff</Action>
                                                    <BlockEntityId>76923092252181727</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>19</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>IncreasePower</Action>
                                                    <BlockEntityId>76923092252181727</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>20</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>DecreasePower</Action>
                                                    <BlockEntityId>76923092252181727</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                              </Slots>
                                            </Toolbar>
                                            <SelectedGunId xsi:nil="true" />
                                            <BuildToolbar>
                                              <ToolbarType>Character</ToolbarType>
                                              <SelectedSlot xsi:nil="true" />
                                              <Slots />
                                            </BuildToolbar>
                                            <PilotRelativeWorld>
                                              <Position x="2.5241138935089111" y="-1.2052363157272339" z="-3.1064510345458984" />
                                              <Forward x="-0.6604728" y="0.08469372" z="0.746058166" />
                                              <Up x="0.01992008" y="0.9952448" z="-0.0953468755" />
                                              <Orientation>
                                                <X>-0.00754348049</X>
                                                <Y>0.9343298</Y>
                                                <Z>-0.04817373</Z>
                                                <W>0.3530584</W>
                                              </Orientation>
                                            </PilotRelativeWorld>
                                            <PilotGunDefinition xsi:nil="true" />
                                            <IsInFirstPersonView>false</IsInFirstPersonView>
                                            <OxygenLevel>1</OxygenLevel>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                            <SubtypeName>SmallTextPanel</SubtypeName>
                                            <EntityId>83109832123218428</EntityId>
                                            <Min x="-1" y="14" z="3" />
                                            <BlockOrientation Forward="Left" Up="Up" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Description />
                                            <Title>Title</Title>
                                            <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                            <ChangeInterval>0</ChangeInterval>
                                            <SelectedImages />
                                            <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                            <FontSize>1.6</FontSize>
                                            <PublicDescription>Speed:                  0.0 m/s 

Power:      14 kW / 1.5 MW
[''''''''''''''''''''''''''''''''''''''']   0.9%




Oxygen Tanks    100.00%
[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
</PublicDescription>
                                            <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                                            <ShowText>PUBLIC</ShowText>
                                            <FontColor>
                                              <PackedValue>4281501695</PackedValue>
                                              <X>255</X>
                                              <Y>135</Y>
                                              <Z>50</Z>
                                              <R>255</R>
                                              <G>135</G>
                                              <B>50</B>
                                              <A>255</A>
                                            </FontColor>
                                            <BackgroundColor>
                                              <PackedValue>4278190080</PackedValue>
                                              <X>0</X>
                                              <Y>0</Y>
                                              <Z>0</Z>
                                              <R>0</R>
                                              <G>0</G>
                                              <B>0</B>
                                              <A>255</A>
                                            </BackgroundColor>
                                            <CurrentShownTexture>0</CurrentShownTexture>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="-1" y="13" z="0" />
                                            <BlockOrientation Forward="Down" Up="Forward" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="-1" y="12" z="0" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="-2" y="14" z="1" />
                                            <BlockOrientation Forward="Backward" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                            <Min x="1" y="14" z="2" />
                                            <BlockOrientation Forward="Down" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                            <Min x="-2" y="14" z="4" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="-1" y="14" z="1" />
                                            <BlockOrientation Forward="Backward" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="1" y="13" z="0" />
                                            <BlockOrientation Forward="Down" Up="Forward" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                            <Min x="-2" y="14" z="3" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                            <Min x="-2" y="14" z="2" />
                                            <BlockOrientation Forward="Down" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                                            <SubtypeName>SmallBlockBeacon</SubtypeName>
                                            <EntityId>119713937172233186</EntityId>
                                            <Min x="-2" y="13" z="5" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Beacon</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                            <BroadcastRadius>10000</BroadcastRadius>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                            <Min x="2" y="14" z="4" />
                                            <BlockOrientation Forward="Forward" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                            <Min x="2" y="14" z="3" />
                                            <BlockOrientation Forward="Forward" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                            <Min x="2" y="14" z="2" />
                                            <BlockOrientation Forward="Left" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="2" y="14" z="1" />
                                            <BlockOrientation Forward="Backward" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                            <Min x="2" y="13" z="5" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                            <Min x="-2" y="13" z="4" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                                            <SubtypeName>SmallProjector</SubtypeName>
                                            <EntityId>108806667641169994</EntityId>
                                            <Min x="2" y="13" z="4" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Vehicle Repair Projector</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                            <ProjectedGrid>
                                              <SubtypeName />
                                              <EntityId>89990182602847765</EntityId>
                                              <PersistentFlags>CastShadows InScene</PersistentFlags>
                                              <PositionAndOrientation>
                                                <Position x="0" y="0" z="0" />
                                                <Forward x="-0.747531056" y="0.5872429" z="-0.310391963" />
                                                <Up x="0.6270488" y="0.469755232" z="-0.6214015" />
                                                <Orientation>
                                                  <X>-0.0136698149</X>
                                                  <Y>0.587041</Y>
                                                  <Z>-0.5147189</Z>
                                                  <W>0.6247083</W>
                                                </Orientation>
                                              </PositionAndOrientation>
                                              <GridSizeEnum>Small</GridSizeEnum>
                                              <CubeBlocks>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                  <Min x="0" y="12" z="1" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                  <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                  <EntityId>132782643952831616</EntityId>
                                                  <Min x="-2" y="12" z="1" />
                                                  <BlockOrientation Forward="Up" Up="Left" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <TopBlockId xsi:nil="true" />
                                                  <ShareInertiaTensor>false</ShareInertiaTensor>
                                                  <SafetyDetach xsi:nil="true" />
                                                  <RotorEntityId>120346656002750651</RotorEntityId>
                                                  <WeldedEntityId xsi:nil="true" />
                                                  <SteerAngle>0</SteerAngle>
                                                  <Damping>0.75</Damping>
                                                  <Strength>0.18</Strength>
                                                  <Propulsion>true</Propulsion>
                                                  <Friction>2.4</Friction>
                                                  <Power>0.55</Power>
                                                  <Height>-0.32</Height>
                                                  <MaxSteerAngle>0.32</MaxSteerAngle>
                                                  <InvertSteer>false</InvertSteer>
                                                  <InvertPropulsion>false</InvertPropulsion>
                                                  <SpeedLimit>110</SpeedLimit>
                                                  <PowerNew>0.6</PowerNew>
                                                  <StrengthNew>0.1</StrengthNew>
                                                  <FrictionNew xsi:nil="true" />
                                                  <AirShockEnabled>true</AirShockEnabled>
                                                  <BrakingEnabled>true</BrakingEnabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                  <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                  <EntityId>114617885426538579</EntityId>
                                                  <Min x="1" y="12" z="1" />
                                                  <BlockOrientation Forward="Up" Up="Right" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <TopBlockId xsi:nil="true" />
                                                  <ShareInertiaTensor>false</ShareInertiaTensor>
                                                  <SafetyDetach xsi:nil="true" />
                                                  <RotorEntityId>88645893485400770</RotorEntityId>
                                                  <WeldedEntityId xsi:nil="true" />
                                                  <SteerAngle>0</SteerAngle>
                                                  <Damping>0.75</Damping>
                                                  <Strength>0.18</Strength>
                                                  <Propulsion>true</Propulsion>
                                                  <Friction>2.4</Friction>
                                                  <Power>0.55</Power>
                                                  <Height>-0.32</Height>
                                                  <MaxSteerAngle>0.32</MaxSteerAngle>
                                                  <InvertSteer>false</InvertSteer>
                                                  <InvertPropulsion>false</InvertPropulsion>
                                                  <SpeedLimit>110</SpeedLimit>
                                                  <PowerNew>0.6</PowerNew>
                                                  <StrengthNew>0.1</StrengthNew>
                                                  <FrictionNew xsi:nil="true" />
                                                  <AirShockEnabled>true</AirShockEnabled>
                                                  <BrakingEnabled>true</BrakingEnabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="0" y="12" z="2" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="0" y="12" z="3" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="0" y="12" z="0" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                  <Min x="-1" y="13" z="1" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                                                  <SubtypeName>SmallAirVent</SubtypeName>
                                                  <EntityId>97866562114236602</EntityId>
                                                  <Min x="0" y="13" z="0" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Air Vent</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <IsDepressurizing>true</IsDepressurizing>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                  <Min x="-1" y="14" z="2" />
                                                  <BlockOrientation Forward="Left" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                  <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                  <EntityId>107842973227128912</EntityId>
                                                  <Min x="0" y="13" z="2" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <ComponentContainer>
                                                    <Components>
                                                      <ComponentData>
                                                        <TypeId>MyInventoryBase</TypeId>
                                                        <Component xsi:type="MyObjectBuilder_Inventory">
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>0.125</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Component>
                                                      </ComponentData>
                                                    </Components>
                                                  </ComponentContainer>
                                                  <CustomName>VC SC Small Cargo Container 1</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                                                  <SubtypeName>SmallBlockConveyor</SubtypeName>
                                                  <EntityId>107582759984149002</EntityId>
                                                  <Min x="0" y="13" z="3" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                  <Min x="-1" y="13" z="2" />
                                                  <BlockOrientation Forward="Forward" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                  <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                  <EntityId>99475838653945269</EntityId>
                                                  <Min x="1" y="13" z="3" />
                                                  <BlockOrientation Forward="Left" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <ComponentContainer>
                                                    <Components>
                                                      <ComponentData>
                                                        <TypeId>MyInventoryBase</TypeId>
                                                        <Component xsi:type="MyObjectBuilder_Inventory">
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>0.125</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Component>
                                                      </ComponentData>
                                                    </Components>
                                                  </ComponentContainer>
                                                  <CustomName>VC SC Small Reactor 1</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Inventory>
                                                    <Items />
                                                    <nextItemId>0</nextItemId>
                                                    <Volume>0.125</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Inventory>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="3" y="14" z="10" />
                                                  <BlockOrientation Forward="Forward" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="1" y="14" z="1" />
                                                  <BlockOrientation Forward="Backward" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                  <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                  <EntityId>108091173312506877</EntityId>
                                                  <Min x="0" y="13" z="1" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <ComponentContainer>
                                                    <Components>
                                                      <ComponentData>
                                                        <TypeId>MyInventoryBase</TypeId>
                                                        <Component xsi:type="MyObjectBuilder_Inventory">
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>0.125</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Component>
                                                      </ComponentData>
                                                    </Components>
                                                  </ComponentContainer>
                                                  <CustomName>VC SC Small Cargo Container 2</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                  <SubtypeName>SmallTextPanel</SubtypeName>
                                                  <EntityId>122925927271838973</EntityId>
                                                  <Min x="1" y="14" z="3" />
                                                  <BlockOrientation Forward="Right" Up="Up" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Description />
                                                  <Title>Title</Title>
                                                  <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                  <ChangeInterval>0</ChangeInterval>
                                                  <SelectedImages />
                                                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                  <FontSize>1.6</FontSize>
                                                  <PublicDescription>Location: {X:532 Y:205 Z:156}

No damaged blocks found.
</PublicDescription>
                                                  <PublicTitle>POS;Echo;Damage</PublicTitle>
                                                  <ShowText>PUBLIC</ShowText>
                                                  <FontColor>
                                                    <PackedValue>4281501695</PackedValue>
                                                    <X>255</X>
                                                    <Y>135</Y>
                                                    <Z>50</Z>
                                                    <R>255</R>
                                                    <G>135</G>
                                                    <B>50</B>
                                                    <A>255</A>
                                                  </FontColor>
                                                  <BackgroundColor>
                                                    <PackedValue>4278190080</PackedValue>
                                                    <X>0</X>
                                                    <Y>0</Y>
                                                    <Z>0</Z>
                                                    <R>0</R>
                                                    <G>0</G>
                                                    <B>0</B>
                                                    <A>255</A>
                                                  </BackgroundColor>
                                                  <CurrentShownTexture>0</CurrentShownTexture>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                                                  <SubtypeName>SmallBlockCockpit</SubtypeName>
                                                  <EntityId>95695025041864466</EntityId>
                                                  <Min x="-1" y="13" z="4" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <ComponentContainer>
                                                    <Components>
                                                      <ComponentData>
                                                        <TypeId>MyInventoryBase</TypeId>
                                                        <Component xsi:type="MyObjectBuilder_Inventory">
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>1</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Component>
                                                      </ComponentData>
                                                    </Components>
                                                  </ComponentContainer>
                                                  <CustomName>VC SC Cockpit</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <UseSingleWeaponMode>false</UseSingleWeaponMode>
                                                  <Toolbar>
                                                    <ToolbarType>Character</ToolbarType>
                                                    <SelectedSlot xsi:nil="true" />
                                                    <Slots>
                                                      <Slot>
                                                        <Index>0</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                          <Action>OnOff</Action>
                                                          <GridEntityId>0</GridEntityId>
                                                          <BlockEntityId>95695025041864466</BlockEntityId>
                                                          <GroupName>VC SC Lights</GroupName>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>1</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                          <Action>OnOff</Action>
                                                          <GridEntityId>0</GridEntityId>
                                                          <BlockEntityId>95695025041864466</BlockEntityId>
                                                          <GroupName>VC SC Artificial Mass</GroupName>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>2</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                          <Action>IncreaseHeight</Action>
                                                          <GridEntityId>0</GridEntityId>
                                                          <BlockEntityId>95695025041864466</BlockEntityId>
                                                          <GroupName>VC SC Wheels</GroupName>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>3</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                          <Action>DecreaseHeight</Action>
                                                          <GridEntityId>0</GridEntityId>
                                                          <BlockEntityId>95695025041864466</BlockEntityId>
                                                          <GroupName>VC SC Wheels</GroupName>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>4</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                          <Action>OnOff</Action>
                                                          <GridEntityId>0</GridEntityId>
                                                          <BlockEntityId>95695025041864466</BlockEntityId>
                                                          <GroupName>VC SC Thrusters</GroupName>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>5</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>View</Action>
                                                          <BlockEntityId>129990850044357041</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>6</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>Stockpile</Action>
                                                          <BlockEntityId>85016974700178486</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>7</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                          <Action>OnOff</Action>
                                                          <GridEntityId>0</GridEntityId>
                                                          <BlockEntityId>95695025041864466</BlockEntityId>
                                                          <GroupName>VC SC Reactors</GroupName>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>8</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>OnOff</Action>
                                                          <BlockEntityId>130808334612835633</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>9</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>OnOff</Action>
                                                          <BlockEntityId>121063945178387233</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>10</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>IncreaseRadius</Action>
                                                          <BlockEntityId>121063945178387233</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>11</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>DecreaseRadius</Action>
                                                          <BlockEntityId>121063945178387233</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>12</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>OnOff</Action>
                                                          <BlockEntityId>118280046837440856</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>13</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>IncreaseRadius</Action>
                                                          <BlockEntityId>118280046837440856</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>14</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>DecreaseRadius</Action>
                                                          <BlockEntityId>118280046837440856</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>15</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>Depressurize</Action>
                                                          <BlockEntityId>97866562114236602</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>16</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>OnOff</Action>
                                                          <BlockEntityId>97866562114236602</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>18</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>OnOff</Action>
                                                          <BlockEntityId>82406023776621159</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>19</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>IncreasePower</Action>
                                                          <BlockEntityId>82406023776621159</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>20</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>DecreasePower</Action>
                                                          <BlockEntityId>82406023776621159</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                    </Slots>
                                                  </Toolbar>
                                                  <SelectedGunId xsi:nil="true" />
                                                  <BuildToolbar>
                                                    <ToolbarType>Character</ToolbarType>
                                                    <SelectedSlot xsi:nil="true" />
                                                    <Slots />
                                                  </BuildToolbar>
                                                  <PilotRelativeWorld>
                                                    <Position x="-3.6713669300079346" y="-1.7950961589813232" z="0.19543373584747314" />
                                                    <Forward x="0.995041132" y="0.0868029" z="-0.0485640243" />
                                                    <Up x="-0.0877023637" y="0.996006668" z="-0.0167034976" />
                                                    <Orientation>
                                                      <X>0.0242357422</X>
                                                      <Y>-0.6892972</Y>
                                                      <Z>0.037540555</Z>
                                                      <W>0.7230994</W>
                                                    </Orientation>
                                                  </PilotRelativeWorld>
                                                  <PilotGunDefinition xsi:nil="true" />
                                                  <IsInFirstPersonView>false</IsInFirstPersonView>
                                                  <OxygenLevel>1</OxygenLevel>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                  <SubtypeName>SmallTextPanel</SubtypeName>
                                                  <EntityId>74191436619472456</EntityId>
                                                  <Min x="-1" y="14" z="3" />
                                                  <BlockOrientation Forward="Left" Up="Up" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Description />
                                                  <Title>Title</Title>
                                                  <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                  <ChangeInterval>0</ChangeInterval>
                                                  <SelectedImages />
                                                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                  <FontSize>1.6</FontSize>
                                                  <PublicDescription>Speed:                  0.0 m/s 

Power:      15 kW / 1.5 MW
[''''''''''''''''''''''''''''''''''''''']     1.0%




Oxygen Tanks    100.00%
[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
</PublicDescription>
                                                  <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                                                  <ShowText>PUBLIC</ShowText>
                                                  <FontColor>
                                                    <PackedValue>4281501695</PackedValue>
                                                    <X>255</X>
                                                    <Y>135</Y>
                                                    <Z>50</Z>
                                                    <R>255</R>
                                                    <G>135</G>
                                                    <B>50</B>
                                                    <A>255</A>
                                                  </FontColor>
                                                  <BackgroundColor>
                                                    <PackedValue>4278190080</PackedValue>
                                                    <X>0</X>
                                                    <Y>0</Y>
                                                    <Z>0</Z>
                                                    <R>0</R>
                                                    <G>0</G>
                                                    <B>0</B>
                                                    <A>255</A>
                                                  </BackgroundColor>
                                                  <CurrentShownTexture>0</CurrentShownTexture>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="-1" y="13" z="0" />
                                                  <BlockOrientation Forward="Down" Up="Forward" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="-1" y="12" z="0" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="-2" y="14" z="1" />
                                                  <BlockOrientation Forward="Backward" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                  <Min x="1" y="14" z="2" />
                                                  <BlockOrientation Forward="Down" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                  <Min x="-2" y="14" z="4" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="-1" y="14" z="1" />
                                                  <BlockOrientation Forward="Backward" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="1" y="13" z="0" />
                                                  <BlockOrientation Forward="Down" Up="Forward" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                  <Min x="-2" y="14" z="3" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                  <Min x="-2" y="14" z="2" />
                                                  <BlockOrientation Forward="Down" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                                                  <SubtypeName>SmallBlockBeacon</SubtypeName>
                                                  <EntityId>118280046837440856</EntityId>
                                                  <Min x="-2" y="13" z="5" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Beacon</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                  <BroadcastRadius>10000</BroadcastRadius>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                  <Min x="2" y="14" z="4" />
                                                  <BlockOrientation Forward="Forward" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                  <Min x="2" y="14" z="3" />
                                                  <BlockOrientation Forward="Forward" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                  <Min x="2" y="14" z="2" />
                                                  <BlockOrientation Forward="Left" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="2" y="14" z="1" />
                                                  <BlockOrientation Forward="Backward" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                  <Min x="2" y="13" z="5" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                  <Min x="-2" y="13" z="4" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                                                  <SubtypeName>SmallProjector</SubtypeName>
                                                  <EntityId>130808334612835633</EntityId>
                                                  <Min x="2" y="13" z="4" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Vehicle Repair Projector</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                  <ProjectedGrid>
                                                    <SubtypeName />
                                                    <EntityId>135817560001606680</EntityId>
                                                    <PersistentFlags>CastShadows InScene</PersistentFlags>
                                                    <PositionAndOrientation>
                                                      <Position x="0" y="0" z="0" />
                                                      <Forward x="-0.660167933" y="0.6373788" z="-0.397399724" />
                                                      <Up x="0.7206078" y="0.3881843" z="-0.574488759" />
                                                      <Orientation>
                                                        <X>0.0250664912</X>
                                                        <Y>0.5483355</Y>
                                                        <Z>-0.55252105</Z>
                                                        <W>0.6272323</W>
                                                      </Orientation>
                                                    </PositionAndOrientation>
                                                    <GridSizeEnum>Small</GridSizeEnum>
                                                    <CubeBlocks>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                        <Min x="0" y="12" z="1" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                        <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                        <EntityId>140383752073764413</EntityId>
                                                        <Min x="-2" y="12" z="1" />
                                                        <BlockOrientation Forward="Up" Up="Left" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <TopBlockId xsi:nil="true" />
                                                        <ShareInertiaTensor>false</ShareInertiaTensor>
                                                        <SafetyDetach xsi:nil="true" />
                                                        <RotorEntityId>82543823973455496</RotorEntityId>
                                                        <WeldedEntityId xsi:nil="true" />
                                                        <SteerAngle>0</SteerAngle>
                                                        <Damping>0.75</Damping>
                                                        <Strength>0.18</Strength>
                                                        <Propulsion>true</Propulsion>
                                                        <Friction>2.4</Friction>
                                                        <Power>0.55</Power>
                                                        <Height>-0.32</Height>
                                                        <MaxSteerAngle>0.32</MaxSteerAngle>
                                                        <InvertSteer>false</InvertSteer>
                                                        <InvertPropulsion>false</InvertPropulsion>
                                                        <SpeedLimit>110</SpeedLimit>
                                                        <PowerNew>0.6</PowerNew>
                                                        <StrengthNew>0.1</StrengthNew>
                                                        <FrictionNew xsi:nil="true" />
                                                        <AirShockEnabled>true</AirShockEnabled>
                                                        <BrakingEnabled>true</BrakingEnabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                        <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                        <EntityId>93093479055323118</EntityId>
                                                        <Min x="1" y="12" z="1" />
                                                        <BlockOrientation Forward="Up" Up="Right" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <TopBlockId xsi:nil="true" />
                                                        <ShareInertiaTensor>false</ShareInertiaTensor>
                                                        <SafetyDetach xsi:nil="true" />
                                                        <RotorEntityId>131371917555256089</RotorEntityId>
                                                        <WeldedEntityId xsi:nil="true" />
                                                        <SteerAngle>0</SteerAngle>
                                                        <Damping>0.75</Damping>
                                                        <Strength>0.18</Strength>
                                                        <Propulsion>true</Propulsion>
                                                        <Friction>2.4</Friction>
                                                        <Power>0.55</Power>
                                                        <Height>-0.32</Height>
                                                        <MaxSteerAngle>0.32</MaxSteerAngle>
                                                        <InvertSteer>false</InvertSteer>
                                                        <InvertPropulsion>false</InvertPropulsion>
                                                        <SpeedLimit>110</SpeedLimit>
                                                        <PowerNew>0.6</PowerNew>
                                                        <StrengthNew>0.1</StrengthNew>
                                                        <FrictionNew xsi:nil="true" />
                                                        <AirShockEnabled>true</AirShockEnabled>
                                                        <BrakingEnabled>true</BrakingEnabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="0" y="12" z="2" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="0" y="12" z="3" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="0" y="12" z="0" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                        <Min x="-1" y="13" z="1" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                                                        <SubtypeName>SmallAirVent</SubtypeName>
                                                        <EntityId>126321980253238255</EntityId>
                                                        <Min x="0" y="13" z="0" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Air Vent</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <IsDepressurizing>true</IsDepressurizing>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                        <Min x="-1" y="14" z="2" />
                                                        <BlockOrientation Forward="Left" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                        <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                        <EntityId>129581008552532588</EntityId>
                                                        <Min x="0" y="13" z="2" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <ComponentContainer>
                                                          <Components>
                                                            <ComponentData>
                                                              <TypeId>MyInventoryBase</TypeId>
                                                              <Component xsi:type="MyObjectBuilder_Inventory">
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>0.125</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Component>
                                                            </ComponentData>
                                                          </Components>
                                                        </ComponentContainer>
                                                        <CustomName>VC SC Small Cargo Container 1</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                                                        <SubtypeName>SmallBlockConveyor</SubtypeName>
                                                        <EntityId>77753643737795023</EntityId>
                                                        <Min x="0" y="13" z="3" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                        <Min x="-1" y="13" z="2" />
                                                        <BlockOrientation Forward="Forward" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                        <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                        <EntityId>137873705031226515</EntityId>
                                                        <Min x="1" y="13" z="3" />
                                                        <BlockOrientation Forward="Left" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <ComponentContainer>
                                                          <Components>
                                                            <ComponentData>
                                                              <TypeId>MyInventoryBase</TypeId>
                                                              <Component xsi:type="MyObjectBuilder_Inventory">
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>0.125</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Component>
                                                            </ComponentData>
                                                          </Components>
                                                        </ComponentContainer>
                                                        <CustomName>VC SC Small Reactor 1</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Inventory>
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>0.125</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Inventory>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="3" y="14" z="10" />
                                                        <BlockOrientation Forward="Forward" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="1" y="14" z="1" />
                                                        <BlockOrientation Forward="Backward" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                        <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                        <EntityId>85899280282973508</EntityId>
                                                        <Min x="0" y="13" z="1" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <ComponentContainer>
                                                          <Components>
                                                            <ComponentData>
                                                              <TypeId>MyInventoryBase</TypeId>
                                                              <Component xsi:type="MyObjectBuilder_Inventory">
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>0.125</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Component>
                                                            </ComponentData>
                                                          </Components>
                                                        </ComponentContainer>
                                                        <CustomName>VC SC Small Cargo Container 2</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                        <SubtypeName>SmallTextPanel</SubtypeName>
                                                        <EntityId>109962518322574767</EntityId>
                                                        <Min x="1" y="14" z="3" />
                                                        <BlockOrientation Forward="Right" Up="Up" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Description />
                                                        <Title>Title</Title>
                                                        <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                        <ChangeInterval>0</ChangeInterval>
                                                        <SelectedImages />
                                                        <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                        <FontSize>1.6</FontSize>
                                                        <PublicDescription>Location: {X:532 Y:205 Z:156}

No damaged blocks found.
</PublicDescription>
                                                        <PublicTitle>POS;Echo;Damage</PublicTitle>
                                                        <ShowText>PUBLIC</ShowText>
                                                        <FontColor>
                                                          <PackedValue>4281501695</PackedValue>
                                                          <X>255</X>
                                                          <Y>135</Y>
                                                          <Z>50</Z>
                                                          <R>255</R>
                                                          <G>135</G>
                                                          <B>50</B>
                                                          <A>255</A>
                                                        </FontColor>
                                                        <BackgroundColor>
                                                          <PackedValue>4278190080</PackedValue>
                                                          <X>0</X>
                                                          <Y>0</Y>
                                                          <Z>0</Z>
                                                          <R>0</R>
                                                          <G>0</G>
                                                          <B>0</B>
                                                          <A>255</A>
                                                        </BackgroundColor>
                                                        <CurrentShownTexture>0</CurrentShownTexture>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                                                        <SubtypeName>SmallBlockCockpit</SubtypeName>
                                                        <EntityId>97927720839643390</EntityId>
                                                        <Min x="-1" y="13" z="4" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <ComponentContainer>
                                                          <Components>
                                                            <ComponentData>
                                                              <TypeId>MyInventoryBase</TypeId>
                                                              <Component xsi:type="MyObjectBuilder_Inventory">
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>1</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Component>
                                                            </ComponentData>
                                                          </Components>
                                                        </ComponentContainer>
                                                        <CustomName>VC SC Cockpit</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <UseSingleWeaponMode>false</UseSingleWeaponMode>
                                                        <Toolbar>
                                                          <ToolbarType>Character</ToolbarType>
                                                          <SelectedSlot xsi:nil="true" />
                                                          <Slots>
                                                            <Slot>
                                                              <Index>0</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                <Action>OnOff</Action>
                                                                <GridEntityId>0</GridEntityId>
                                                                <BlockEntityId>97927720839643390</BlockEntityId>
                                                                <GroupName>VC SC Lights</GroupName>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>1</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                <Action>OnOff</Action>
                                                                <GridEntityId>0</GridEntityId>
                                                                <BlockEntityId>97927720839643390</BlockEntityId>
                                                                <GroupName>VC SC Artificial Mass</GroupName>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>2</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                <Action>IncreaseHeight</Action>
                                                                <GridEntityId>0</GridEntityId>
                                                                <BlockEntityId>97927720839643390</BlockEntityId>
                                                                <GroupName>VC SC Wheels</GroupName>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>3</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                <Action>DecreaseHeight</Action>
                                                                <GridEntityId>0</GridEntityId>
                                                                <BlockEntityId>97927720839643390</BlockEntityId>
                                                                <GroupName>VC SC Wheels</GroupName>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>4</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                <Action>OnOff</Action>
                                                                <GridEntityId>0</GridEntityId>
                                                                <BlockEntityId>97927720839643390</BlockEntityId>
                                                                <GroupName>VC SC Thrusters</GroupName>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>5</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>View</Action>
                                                                <BlockEntityId>81701996106928222</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>6</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>Stockpile</Action>
                                                                <BlockEntityId>136538053066660401</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>7</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                <Action>OnOff</Action>
                                                                <GridEntityId>0</GridEntityId>
                                                                <BlockEntityId>97927720839643390</BlockEntityId>
                                                                <GroupName>VC SC Reactors</GroupName>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>8</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>OnOff</Action>
                                                                <BlockEntityId>84767961628989080</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>9</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>OnOff</Action>
                                                                <BlockEntityId>76739881056699725</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>10</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>IncreaseRadius</Action>
                                                                <BlockEntityId>76739881056699725</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>11</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>DecreaseRadius</Action>
                                                                <BlockEntityId>76739881056699725</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>12</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>OnOff</Action>
                                                                <BlockEntityId>116207139669215257</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>13</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>IncreaseRadius</Action>
                                                                <BlockEntityId>116207139669215257</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>14</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>DecreaseRadius</Action>
                                                                <BlockEntityId>116207139669215257</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>15</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>Depressurize</Action>
                                                                <BlockEntityId>126321980253238255</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>16</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>OnOff</Action>
                                                                <BlockEntityId>126321980253238255</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>18</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>OnOff</Action>
                                                                <BlockEntityId>79303713771659346</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>19</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>IncreasePower</Action>
                                                                <BlockEntityId>79303713771659346</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>20</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>DecreasePower</Action>
                                                                <BlockEntityId>79303713771659346</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                          </Slots>
                                                        </Toolbar>
                                                        <SelectedGunId xsi:nil="true" />
                                                        <BuildToolbar>
                                                          <ToolbarType>Character</ToolbarType>
                                                          <SelectedSlot xsi:nil="true" />
                                                          <Slots />
                                                        </BuildToolbar>
                                                        <PilotRelativeWorld>
                                                          <Position x="-4.1856274604797363" y="-1.5793498754501343" z="0.39729803800582886" />
                                                          <Forward x="0.997846663" y="0.0574373156" z="-0.0316705741" />
                                                          <Up x="-0.0573324971" y="0.998346269" z="0.004208574" />
                                                          <Orientation>
                                                            <X>0.0214655865</X>
                                                            <Y>-0.6954883</Y>
                                                            <Z>0.0191335864</Z>
                                                            <W>0.717961848</W>
                                                          </Orientation>
                                                        </PilotRelativeWorld>
                                                        <PilotGunDefinition xsi:nil="true" />
                                                        <IsInFirstPersonView>false</IsInFirstPersonView>
                                                        <OxygenLevel>1</OxygenLevel>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                        <SubtypeName>SmallTextPanel</SubtypeName>
                                                        <EntityId>121397825739074971</EntityId>
                                                        <Min x="-1" y="14" z="3" />
                                                        <BlockOrientation Forward="Left" Up="Up" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Description />
                                                        <Title>Title</Title>
                                                        <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                        <ChangeInterval>0</ChangeInterval>
                                                        <SelectedImages />
                                                        <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                        <FontSize>1.6</FontSize>
                                                        <PublicDescription>Speed:                  0.0 m/s 

Power:      15 kW / 1.5 MW
[''''''''''''''''''''''''''''''''''''''']     1.0%




Oxygen Tanks    100.00%
[||||||||||||||||||||||||||||||||||||||||||||||||||||||||]
</PublicDescription>
                                                        <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                                                        <ShowText>PUBLIC</ShowText>
                                                        <FontColor>
                                                          <PackedValue>4281501695</PackedValue>
                                                          <X>255</X>
                                                          <Y>135</Y>
                                                          <Z>50</Z>
                                                          <R>255</R>
                                                          <G>135</G>
                                                          <B>50</B>
                                                          <A>255</A>
                                                        </FontColor>
                                                        <BackgroundColor>
                                                          <PackedValue>4278190080</PackedValue>
                                                          <X>0</X>
                                                          <Y>0</Y>
                                                          <Z>0</Z>
                                                          <R>0</R>
                                                          <G>0</G>
                                                          <B>0</B>
                                                          <A>255</A>
                                                        </BackgroundColor>
                                                        <CurrentShownTexture>0</CurrentShownTexture>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="-1" y="13" z="0" />
                                                        <BlockOrientation Forward="Down" Up="Forward" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="-1" y="12" z="0" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="-2" y="14" z="1" />
                                                        <BlockOrientation Forward="Backward" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                        <Min x="1" y="14" z="2" />
                                                        <BlockOrientation Forward="Down" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                        <Min x="-2" y="14" z="4" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="-1" y="14" z="1" />
                                                        <BlockOrientation Forward="Backward" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="1" y="13" z="0" />
                                                        <BlockOrientation Forward="Down" Up="Forward" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                        <Min x="-2" y="14" z="3" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                        <Min x="-2" y="14" z="2" />
                                                        <BlockOrientation Forward="Down" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                                                        <SubtypeName>SmallBlockBeacon</SubtypeName>
                                                        <EntityId>116207139669215257</EntityId>
                                                        <Min x="-2" y="13" z="5" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Beacon</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                        <BroadcastRadius>10000</BroadcastRadius>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                        <Min x="2" y="14" z="4" />
                                                        <BlockOrientation Forward="Forward" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                        <Min x="2" y="14" z="3" />
                                                        <BlockOrientation Forward="Forward" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                        <Min x="2" y="14" z="2" />
                                                        <BlockOrientation Forward="Left" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="2" y="14" z="1" />
                                                        <BlockOrientation Forward="Backward" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                        <Min x="2" y="13" z="5" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                        <Min x="-2" y="13" z="4" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                                                        <SubtypeName>SmallProjector</SubtypeName>
                                                        <EntityId>84767961628989080</EntityId>
                                                        <Min x="2" y="13" z="4" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Vehicle Repair Projector</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                        <ProjectedGrid>
                                                          <SubtypeName />
                                                          <EntityId>78035389701061539</EntityId>
                                                          <PersistentFlags>CastShadows InScene</PersistentFlags>
                                                          <PositionAndOrientation>
                                                            <Position x="0" y="0" z="0" />
                                                            <Forward x="0.5997866" y="-0.661617339" z="0.45002073" />
                                                            <Up x="0.6568089" y="0.0858671" z="-0.7491521" />
                                                            <Orientation>
                                                              <X>-0.6747525</X>
                                                              <Y>-0.519345164</Y>
                                                              <Z>0.04213711</Z>
                                                              <W>0.5226989</W>
                                                            </Orientation>
                                                          </PositionAndOrientation>
                                                          <GridSizeEnum>Small</GridSizeEnum>
                                                          <CubeBlocks>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                              <Min x="0" y="12" z="1" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                              <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                              <EntityId>133636548505501578</EntityId>
                                                              <Min x="-2" y="12" z="1" />
                                                              <BlockOrientation Forward="Up" Up="Left" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <TopBlockId xsi:nil="true" />
                                                              <ShareInertiaTensor>false</ShareInertiaTensor>
                                                              <SafetyDetach xsi:nil="true" />
                                                              <RotorEntityId>115814232879975994</RotorEntityId>
                                                              <WeldedEntityId xsi:nil="true" />
                                                              <SteerAngle>0</SteerAngle>
                                                              <Damping>0.012</Damping>
                                                              <Strength>0.502000034</Strength>
                                                              <Propulsion>true</Propulsion>
                                                              <Friction>1.6</Friction>
                                                              <Power>0.7</Power>
                                                              <Height>-0.0880000442</Height>
                                                              <MaxSteerAngle>0.32</MaxSteerAngle>
                                                              <InvertSteer>false</InvertSteer>
                                                              <InvertPropulsion>false</InvertPropulsion>
                                                              <SpeedLimit>360</SpeedLimit>
                                                              <PowerNew>0.6</PowerNew>
                                                              <StrengthNew>0.1</StrengthNew>
                                                              <FrictionNew xsi:nil="true" />
                                                              <AirShockEnabled>true</AirShockEnabled>
                                                              <BrakingEnabled>true</BrakingEnabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                              <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                              <EntityId>121079267722957419</EntityId>
                                                              <Min x="1" y="12" z="1" />
                                                              <BlockOrientation Forward="Up" Up="Right" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <TopBlockId xsi:nil="true" />
                                                              <ShareInertiaTensor>false</ShareInertiaTensor>
                                                              <SafetyDetach xsi:nil="true" />
                                                              <RotorEntityId>118668981304042073</RotorEntityId>
                                                              <WeldedEntityId xsi:nil="true" />
                                                              <SteerAngle>0</SteerAngle>
                                                              <Damping>0.012</Damping>
                                                              <Strength>0.502000034</Strength>
                                                              <Propulsion>true</Propulsion>
                                                              <Friction>1.6</Friction>
                                                              <Power>0.7</Power>
                                                              <Height>-0.0880000442</Height>
                                                              <MaxSteerAngle>0.32</MaxSteerAngle>
                                                              <InvertSteer>false</InvertSteer>
                                                              <InvertPropulsion>false</InvertPropulsion>
                                                              <SpeedLimit>360</SpeedLimit>
                                                              <PowerNew>0.6</PowerNew>
                                                              <StrengthNew>0.1</StrengthNew>
                                                              <FrictionNew xsi:nil="true" />
                                                              <AirShockEnabled>true</AirShockEnabled>
                                                              <BrakingEnabled>true</BrakingEnabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="0" y="12" z="2" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="0" y="12" z="3" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="0" y="12" z="0" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                              <Min x="-1" y="13" z="1" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                                                              <SubtypeName>SmallAirVent</SubtypeName>
                                                              <EntityId>85425530734521227</EntityId>
                                                              <Min x="0" y="13" z="0" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Air Vent</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <IsDepressurizing>true</IsDepressurizing>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                              <Min x="-1" y="14" z="2" />
                                                              <BlockOrientation Forward="Left" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                              <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                              <EntityId>128156377535082706</EntityId>
                                                              <Min x="0" y="13" z="2" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <ComponentContainer>
                                                                <Components>
                                                                  <ComponentData>
                                                                    <TypeId>MyInventoryBase</TypeId>
                                                                    <Component xsi:type="MyObjectBuilder_Inventory">
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>0.125</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Component>
                                                                  </ComponentData>
                                                                </Components>
                                                              </ComponentContainer>
                                                              <CustomName>VC SC Small Cargo Container 1</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                                                              <SubtypeName>SmallBlockConveyor</SubtypeName>
                                                              <EntityId>115756520613313503</EntityId>
                                                              <Min x="0" y="13" z="3" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                              <Min x="-1" y="13" z="2" />
                                                              <BlockOrientation Forward="Forward" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                              <EntityId>139205080938307153</EntityId>
                                                              <Min x="1" y="13" z="3" />
                                                              <BlockOrientation Forward="Left" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <ComponentContainer>
                                                                <Components>
                                                                  <ComponentData>
                                                                    <TypeId>MyInventoryBase</TypeId>
                                                                    <Component xsi:type="MyObjectBuilder_Inventory">
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>0.125</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Component>
                                                                  </ComponentData>
                                                                </Components>
                                                              </ComponentContainer>
                                                              <CustomName>VC SC Small Reactor 1</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <Inventory>
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>0.125</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Inventory>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                              <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                              <EntityId>107326930291173673</EntityId>
                                                              <Min x="2" y="14" z="10" />
                                                              <BlockOrientation Forward="Backward" Up="Up" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Tail Light 2</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>false</Enabled>
                                                              <Radius>1</Radius>
                                                              <ReflectorRadius>20</ReflectorRadius>
                                                              <ColorGreen>0.654902</ColorGreen>
                                                              <ColorBlue>0.4117647</ColorBlue>
                                                              <Falloff>1</Falloff>
                                                              <Intensity>3</Intensity>
                                                              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                              <BlinkLenght>10</BlinkLenght>
                                                              <BlinkOffset>0</BlinkOffset>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="1" y="14" z="1" />
                                                              <BlockOrientation Forward="Backward" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                              <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                              <EntityId>91144540404282723</EntityId>
                                                              <Min x="0" y="13" z="1" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <ComponentContainer>
                                                                <Components>
                                                                  <ComponentData>
                                                                    <TypeId>MyInventoryBase</TypeId>
                                                                    <Component xsi:type="MyObjectBuilder_Inventory">
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>0.125</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Component>
                                                                  </ComponentData>
                                                                </Components>
                                                              </ComponentContainer>
                                                              <CustomName>VC SC Small Cargo Container 2</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                              <SubtypeName>SmallTextPanel</SubtypeName>
                                                              <EntityId>82033464453123418</EntityId>
                                                              <Min x="1" y="14" z="3" />
                                                              <BlockOrientation Forward="Right" Up="Up" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <Description />
                                                              <Title>Title</Title>
                                                              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                              <ChangeInterval>0</ChangeInterval>
                                                              <SelectedImages />
                                                              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                              <FontSize>1.6</FontSize>
                                                              <PublicDescription>Location: {X:698 Y:232 Z:119}

No damaged blocks found.
</PublicDescription>
                                                              <PublicTitle>POS;Echo;Damage</PublicTitle>
                                                              <ShowText>PUBLIC</ShowText>
                                                              <FontColor>
                                                                <PackedValue>4281501695</PackedValue>
                                                                <X>255</X>
                                                                <Y>135</Y>
                                                                <Z>50</Z>
                                                                <R>255</R>
                                                                <G>135</G>
                                                                <B>50</B>
                                                                <A>255</A>
                                                              </FontColor>
                                                              <BackgroundColor>
                                                                <PackedValue>4278190080</PackedValue>
                                                                <X>0</X>
                                                                <Y>0</Y>
                                                                <Z>0</Z>
                                                                <R>0</R>
                                                                <G>0</G>
                                                                <B>0</B>
                                                                <A>255</A>
                                                              </BackgroundColor>
                                                              <CurrentShownTexture>0</CurrentShownTexture>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                                                              <SubtypeName>SmallBlockCockpit</SubtypeName>
                                                              <EntityId>111629280386861968</EntityId>
                                                              <Min x="-1" y="13" z="4" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <ComponentContainer>
                                                                <Components>
                                                                  <ComponentData>
                                                                    <TypeId>MyInventoryBase</TypeId>
                                                                    <Component xsi:type="MyObjectBuilder_Inventory">
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>1</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Component>
                                                                  </ComponentData>
                                                                </Components>
                                                              </ComponentContainer>
                                                              <CustomName>VC SC Cockpit</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <UseSingleWeaponMode>false</UseSingleWeaponMode>
                                                              <Toolbar>
                                                                <ToolbarType>Character</ToolbarType>
                                                                <SelectedSlot xsi:nil="true" />
                                                                <Slots>
                                                                  <Slot>
                                                                    <Index>0</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                      <Action>OnOff</Action>
                                                                      <GridEntityId>0</GridEntityId>
                                                                      <BlockEntityId>111629280386861968</BlockEntityId>
                                                                      <GroupName>VC SC Lights</GroupName>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>1</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                      <Action>OnOff</Action>
                                                                      <GridEntityId>0</GridEntityId>
                                                                      <BlockEntityId>111629280386861968</BlockEntityId>
                                                                      <GroupName>VC SC Artificial Mass</GroupName>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>2</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                      <Action>IncreaseHeight</Action>
                                                                      <GridEntityId>0</GridEntityId>
                                                                      <BlockEntityId>111629280386861968</BlockEntityId>
                                                                      <GroupName>VC SC Wheels</GroupName>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>3</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                      <Action>DecreaseHeight</Action>
                                                                      <GridEntityId>0</GridEntityId>
                                                                      <BlockEntityId>111629280386861968</BlockEntityId>
                                                                      <GroupName>VC SC Wheels</GroupName>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>4</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                      <Action>OnOff</Action>
                                                                      <GridEntityId>0</GridEntityId>
                                                                      <BlockEntityId>111629280386861968</BlockEntityId>
                                                                      <GroupName>Thrusters</GroupName>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>5</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>View</Action>
                                                                      <BlockEntityId>137506534290951170</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>6</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>Stockpile</Action>
                                                                      <BlockEntityId>137527169899277054</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>7</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                      <Action>OnOff</Action>
                                                                      <GridEntityId>0</GridEntityId>
                                                                      <BlockEntityId>111629280386861968</BlockEntityId>
                                                                      <GroupName>VC SC Reactors</GroupName>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>8</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>OnOff</Action>
                                                                      <BlockEntityId>117263061034546586</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>9</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>OnOff</Action>
                                                                      <BlockEntityId>121397424478587525</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>10</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>IncreaseRadius</Action>
                                                                      <BlockEntityId>121397424478587525</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>11</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>DecreaseRadius</Action>
                                                                      <BlockEntityId>121397424478587525</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>12</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>OnOff</Action>
                                                                      <BlockEntityId>114103032198774760</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>13</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>IncreaseRadius</Action>
                                                                      <BlockEntityId>114103032198774760</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>14</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>DecreaseRadius</Action>
                                                                      <BlockEntityId>114103032198774760</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>15</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>Depressurize</Action>
                                                                      <BlockEntityId>85425530734521227</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>16</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>OnOff</Action>
                                                                      <BlockEntityId>85425530734521227</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                </Slots>
                                                              </Toolbar>
                                                              <SelectedGunId xsi:nil="true" />
                                                              <BuildToolbar>
                                                                <ToolbarType>Character</ToolbarType>
                                                                <SelectedSlot xsi:nil="true" />
                                                                <Slots />
                                                              </BuildToolbar>
                                                              <PilotRelativeWorld>
                                                                <Position x="-1.0117495059967041" y="0.35646867752075195" z="-5.0666818618774414" />
                                                                <Forward x="0.1769632" y="-0.269953579" z="0.9464719" />
                                                                <Up x="0.149740815" y="0.957838953" z="0.245198444" />
                                                                <Orientation>
                                                                  <X>0.06299433</X>
                                                                  <Y>0.984513938</Y>
                                                                  <Z>0.130813792</Z>
                                                                  <W>-0.0982435346</W>
                                                                </Orientation>
                                                              </PilotRelativeWorld>
                                                              <PilotGunDefinition xsi:nil="true" />
                                                              <IsInFirstPersonView>true</IsInFirstPersonView>
                                                              <OxygenLevel>1</OxygenLevel>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                              <SubtypeName>SmallTextPanel</SubtypeName>
                                                              <EntityId>76745505028561509</EntityId>
                                                              <Min x="-1" y="14" z="3" />
                                                              <BlockOrientation Forward="Left" Up="Up" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <Description />
                                                              <Title>Title</Title>
                                                              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                              <ChangeInterval>0</ChangeInterval>
                                                              <SelectedImages />
                                                              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                              <FontSize>1.6</FontSize>
                                                              <PublicDescription>Speed:                  0.0 m/s 

Power:         117 kW / 1 MW
[||||''''''''''''''''''''''''''''''''''']    11.7%




Oxygen Tanks        0.59%
['''''''''''''''''''''''''''''''''''''''''''''''''''''''']
</PublicDescription>
                                                              <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                                                              <ShowText>PUBLIC</ShowText>
                                                              <FontColor>
                                                                <PackedValue>4281501695</PackedValue>
                                                                <X>255</X>
                                                                <Y>135</Y>
                                                                <Z>50</Z>
                                                                <R>255</R>
                                                                <G>135</G>
                                                                <B>50</B>
                                                                <A>255</A>
                                                              </FontColor>
                                                              <BackgroundColor>
                                                                <PackedValue>4278190080</PackedValue>
                                                                <X>0</X>
                                                                <Y>0</Y>
                                                                <Z>0</Z>
                                                                <R>0</R>
                                                                <G>0</G>
                                                                <B>0</B>
                                                                <A>255</A>
                                                              </BackgroundColor>
                                                              <CurrentShownTexture>0</CurrentShownTexture>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="1" y="13" z="0" />
                                                              <BlockOrientation Forward="Down" Up="Forward" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="-1" y="12" z="0" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="-2" y="14" z="1" />
                                                              <BlockOrientation Forward="Backward" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                              <Min x="1" y="14" z="2" />
                                                              <BlockOrientation Forward="Down" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                              <Min x="-2" y="14" z="4" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="-1" y="14" z="1" />
                                                              <BlockOrientation Forward="Backward" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="-1" y="13" z="0" />
                                                              <BlockOrientation Forward="Down" Up="Forward" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                              <Min x="-2" y="14" z="3" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                              <Min x="-2" y="14" z="2" />
                                                              <BlockOrientation Forward="Down" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                              <Min x="-2" y="13" z="5" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                              <Min x="2" y="14" z="4" />
                                                              <BlockOrientation Forward="Forward" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                              <Min x="2" y="14" z="3" />
                                                              <BlockOrientation Forward="Forward" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                              <Min x="2" y="14" z="2" />
                                                              <BlockOrientation Forward="Left" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="2" y="14" z="1" />
                                                              <BlockOrientation Forward="Backward" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                              <Min x="2" y="13" z="5" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                              <Min x="-2" y="13" z="4" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                                                              <SubtypeName>SmallProjector</SubtypeName>
                                                              <EntityId>117263061034546586</EntityId>
                                                              <Min x="2" y="13" z="4" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Vehicle Repair Projector</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>false</Enabled>
                                                              <ProjectedGrid>
                                                                <SubtypeName />
                                                                <EntityId>81788650045078499</EntityId>
                                                                <PersistentFlags>CastShadows InScene</PersistentFlags>
                                                                <PositionAndOrientation>
                                                                  <Position x="0" y="0" z="0" />
                                                                  <Forward x="0.5997865" y="-0.661617339" z="0.4500206" />
                                                                  <Up x="0.656808853" y="0.0858671" z="-0.7491521" />
                                                                  <Orientation>
                                                                    <X>-0.6747525</X>
                                                                    <Y>-0.5193452</Y>
                                                                    <Z>0.04213711</Z>
                                                                    <W>0.5226989</W>
                                                                  </Orientation>
                                                                </PositionAndOrientation>
                                                                <GridSizeEnum>Small</GridSizeEnum>
                                                                <CubeBlocks>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                                    <Min x="0" y="12" z="1" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                                    <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                                    <EntityId>90755699455163499</EntityId>
                                                                    <Min x="-2" y="12" z="1" />
                                                                    <BlockOrientation Forward="Up" Up="Left" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <TopBlockId xsi:nil="true" />
                                                                    <ShareInertiaTensor>false</ShareInertiaTensor>
                                                                    <SafetyDetach xsi:nil="true" />
                                                                    <RotorEntityId>100901733199512315</RotorEntityId>
                                                                    <WeldedEntityId xsi:nil="true" />
                                                                    <SteerAngle>0</SteerAngle>
                                                                    <Damping>0.012</Damping>
                                                                    <Strength>0.502000034</Strength>
                                                                    <Propulsion>true</Propulsion>
                                                                    <Friction>1.6</Friction>
                                                                    <Power>0.7</Power>
                                                                    <Height>-0.0880000442</Height>
                                                                    <MaxSteerAngle>0.32</MaxSteerAngle>
                                                                    <InvertSteer>false</InvertSteer>
                                                                    <InvertPropulsion>false</InvertPropulsion>
                                                                    <SpeedLimit>360</SpeedLimit>
                                                                    <PowerNew>0.6</PowerNew>
                                                                    <StrengthNew>0.1</StrengthNew>
                                                                    <FrictionNew xsi:nil="true" />
                                                                    <AirShockEnabled>true</AirShockEnabled>
                                                                    <BrakingEnabled>true</BrakingEnabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                                    <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                                    <EntityId>78331700644767904</EntityId>
                                                                    <Min x="1" y="12" z="1" />
                                                                    <BlockOrientation Forward="Up" Up="Right" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <TopBlockId xsi:nil="true" />
                                                                    <ShareInertiaTensor>false</ShareInertiaTensor>
                                                                    <SafetyDetach xsi:nil="true" />
                                                                    <RotorEntityId>104893073554127226</RotorEntityId>
                                                                    <WeldedEntityId xsi:nil="true" />
                                                                    <SteerAngle>0</SteerAngle>
                                                                    <Damping>0.012</Damping>
                                                                    <Strength>0.502000034</Strength>
                                                                    <Propulsion>true</Propulsion>
                                                                    <Friction>1.6</Friction>
                                                                    <Power>0.7</Power>
                                                                    <Height>-0.0880000442</Height>
                                                                    <MaxSteerAngle>0.32</MaxSteerAngle>
                                                                    <InvertSteer>false</InvertSteer>
                                                                    <InvertPropulsion>false</InvertPropulsion>
                                                                    <SpeedLimit>360</SpeedLimit>
                                                                    <PowerNew>0.6</PowerNew>
                                                                    <StrengthNew>0.1</StrengthNew>
                                                                    <FrictionNew xsi:nil="true" />
                                                                    <AirShockEnabled>true</AirShockEnabled>
                                                                    <BrakingEnabled>true</BrakingEnabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="0" y="12" z="2" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="0" y="12" z="3" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="0" y="12" z="0" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                                    <Min x="-1" y="13" z="1" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                                                                    <SubtypeName>SmallAirVent</SubtypeName>
                                                                    <EntityId>72524899868121244</EntityId>
                                                                    <Min x="0" y="13" z="0" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Air Vent</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <IsDepressurizing>true</IsDepressurizing>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                                    <Min x="-1" y="14" z="2" />
                                                                    <BlockOrientation Forward="Left" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                                    <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                                    <EntityId>99522374954295704</EntityId>
                                                                    <Min x="0" y="13" z="2" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <ComponentContainer>
                                                                      <Components>
                                                                        <ComponentData>
                                                                          <TypeId>MyInventoryBase</TypeId>
                                                                          <Component xsi:type="MyObjectBuilder_Inventory">
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>0.125</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Component>
                                                                        </ComponentData>
                                                                      </Components>
                                                                    </ComponentContainer>
                                                                    <CustomName>VC SC Small Cargo Container 1</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                                                                    <SubtypeName>SmallBlockConveyor</SubtypeName>
                                                                    <EntityId>82432572611059221</EntityId>
                                                                    <Min x="0" y="13" z="3" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                                    <Min x="-1" y="13" z="2" />
                                                                    <BlockOrientation Forward="Forward" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                                    <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                                    <EntityId>72741310325423846</EntityId>
                                                                    <Min x="1" y="13" z="3" />
                                                                    <BlockOrientation Forward="Left" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <ComponentContainer>
                                                                      <Components>
                                                                        <ComponentData>
                                                                          <TypeId>MyInventoryBase</TypeId>
                                                                          <Component xsi:type="MyObjectBuilder_Inventory">
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>0.125</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Component>
                                                                        </ComponentData>
                                                                      </Components>
                                                                    </ComponentContainer>
                                                                    <CustomName>VC SC Small Reactor 1</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <Inventory>
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>0.125</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Inventory>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                                    <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                                    <EntityId>87336918716530318</EntityId>
                                                                    <Min x="2" y="14" z="10" />
                                                                    <BlockOrientation Forward="Backward" Up="Up" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Tail Light 2</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>false</Enabled>
                                                                    <Radius>1</Radius>
                                                                    <ReflectorRadius>20</ReflectorRadius>
                                                                    <ColorGreen>0.654902</ColorGreen>
                                                                    <ColorBlue>0.4117647</ColorBlue>
                                                                    <Falloff>1</Falloff>
                                                                    <Intensity>3</Intensity>
                                                                    <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                                    <BlinkLenght>10</BlinkLenght>
                                                                    <BlinkOffset>0</BlinkOffset>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="1" y="14" z="1" />
                                                                    <BlockOrientation Forward="Backward" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                                    <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                                    <EntityId>129328889715400038</EntityId>
                                                                    <Min x="0" y="13" z="1" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <ComponentContainer>
                                                                      <Components>
                                                                        <ComponentData>
                                                                          <TypeId>MyInventoryBase</TypeId>
                                                                          <Component xsi:type="MyObjectBuilder_Inventory">
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>0.125</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Component>
                                                                        </ComponentData>
                                                                      </Components>
                                                                    </ComponentContainer>
                                                                    <CustomName>VC SC Small Cargo Container 2</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                                    <SubtypeName>SmallTextPanel</SubtypeName>
                                                                    <EntityId>97253174976392535</EntityId>
                                                                    <Min x="1" y="14" z="3" />
                                                                    <BlockOrientation Forward="Right" Up="Up" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <Description />
                                                                    <Title>Title</Title>
                                                                    <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                                    <ChangeInterval>0</ChangeInterval>
                                                                    <SelectedImages />
                                                                    <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                                    <FontSize>1.6</FontSize>
                                                                    <PublicDescription>Location: {X:698 Y:232 Z:119}

No damaged blocks found.
</PublicDescription>
                                                                    <PublicTitle>POS;Echo;Damage</PublicTitle>
                                                                    <ShowText>PUBLIC</ShowText>
                                                                    <FontColor>
                                                                      <PackedValue>4281501695</PackedValue>
                                                                      <X>255</X>
                                                                      <Y>135</Y>
                                                                      <Z>50</Z>
                                                                      <R>255</R>
                                                                      <G>135</G>
                                                                      <B>50</B>
                                                                      <A>255</A>
                                                                    </FontColor>
                                                                    <BackgroundColor>
                                                                      <PackedValue>4278190080</PackedValue>
                                                                      <X>0</X>
                                                                      <Y>0</Y>
                                                                      <Z>0</Z>
                                                                      <R>0</R>
                                                                      <G>0</G>
                                                                      <B>0</B>
                                                                      <A>255</A>
                                                                    </BackgroundColor>
                                                                    <CurrentShownTexture>0</CurrentShownTexture>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                                                                    <SubtypeName>SmallBlockCockpit</SubtypeName>
                                                                    <EntityId>81600493896852083</EntityId>
                                                                    <Min x="-1" y="13" z="4" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <ComponentContainer>
                                                                      <Components>
                                                                        <ComponentData>
                                                                          <TypeId>MyInventoryBase</TypeId>
                                                                          <Component xsi:type="MyObjectBuilder_Inventory">
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>1</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Component>
                                                                        </ComponentData>
                                                                      </Components>
                                                                    </ComponentContainer>
                                                                    <CustomName>VC SC Cockpit</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <UseSingleWeaponMode>false</UseSingleWeaponMode>
                                                                    <Toolbar>
                                                                      <ToolbarType>Character</ToolbarType>
                                                                      <SelectedSlot xsi:nil="true" />
                                                                      <Slots>
                                                                        <Slot>
                                                                          <Index>0</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                            <Action>OnOff</Action>
                                                                            <GridEntityId>0</GridEntityId>
                                                                            <BlockEntityId>81600493896852083</BlockEntityId>
                                                                            <GroupName>VC SC Lights</GroupName>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>1</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                            <Action>OnOff</Action>
                                                                            <GridEntityId>0</GridEntityId>
                                                                            <BlockEntityId>81600493896852083</BlockEntityId>
                                                                            <GroupName>VC SC Artificial Mass</GroupName>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>2</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                            <Action>IncreaseHeight</Action>
                                                                            <GridEntityId>0</GridEntityId>
                                                                            <BlockEntityId>81600493896852083</BlockEntityId>
                                                                            <GroupName>VC SC Wheels</GroupName>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>3</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                            <Action>DecreaseHeight</Action>
                                                                            <GridEntityId>0</GridEntityId>
                                                                            <BlockEntityId>81600493896852083</BlockEntityId>
                                                                            <GroupName>VC SC Wheels</GroupName>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>4</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                            <Action>OnOff</Action>
                                                                            <GridEntityId>0</GridEntityId>
                                                                            <BlockEntityId>81600493896852083</BlockEntityId>
                                                                            <GroupName>Thrusters</GroupName>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>5</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>View</Action>
                                                                            <BlockEntityId>140563434068444831</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>6</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>Stockpile</Action>
                                                                            <BlockEntityId>85710420501491751</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>7</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                            <Action>OnOff</Action>
                                                                            <GridEntityId>0</GridEntityId>
                                                                            <BlockEntityId>81600493896852083</BlockEntityId>
                                                                            <GroupName>VC SC Reactors</GroupName>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>8</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>OnOff</Action>
                                                                            <BlockEntityId>78160633744493235</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>9</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>OnOff</Action>
                                                                            <BlockEntityId>126013999359402213</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>10</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>IncreaseRadius</Action>
                                                                            <BlockEntityId>126013999359402213</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>11</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>DecreaseRadius</Action>
                                                                            <BlockEntityId>126013999359402213</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>12</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>OnOff</Action>
                                                                            <BlockEntityId>86966322801640572</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>13</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>IncreaseRadius</Action>
                                                                            <BlockEntityId>86966322801640572</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>14</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>DecreaseRadius</Action>
                                                                            <BlockEntityId>86966322801640572</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>15</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>Depressurize</Action>
                                                                            <BlockEntityId>72524899868121244</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>16</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>OnOff</Action>
                                                                            <BlockEntityId>72524899868121244</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                      </Slots>
                                                                    </Toolbar>
                                                                    <SelectedGunId xsi:nil="true" />
                                                                    <BuildToolbar>
                                                                      <ToolbarType>Character</ToolbarType>
                                                                      <SelectedSlot xsi:nil="true" />
                                                                      <Slots />
                                                                    </BuildToolbar>
                                                                    <PilotRelativeWorld>
                                                                      <Position x="-0.042326528578996658" y="0.091679513454437256" z="-4.3733525276184082" />
                                                                      <Forward x="0.06952436" y="-0.2672294" z="0.9611217" />
                                                                      <Up x="-0.0481960624" y="0.9614281" z="0.270800978" />
                                                                      <Orientation>
                                                                        <X>-0.0286278669</X>
                                                                        <Y>0.9898188</Y>
                                                                        <Z>0.135891125</Z>
                                                                        <W>-0.0311894529</W>
                                                                      </Orientation>
                                                                    </PilotRelativeWorld>
                                                                    <PilotGunDefinition xsi:nil="true" />
                                                                    <IsInFirstPersonView>true</IsInFirstPersonView>
                                                                    <OxygenLevel>1</OxygenLevel>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                                    <SubtypeName>SmallTextPanel</SubtypeName>
                                                                    <EntityId>113709262620652090</EntityId>
                                                                    <Min x="-1" y="14" z="3" />
                                                                    <BlockOrientation Forward="Left" Up="Up" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <Description />
                                                                    <Title>Title</Title>
                                                                    <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                                    <ChangeInterval>0</ChangeInterval>
                                                                    <SelectedImages />
                                                                    <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                                    <FontSize>1.6</FontSize>
                                                                    <PublicDescription>Speed:                  0.0 m/s 

Power:         117 kW / 1 MW
[||||''''''''''''''''''''''''''''''''''']    11.7%




Oxygen Tanks        0.59%
['''''''''''''''''''''''''''''''''''''''''''''''''''''''']
</PublicDescription>
                                                                    <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                                                                    <ShowText>PUBLIC</ShowText>
                                                                    <FontColor>
                                                                      <PackedValue>4281501695</PackedValue>
                                                                      <X>255</X>
                                                                      <Y>135</Y>
                                                                      <Z>50</Z>
                                                                      <R>255</R>
                                                                      <G>135</G>
                                                                      <B>50</B>
                                                                      <A>255</A>
                                                                    </FontColor>
                                                                    <BackgroundColor>
                                                                      <PackedValue>4278190080</PackedValue>
                                                                      <X>0</X>
                                                                      <Y>0</Y>
                                                                      <Z>0</Z>
                                                                      <R>0</R>
                                                                      <G>0</G>
                                                                      <B>0</B>
                                                                      <A>255</A>
                                                                    </BackgroundColor>
                                                                    <CurrentShownTexture>0</CurrentShownTexture>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="1" y="13" z="0" />
                                                                    <BlockOrientation Forward="Down" Up="Forward" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="-1" y="12" z="0" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="-2" y="14" z="1" />
                                                                    <BlockOrientation Forward="Backward" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                                    <Min x="1" y="14" z="2" />
                                                                    <BlockOrientation Forward="Down" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                                    <Min x="-2" y="14" z="4" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="-1" y="14" z="1" />
                                                                    <BlockOrientation Forward="Backward" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="-1" y="13" z="0" />
                                                                    <BlockOrientation Forward="Down" Up="Forward" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                                    <Min x="-2" y="14" z="3" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                                    <Min x="-2" y="14" z="2" />
                                                                    <BlockOrientation Forward="Down" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                                    <Min x="-2" y="13" z="5" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                                    <Min x="2" y="14" z="4" />
                                                                    <BlockOrientation Forward="Forward" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                                    <Min x="2" y="14" z="3" />
                                                                    <BlockOrientation Forward="Forward" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                                    <Min x="2" y="14" z="2" />
                                                                    <BlockOrientation Forward="Left" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="2" y="14" z="1" />
                                                                    <BlockOrientation Forward="Backward" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                                    <Min x="2" y="13" z="5" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                                    <Min x="-2" y="13" z="4" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                                                                    <SubtypeName>SmallProjector</SubtypeName>
                                                                    <EntityId>78160633744493235</EntityId>
                                                                    <Min x="2" y="13" z="4" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Vehicle Repair Projector</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>false</Enabled>
                                                                    <ProjectedGrid>
                                                                      <SubtypeName />
                                                                      <EntityId>107091490568784306</EntityId>
                                                                      <PersistentFlags>CastShadows InScene</PersistentFlags>
                                                                      <PositionAndOrientation>
                                                                        <Position x="0" y="0" z="0" />
                                                                        <Forward x="0.5997866" y="-0.661617339" z="0.45002073" />
                                                                        <Up x="0.6568089" y="0.0858671" z="-0.7491521" />
                                                                        <Orientation>
                                                                          <X>-0.6747525</X>
                                                                          <Y>-0.519345164</Y>
                                                                          <Z>0.04213711</Z>
                                                                          <W>0.5226989</W>
                                                                        </Orientation>
                                                                      </PositionAndOrientation>
                                                                      <GridSizeEnum>Small</GridSizeEnum>
                                                                      <CubeBlocks>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                                          <Min x="0" y="12" z="1" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                                          <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                                          <EntityId>125079161045714161</EntityId>
                                                                          <Min x="-2" y="12" z="1" />
                                                                          <BlockOrientation Forward="Up" Up="Left" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Wheel Suspension 3x3 1</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <TopBlockId xsi:nil="true" />
                                                                          <ShareInertiaTensor>false</ShareInertiaTensor>
                                                                          <SafetyDetach xsi:nil="true" />
                                                                          <RotorEntityId>73823953711401905</RotorEntityId>
                                                                          <WeldedEntityId xsi:nil="true" />
                                                                          <SteerAngle>0</SteerAngle>
                                                                          <Damping>0.012</Damping>
                                                                          <Strength>0.502000034</Strength>
                                                                          <Propulsion>true</Propulsion>
                                                                          <Friction>1.6</Friction>
                                                                          <Power>0.7</Power>
                                                                          <Height>-0.0880000442</Height>
                                                                          <MaxSteerAngle>0.32</MaxSteerAngle>
                                                                          <InvertSteer>false</InvertSteer>
                                                                          <InvertPropulsion>false</InvertPropulsion>
                                                                          <SpeedLimit>360</SpeedLimit>
                                                                          <PowerNew>0.6</PowerNew>
                                                                          <StrengthNew>0.1</StrengthNew>
                                                                          <FrictionNew xsi:nil="true" />
                                                                          <AirShockEnabled>true</AirShockEnabled>
                                                                          <BrakingEnabled>true</BrakingEnabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                                          <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                                          <EntityId>77201670923078742</EntityId>
                                                                          <Min x="1" y="12" z="1" />
                                                                          <BlockOrientation Forward="Up" Up="Right" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Wheel Suspension 3x3 2</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <TopBlockId xsi:nil="true" />
                                                                          <ShareInertiaTensor>false</ShareInertiaTensor>
                                                                          <SafetyDetach xsi:nil="true" />
                                                                          <RotorEntityId>97411096429894028</RotorEntityId>
                                                                          <WeldedEntityId xsi:nil="true" />
                                                                          <SteerAngle>0</SteerAngle>
                                                                          <Damping>0.012</Damping>
                                                                          <Strength>0.502000034</Strength>
                                                                          <Propulsion>true</Propulsion>
                                                                          <Friction>1.6</Friction>
                                                                          <Power>0.7</Power>
                                                                          <Height>-0.0880000442</Height>
                                                                          <MaxSteerAngle>0.32</MaxSteerAngle>
                                                                          <InvertSteer>false</InvertSteer>
                                                                          <InvertPropulsion>false</InvertPropulsion>
                                                                          <SpeedLimit>360</SpeedLimit>
                                                                          <PowerNew>0.6</PowerNew>
                                                                          <StrengthNew>0.1</StrengthNew>
                                                                          <FrictionNew xsi:nil="true" />
                                                                          <AirShockEnabled>true</AirShockEnabled>
                                                                          <BrakingEnabled>true</BrakingEnabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="0" y="12" z="2" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="0" y="12" z="3" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="0" y="12" z="0" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                                          <Min x="-1" y="13" z="1" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_AirVent">
                                                                          <SubtypeName>SmallAirVent</SubtypeName>
                                                                          <EntityId>81241850701681160</EntityId>
                                                                          <Min x="0" y="13" z="0" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Air Vent</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <IsDepressurizing>true</IsDepressurizing>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                                          <Min x="-1" y="14" z="2" />
                                                                          <BlockOrientation Forward="Left" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                                          <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                                          <EntityId>104685704354575926</EntityId>
                                                                          <Min x="0" y="13" z="2" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <ComponentContainer>
                                                                            <Components>
                                                                              <ComponentData>
                                                                                <TypeId>MyInventoryBase</TypeId>
                                                                                <Component xsi:type="MyObjectBuilder_Inventory">
                                                                                  <Items />
                                                                                  <nextItemId>0</nextItemId>
                                                                                  <Volume>0.125</Volume>
                                                                                  <Mass>9223372036854.775807</Mass>
                                                                                  <MaxItemCount>2147483647</MaxItemCount>
                                                                                  <Size xsi:nil="true" />
                                                                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                                </Component>
                                                                              </ComponentData>
                                                                            </Components>
                                                                          </ComponentContainer>
                                                                          <CustomName>VC SC Small Cargo Container 1</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
                                                                          <SubtypeName>SmallBlockConveyor</SubtypeName>
                                                                          <EntityId>102949508573697475</EntityId>
                                                                          <Min x="0" y="13" z="3" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                                          <Min x="-1" y="13" z="2" />
                                                                          <BlockOrientation Forward="Forward" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                                          <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                                          <EntityId>114126541994460145</EntityId>
                                                                          <Min x="1" y="13" z="3" />
                                                                          <BlockOrientation Forward="Left" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <ComponentContainer>
                                                                            <Components>
                                                                              <ComponentData>
                                                                                <TypeId>MyInventoryBase</TypeId>
                                                                                <Component xsi:type="MyObjectBuilder_Inventory">
                                                                                  <Items />
                                                                                  <nextItemId>0</nextItemId>
                                                                                  <Volume>0.125</Volume>
                                                                                  <Mass>9223372036854.775807</Mass>
                                                                                  <MaxItemCount>2147483647</MaxItemCount>
                                                                                  <Size xsi:nil="true" />
                                                                                  <InventoryFlags>CanReceive</InventoryFlags>
                                                                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                                </Component>
                                                                              </ComponentData>
                                                                            </Components>
                                                                          </ComponentContainer>
                                                                          <CustomName>VC SC Small Reactor 1</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <Inventory>
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>0.125</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Inventory>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                                          <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                                          <EntityId>122620068271021488</EntityId>
                                                                          <Min x="2" y="14" z="10" />
                                                                          <BlockOrientation Forward="Backward" Up="Up" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Tail Light 2</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>false</Enabled>
                                                                          <Radius>1</Radius>
                                                                          <ReflectorRadius>20</ReflectorRadius>
                                                                          <ColorGreen>0.654902</ColorGreen>
                                                                          <ColorBlue>0.4117647</ColorBlue>
                                                                          <Falloff>1</Falloff>
                                                                          <Intensity>3</Intensity>
                                                                          <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                                          <BlinkLenght>10</BlinkLenght>
                                                                          <BlinkOffset>0</BlinkOffset>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="1" y="14" z="1" />
                                                                          <BlockOrientation Forward="Backward" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
                                                                          <SubtypeName>SmallBlockSmallContainer</SubtypeName>
                                                                          <EntityId>131771150539002795</EntityId>
                                                                          <Min x="0" y="13" z="1" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <ComponentContainer>
                                                                            <Components>
                                                                              <ComponentData>
                                                                                <TypeId>MyInventoryBase</TypeId>
                                                                                <Component xsi:type="MyObjectBuilder_Inventory">
                                                                                  <Items />
                                                                                  <nextItemId>0</nextItemId>
                                                                                  <Volume>0.125</Volume>
                                                                                  <Mass>9223372036854.775807</Mass>
                                                                                  <MaxItemCount>2147483647</MaxItemCount>
                                                                                  <Size xsi:nil="true" />
                                                                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                                </Component>
                                                                              </ComponentData>
                                                                            </Components>
                                                                          </ComponentContainer>
                                                                          <CustomName>VC SC Small Cargo Container 2</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                                          <SubtypeName>SmallTextPanel</SubtypeName>
                                                                          <EntityId>142992293765608997</EntityId>
                                                                          <Min x="1" y="14" z="3" />
                                                                          <BlockOrientation Forward="Right" Up="Up" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC GPS and Vehicle Systems Status [LCD]</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <Description />
                                                                          <Title>Title</Title>
                                                                          <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                                          <ChangeInterval>0</ChangeInterval>
                                                                          <SelectedImages />
                                                                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                                          <FontSize>1.6</FontSize>
                                                                          <PublicDescription>Location: {X:698 Y:232 Z:119}

No damaged blocks found.
</PublicDescription>
                                                                          <PublicTitle>POS;Echo;Damage</PublicTitle>
                                                                          <ShowText>PUBLIC</ShowText>
                                                                          <FontColor>
                                                                            <PackedValue>4281501695</PackedValue>
                                                                            <X>255</X>
                                                                            <Y>135</Y>
                                                                            <Z>50</Z>
                                                                            <R>255</R>
                                                                            <G>135</G>
                                                                            <B>50</B>
                                                                            <A>255</A>
                                                                          </FontColor>
                                                                          <BackgroundColor>
                                                                            <PackedValue>4278190080</PackedValue>
                                                                            <X>0</X>
                                                                            <Y>0</Y>
                                                                            <Z>0</Z>
                                                                            <R>0</R>
                                                                            <G>0</G>
                                                                            <B>0</B>
                                                                            <A>255</A>
                                                                          </BackgroundColor>
                                                                          <CurrentShownTexture>0</CurrentShownTexture>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
                                                                          <SubtypeName>SmallBlockCockpit</SubtypeName>
                                                                          <EntityId>98767596294393508</EntityId>
                                                                          <Min x="-1" y="13" z="4" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <ComponentContainer>
                                                                            <Components>
                                                                              <ComponentData>
                                                                                <TypeId>MyInventoryBase</TypeId>
                                                                                <Component xsi:type="MyObjectBuilder_Inventory">
                                                                                  <Items />
                                                                                  <nextItemId>0</nextItemId>
                                                                                  <Volume>1</Volume>
                                                                                  <Mass>9223372036854.775807</Mass>
                                                                                  <MaxItemCount>2147483647</MaxItemCount>
                                                                                  <Size xsi:nil="true" />
                                                                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                                </Component>
                                                                              </ComponentData>
                                                                            </Components>
                                                                          </ComponentContainer>
                                                                          <CustomName>VC SC Cockpit</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <UseSingleWeaponMode>false</UseSingleWeaponMode>
                                                                          <Toolbar>
                                                                            <ToolbarType>Character</ToolbarType>
                                                                            <SelectedSlot xsi:nil="true" />
                                                                            <Slots>
                                                                              <Slot>
                                                                                <Index>0</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                                  <Action>OnOff</Action>
                                                                                  <GridEntityId>0</GridEntityId>
                                                                                  <BlockEntityId>98767596294393508</BlockEntityId>
                                                                                  <GroupName>VC SC Lights</GroupName>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>1</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                                  <Action>OnOff</Action>
                                                                                  <GridEntityId>0</GridEntityId>
                                                                                  <BlockEntityId>98767596294393508</BlockEntityId>
                                                                                  <GroupName>VC SC Artificial Mass</GroupName>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>2</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                                  <Action>IncreaseHeight</Action>
                                                                                  <GridEntityId>0</GridEntityId>
                                                                                  <BlockEntityId>98767596294393508</BlockEntityId>
                                                                                  <GroupName>VC SC Wheels</GroupName>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>3</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                                  <Action>DecreaseHeight</Action>
                                                                                  <GridEntityId>0</GridEntityId>
                                                                                  <BlockEntityId>98767596294393508</BlockEntityId>
                                                                                  <GroupName>VC SC Wheels</GroupName>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>4</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                                  <Action>OnOff</Action>
                                                                                  <GridEntityId>0</GridEntityId>
                                                                                  <BlockEntityId>98767596294393508</BlockEntityId>
                                                                                  <GroupName>Thrusters</GroupName>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>5</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>View</Action>
                                                                                  <BlockEntityId>80510962515148065</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>6</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>Stockpile</Action>
                                                                                  <BlockEntityId>108546237982876257</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>7</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                                  <Action>OnOff</Action>
                                                                                  <GridEntityId>0</GridEntityId>
                                                                                  <BlockEntityId>98767596294393508</BlockEntityId>
                                                                                  <GroupName>VC SC Reactors</GroupName>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>8</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>OnOff</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>9</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>OnOff</Action>
                                                                                  <BlockEntityId>79287089145207009</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>10</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>IncreaseRadius</Action>
                                                                                  <BlockEntityId>79287089145207009</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>11</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>DecreaseRadius</Action>
                                                                                  <BlockEntityId>79287089145207009</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>12</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>OnOff</Action>
                                                                                  <BlockEntityId>96434766138229813</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>13</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>IncreaseRadius</Action>
                                                                                  <BlockEntityId>96434766138229813</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>14</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>DecreaseRadius</Action>
                                                                                  <BlockEntityId>96434766138229813</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>15</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>Depressurize</Action>
                                                                                  <BlockEntityId>81241850701681160</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>16</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>OnOff</Action>
                                                                                  <BlockEntityId>81241850701681160</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>18</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>IncreaseRotX</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>19</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>DecreaseRotX</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>20</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>IncreaseRotY</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>21</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>DecreaseRotY</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>22</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>IncreaseRotZ</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>23</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>DecreaseRotZ</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>27</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>IncreaseX</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>28</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>DecreaseX</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>29</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>IncreaseY</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>30</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>DecreaseY</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>31</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>IncreaseZ</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>32</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>DecreaseZ</Action>
                                                                                  <BlockEntityId>136457025266017327</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                            </Slots>
                                                                          </Toolbar>
                                                                          <SelectedGunId xsi:nil="true" />
                                                                          <BuildToolbar>
                                                                            <ToolbarType>Character</ToolbarType>
                                                                            <SelectedSlot xsi:nil="true" />
                                                                            <Slots />
                                                                          </BuildToolbar>
                                                                          <PilotRelativeWorld>
                                                                            <Position x="-0.042327534407377243" y="0.091679096221923828" z="-4.373354434967041" />
                                                                            <Forward x="0.0695243" y="-0.26722917" z="0.9611217" />
                                                                            <Up x="-0.0481962934" y="0.961428165" z="0.27080074" />
                                                                            <Orientation>
                                                                              <X>-0.028627973</X>
                                                                              <Y>0.9898188</Y>
                                                                              <Z>0.135891</Z>
                                                                              <W>-0.0311894119</W>
                                                                            </Orientation>
                                                                          </PilotRelativeWorld>
                                                                          <PilotGunDefinition xsi:nil="true" />
                                                                          <IsInFirstPersonView>true</IsInFirstPersonView>
                                                                          <OxygenLevel>1</OxygenLevel>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                                                          <SubtypeName>SmallTextPanel</SubtypeName>
                                                                          <EntityId>75865572598440791</EntityId>
                                                                          <Min x="-1" y="14" z="3" />
                                                                          <BlockOrientation Forward="Left" Up="Up" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Speed, Power, and Oxygen [LCD]</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <Description />
                                                                          <Title>Title</Title>
                                                                          <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
                                                                          <ChangeInterval>0</ChangeInterval>
                                                                          <SelectedImages />
                                                                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                                                          <FontSize>1.6</FontSize>
                                                                          <PublicDescription>Speed:                  0.0 m/s 

Power:         117 kW / 1 MW
[||||''''''''''''''''''''''''''''''''''']    11.7%




Oxygen Tanks        0.58%
['''''''''''''''''''''''''''''''''''''''''''''''''''''''']
</PublicDescription>
                                                                          <PublicTitle>Speed;Echo;PowerSummary;Echo;Echo;Echo;Echo;Oxygen Tank</PublicTitle>
                                                                          <ShowText>PUBLIC</ShowText>
                                                                          <FontColor>
                                                                            <PackedValue>4281501695</PackedValue>
                                                                            <X>255</X>
                                                                            <Y>135</Y>
                                                                            <Z>50</Z>
                                                                            <R>255</R>
                                                                            <G>135</G>
                                                                            <B>50</B>
                                                                            <A>255</A>
                                                                          </FontColor>
                                                                          <BackgroundColor>
                                                                            <PackedValue>4278190080</PackedValue>
                                                                            <X>0</X>
                                                                            <Y>0</Y>
                                                                            <Z>0</Z>
                                                                            <R>0</R>
                                                                            <G>0</G>
                                                                            <B>0</B>
                                                                            <A>255</A>
                                                                          </BackgroundColor>
                                                                          <CurrentShownTexture>0</CurrentShownTexture>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="1" y="13" z="0" />
                                                                          <BlockOrientation Forward="Down" Up="Forward" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="-1" y="12" z="0" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="-2" y="14" z="1" />
                                                                          <BlockOrientation Forward="Backward" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                                          <Min x="1" y="14" z="2" />
                                                                          <BlockOrientation Forward="Down" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                                          <Min x="-2" y="14" z="4" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="-1" y="14" z="1" />
                                                                          <BlockOrientation Forward="Backward" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="-1" y="13" z="0" />
                                                                          <BlockOrientation Forward="Down" Up="Forward" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                                          <Min x="-2" y="14" z="3" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                                          <Min x="-2" y="14" z="2" />
                                                                          <BlockOrientation Forward="Down" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                                          <Min x="-2" y="13" z="5" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
                                                                          <Min x="2" y="14" z="4" />
                                                                          <BlockOrientation Forward="Forward" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorInvCorner2Tip</SubtypeName>
                                                                          <Min x="2" y="14" z="3" />
                                                                          <BlockOrientation Forward="Forward" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
                                                                          <Min x="2" y="14" z="2" />
                                                                          <BlockOrientation Forward="Left" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="2" y="14" z="1" />
                                                                          <BlockOrientation Forward="Backward" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                                          <Min x="2" y="13" z="5" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                                          <Min x="-2" y="13" z="4" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
                                                                          <SubtypeName>SmallProjector</SubtypeName>
                                                                          <EntityId>136457025266017327</EntityId>
                                                                          <Min x="2" y="13" z="4" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Vehicle Repair Projector</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <ProjectionOffset>
                                                                            <X>0</X>
                                                                            <Y>0</Y>
                                                                            <Z>0</Z>
                                                                          </ProjectionOffset>
                                                                          <ProjectionRotation>
                                                                            <X>0</X>
                                                                            <Y>0</Y>
                                                                            <Z>0</Z>
                                                                          </ProjectionRotation>
                                                                          <KeepProjection>false</KeepProjection>
                                                                          <ShowOnlyBuildable>false</ShowOnlyBuildable>
                                                                          <InstantBuildingEnabled>false</InstantBuildingEnabled>
                                                                          <MaxNumberOfProjections>5</MaxNumberOfProjections>
                                                                          <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                                                                          <ProjectionsRemaining>0</ProjectionsRemaining>
                                                                          <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                                          <Min x="-2" y="13" z="6" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                                                          <SubtypeName>TimerBlockSmall</SubtypeName>
                                                                          <EntityId>130702031900157900</EntityId>
                                                                          <Min x="2" y="13" z="6" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC LCD Timer Block</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <Toolbar>
                                                                            <ToolbarType>Character</ToolbarType>
                                                                            <SelectedSlot xsi:nil="true" />
                                                                            <Slots>
                                                                              <Slot>
                                                                                <Index>0</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>Run</Action>
                                                                                  <Parameters>
                                                                                    <MyObjectBuilder_ToolbarItemActionParameter>
                                                                                      <TypeCode>String</TypeCode>
                                                                                      <Value />
                                                                                    </MyObjectBuilder_ToolbarItemActionParameter>
                                                                                  </Parameters>
                                                                                  <BlockEntityId>139927435836166041</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>1</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>Start</Action>
                                                                                  <BlockEntityId>130702031900157900</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                              <Slot>
                                                                                <Index>2</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                                  <Action>TriggerNow</Action>
                                                                                  <BlockEntityId>130702031900157900</BlockEntityId>
                                                                                </Data>
                                                                              </Slot>
                                                                            </Slots>
                                                                          </Toolbar>
                                                                          <JustTriggered>true</JustTriggered>
                                                                          <Delay>1100</Delay>
                                                                          <CurrentTime>0</CurrentTime>
                                                                          <IsCountingDown>false</IsCountingDown>
                                                                          <Silent>true</Silent>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                                          <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                                          <EntityId>136187672552007304</EntityId>
                                                                          <Min x="-2" y="13" z="7" />
                                                                          <BlockOrientation Forward="Up" Up="Backward" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                                          <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                                          <EntityId>96486958077835278</EntityId>
                                                                          <Min x="2" y="13" z="7" />
                                                                          <BlockOrientation Forward="Up" Up="Backward" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="3" y="14" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                                          <Min x="2" y="15" z="10" />
                                                                          <BlockOrientation Forward="Down" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                                                                          <SubtypeName>SmallProgrammableBlock</SubtypeName>
                                                                          <EntityId>139927435836166041</EntityId>
                                                                          <Min x="-2" y="14" z="8" />
                                                                          <BlockOrientation Forward="Right" Up="Up" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC LCD Programmable block</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                                                                          <Storage />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="0" y="12" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="0" y="12" z="8" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                                          <Min x="0" y="12" z="9" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                                          <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                                          <EntityId>141832441012863818</EntityId>
                                                                          <Min x="-2" y="12" z="9" />
                                                                          <BlockOrientation Forward="Up" Up="Left" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <TopBlockId xsi:nil="true" />
                                                                          <ShareInertiaTensor>false</ShareInertiaTensor>
                                                                          <SafetyDetach xsi:nil="true" />
                                                                          <RotorEntityId>133809750534149108</RotorEntityId>
                                                                          <WeldedEntityId xsi:nil="true" />
                                                                          <SteerAngle>0</SteerAngle>
                                                                          <Damping>0.012</Damping>
                                                                          <Strength>0.502000034</Strength>
                                                                          <Propulsion>true</Propulsion>
                                                                          <Friction>1.6</Friction>
                                                                          <Power>0.7</Power>
                                                                          <Height>-0.0880000442</Height>
                                                                          <MaxSteerAngle>0.32</MaxSteerAngle>
                                                                          <InvertSteer>false</InvertSteer>
                                                                          <InvertPropulsion>false</InvertPropulsion>
                                                                          <SpeedLimit>360</SpeedLimit>
                                                                          <PowerNew>0.6</PowerNew>
                                                                          <StrengthNew>0.1</StrengthNew>
                                                                          <FrictionNew xsi:nil="true" />
                                                                          <AirShockEnabled>true</AirShockEnabled>
                                                                          <BrakingEnabled>true</BrakingEnabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                                          <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                                          <EntityId>75320151868749682</EntityId>
                                                                          <Min x="1" y="12" z="9" />
                                                                          <BlockOrientation Forward="Up" Up="Right" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <TopBlockId xsi:nil="true" />
                                                                          <ShareInertiaTensor>false</ShareInertiaTensor>
                                                                          <SafetyDetach xsi:nil="true" />
                                                                          <RotorEntityId>141373735518552259</RotorEntityId>
                                                                          <WeldedEntityId xsi:nil="true" />
                                                                          <SteerAngle>0</SteerAngle>
                                                                          <Damping>0.012</Damping>
                                                                          <Strength>0.502000034</Strength>
                                                                          <Propulsion>true</Propulsion>
                                                                          <Friction>1.6</Friction>
                                                                          <Power>0.7</Power>
                                                                          <Height>-0.0880000442</Height>
                                                                          <MaxSteerAngle>0.32</MaxSteerAngle>
                                                                          <InvertSteer>false</InvertSteer>
                                                                          <InvertPropulsion>false</InvertPropulsion>
                                                                          <SpeedLimit>360</SpeedLimit>
                                                                          <PowerNew>0.6</PowerNew>
                                                                          <StrengthNew>0.1</StrengthNew>
                                                                          <FrictionNew xsi:nil="true" />
                                                                          <AirShockEnabled>true</AirShockEnabled>
                                                                          <BrakingEnabled>true</BrakingEnabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                                                                          <SubtypeName>SmallBlockOreDetector</SubtypeName>
                                                                          <EntityId>132690083272261176</EntityId>
                                                                          <Min x="2" y="14" z="5" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Ore Detector </CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <DetectionRadius>50</DetectionRadius>
                                                                          <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <EntityId>95291115011400430</EntityId>
                                                                          <Min x="-2" y="12" z="6" />
                                                                          <IntegrityPercent>0.399999946</IntegrityPercent>
                                                                          <BuildPercent>0.399999946</BuildPercent>
                                                                          <BlockOrientation Forward="Left" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="1" y="12" z="0" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                                                                          <SubtypeName>SmallWheel3x3</SubtypeName>
                                                                          <EntityId>77095803949905693</EntityId>
                                                                          <Min x="3" y="12" z="4" />
                                                                          <BlockOrientation Forward="Forward" Up="Right" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <YieldLastComponent>true</YieldLastComponent>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <EntityId>86449911784291000</EntityId>
                                                                          <Min x="-3" y="12" z="6" />
                                                                          <IntegrityPercent>0.3600001</IntegrityPercent>
                                                                          <BuildPercent>0.3600001</BuildPercent>
                                                                          <BlockOrientation Forward="Right" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                                          <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                                          <EntityId>92988697391088476</EntityId>
                                                                          <Min x="-1" y="13" z="3" />
                                                                          <BlockOrientation Forward="Right" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <ComponentContainer>
                                                                            <Components>
                                                                              <ComponentData>
                                                                                <TypeId>MyInventoryBase</TypeId>
                                                                                <Component xsi:type="MyObjectBuilder_Inventory">
                                                                                  <Items />
                                                                                  <nextItemId>0</nextItemId>
                                                                                  <Volume>0.125</Volume>
                                                                                  <Mass>9223372036854.775807</Mass>
                                                                                  <MaxItemCount>2147483647</MaxItemCount>
                                                                                  <Size xsi:nil="true" />
                                                                                  <InventoryFlags>CanReceive</InventoryFlags>
                                                                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                                </Component>
                                                                              </ComponentData>
                                                                            </Components>
                                                                          </ComponentContainer>
                                                                          <CustomName>VC SC Small Reactor 2</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <Inventory>
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>0.125</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Inventory>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                                          <Min x="1" y="13" z="2" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                                          <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                                          <EntityId>86807640864320736</EntityId>
                                                                          <Min x="-2" y="14" z="10" />
                                                                          <BlockOrientation Forward="Backward" Up="Up" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Tail Light 1</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>false</Enabled>
                                                                          <Radius>1</Radius>
                                                                          <ReflectorRadius>20</ReflectorRadius>
                                                                          <ColorGreen>0.654902</ColorGreen>
                                                                          <ColorBlue>0.4117647</ColorBlue>
                                                                          <Falloff>1</Falloff>
                                                                          <Intensity>3</Intensity>
                                                                          <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                                          <BlinkLenght>10</BlinkLenght>
                                                                          <BlinkOffset>0</BlinkOffset>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                                          <Min x="1" y="13" z="1" />
                                                                          <BlockOrientation Forward="Backward" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="-1" y="12" z="4" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="1" y="12" z="4" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="1" y="12" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="-1" y="12" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                                          <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                                          <EntityId>113800717046152430</EntityId>
                                                                          <Min x="-2" y="13" z="3" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Headlight 1</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>false</Enabled>
                                                                          <Radius>5</Radius>
                                                                          <ReflectorRadius>120</ReflectorRadius>
                                                                          <Falloff>1</Falloff>
                                                                          <Intensity>4</Intensity>
                                                                          <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                                          <BlinkLenght>10</BlinkLenght>
                                                                          <BlinkOffset>0</BlinkOffset>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="-1" y="12" z="6" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="1" y="12" z="6" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="3" y="15" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                                          <SubtypeName>VirtualMassSmall</SubtypeName>
                                                                          <EntityId>137426466706486764</EntityId>
                                                                          <Min x="-1" y="12" z="8" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Artificial Mass</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                                          <SubtypeName>VirtualMassSmall</SubtypeName>
                                                                          <EntityId>139626343813336878</EntityId>
                                                                          <Min x="1" y="12" z="8" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Artificial Mass</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="-3" y="15" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="3" y="13" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                                          <SubtypeName>VirtualMassSmall</SubtypeName>
                                                                          <EntityId>116016499718099500</EntityId>
                                                                          <Min x="-1" y="12" z="2" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Artificial Mass</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                                          <SubtypeName>VirtualMassSmall</SubtypeName>
                                                                          <EntityId>111184163073985286</EntityId>
                                                                          <Min x="1" y="12" z="2" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Artificial Mass</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>false</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                                                                          <SubtypeName>OxygenTankSmall</SubtypeName>
                                                                          <EntityId>108546237982876257</EntityId>
                                                                          <Min x="-1" y="13" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Up" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <ComponentContainer>
                                                                            <Components>
                                                                              <ComponentData>
                                                                                <TypeId>MyInventoryBase</TypeId>
                                                                                <Component xsi:type="MyObjectBuilder_Inventory">
                                                                                  <Items />
                                                                                  <nextItemId>0</nextItemId>
                                                                                  <Volume>4</Volume>
                                                                                  <Mass>9223372036854.775807</Mass>
                                                                                  <MaxItemCount>2147483647</MaxItemCount>
                                                                                  <Size xsi:nil="true" />
                                                                                  <InventoryFlags>CanReceive</InventoryFlags>
                                                                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                                </Component>
                                                                              </ComponentData>
                                                                            </Components>
                                                                          </ComponentContainer>
                                                                          <CustomName>VC SC Oxygen Tank</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <IsStockpiling>false</IsStockpiling>
                                                                          <FilledRatio>0.00583470054</FilledRatio>
                                                                          <Inventory>
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>4</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Inventory>
                                                                          <AutoRefill>false</AutoRefill>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                                          <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                                          <EntityId>100654335714184622</EntityId>
                                                                          <Min x="2" y="13" z="3" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <CustomName>VC SC Headlight 2</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>false</Enabled>
                                                                          <Radius>5</Radius>
                                                                          <ReflectorRadius>120</ReflectorRadius>
                                                                          <Falloff>1</Falloff>
                                                                          <Intensity>4</Intensity>
                                                                          <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                                          <BlinkLenght>10</BlinkLenght>
                                                                          <BlinkOffset>0</BlinkOffset>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                                          <Min x="-2" y="15" z="10" />
                                                                          <BlockOrientation Forward="Right" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="-3" y="14" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="-3" y="13" z="7" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                                                                          <SubtypeName>ConnectorMedium</SubtypeName>
                                                                          <EntityId>129958010686977027</EntityId>
                                                                          <Min x="-1" y="13" z="10" />
                                                                          <BlockOrientation Forward="Backward" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <DeformationRatio>0.5</DeformationRatio>
                                                                          <ComponentContainer>
                                                                            <Components>
                                                                              <ComponentData>
                                                                                <TypeId>MyInventoryBase</TypeId>
                                                                                <Component xsi:type="MyObjectBuilder_Inventory">
                                                                                  <Items />
                                                                                  <nextItemId>0</nextItemId>
                                                                                  <Volume>1.152</Volume>
                                                                                  <Mass>9223372036854.775807</Mass>
                                                                                  <MaxItemCount>2147483647</MaxItemCount>
                                                                                  <Size xsi:nil="true" />
                                                                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                                </Component>
                                                                              </ComponentData>
                                                                            </Components>
                                                                          </ComponentContainer>
                                                                          <CustomName>VC SC Connector</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <Inventory>
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>1.152</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Inventory>
                                                                          <MasterToSlaveTransform xsi:nil="true" />
                                                                          <MasterToSlaveGrid xsi:nil="true" />
                                                                          <IsMaster>true</IsMaster>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                                                                          <SubtypeName>SmallBlockBeacon</SubtypeName>
                                                                          <EntityId>96434766138229813</EntityId>
                                                                          <Min x="2" y="14" z="8" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Beacon</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <BroadcastRadius>10000</BroadcastRadius>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="3" y="14" z="8" />
                                                                          <BlockOrientation Forward="Forward" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="-3" y="14" z="10" />
                                                                          <BlockOrientation Forward="Forward" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                                                                          <SubtypeName>SmallCameraBlock</SubtypeName>
                                                                          <EntityId>80510962515148065</EntityId>
                                                                          <Min x="0" y="12" z="10" />
                                                                          <BlockOrientation Forward="Backward" Up="Up" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Camera</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <IsActive>false</IsActive>
                                                                          <Fov>1.04719758</Fov>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="3" y="14" z="10" />
                                                                          <BlockOrientation Forward="Forward" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                                                                          <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                                                                          <EntityId>79287089145207009</EntityId>
                                                                          <Min x="-2" y="14" z="9" />
                                                                          <BlockOrientation Forward="Up" Up="Left" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Antenna </CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <BroadcastRadius>500</BroadcastRadius>
                                                                          <ShowShipName>false</ShowShipName>
                                                                          <EnableBroadcasting>true</EnableBroadcasting>
                                                                          <AttachedPB>0</AttachedPB>
                                                                          <IgnoreAllied>false</IgnoreAllied>
                                                                          <IgnoreOther>true</IgnoreOther>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="-3" y="15" z="8" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <Min x="3" y="15" z="8" />
                                                                          <BlockOrientation Forward="Forward" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                                          <Min x="-2" y="15" z="8" />
                                                                          <BlockOrientation Forward="Backward" Up="Right" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                                          <Min x="2" y="15" z="8" />
                                                                          <BlockOrientation Forward="Backward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <EntityId>138845796115543691</EntityId>
                                                                          <Min x="-3" y="12" z="5" />
                                                                          <IntegrityPercent>0.3600001</IntegrityPercent>
                                                                          <BuildPercent>0.3600001</BuildPercent>
                                                                          <BlockOrientation Forward="Right" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                          <EntityId>100390428551640408</EntityId>
                                                                          <Min x="-2" y="12" z="5" />
                                                                          <IntegrityPercent>0.399999946</IntegrityPercent>
                                                                          <BuildPercent>0.399999946</BuildPercent>
                                                                          <BlockOrientation Forward="Left" Up="Down" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="1" y="12" z="3" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                                                                          <SubtypeName>ButtonPanelSmall</SubtypeName>
                                                                          <EntityId>84490552066783300</EntityId>
                                                                          <Min x="-3" y="13" z="4" />
                                                                          <BlockOrientation Forward="Forward" Up="Left" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                          <ShareMode>All</ShareMode>
                                                                          <CustomName>VC SC Button Panel</CustomName>
                                                                          <ShowOnHUD>false</ShowOnHUD>
                                                                          <ShowInTerminal>true</ShowInTerminal>
                                                                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                          <ShowInInventory>true</ShowInInventory>
                                                                          <Enabled>true</Enabled>
                                                                          <Toolbar>
                                                                            <ToolbarType>Character</ToolbarType>
                                                                            <SelectedSlot xsi:nil="true" />
                                                                            <Slots>
                                                                              <Slot>
                                                                                <Index>0</Index>
                                                                                <Item />
                                                                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                                  <Action>OnOff</Action>
                                                                                  <GridEntityId>0</GridEntityId>
                                                                                  <BlockEntityId>84490552066783300</BlockEntityId>
                                                                                  <GroupName>VC SC Lights</GroupName>
                                                                                </Data>
                                                                              </Slot>
                                                                            </Slots>
                                                                          </Toolbar>
                                                                          <AnyoneCanUse>false</AnyoneCanUse>
                                                                          <CustomButtonNames>
                                                                            <dictionary>
                                                                              <item>
                                                                                <Key>0</Key>
                                                                                <Value>VC SC Lights</Value>
                                                                              </item>
                                                                            </dictionary>
                                                                          </CustomButtonNames>
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="-1" y="12" z="3" />
                                                                          <BlockOrientation Forward="Forward" Up="Down" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="1" y="12" z="10" />
                                                                          <BlockOrientation Forward="Up" Up="Backward" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                          <Min x="-1" y="12" z="10" />
                                                                          <BlockOrientation Forward="Up" Up="Backward" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="2" y="15" z="9" />
                                                                          <BlockOrientation Forward="Left" Up="Up" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="-2" y="14" z="6" />
                                                                          <BlockOrientation Forward="Down" Up="Forward" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                          <Min x="-2" y="14" z="5" />
                                                                          <BlockOrientation Forward="Down" Up="Backward" />
                                                                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <EntityId>85944931348718765</EntityId>
                                                                          <Min x="-3" y="13" z="6" />
                                                                          <IntegrityPercent>0.7333333</IntegrityPercent>
                                                                          <BuildPercent>0.7333333</BuildPercent>
                                                                          <BlockOrientation Forward="Right" Up="Up" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                          <EntityId>111033066947136445</EntityId>
                                                                          <Min x="-3" y="13" z="5" />
                                                                          <IntegrityPercent>0.7333333</IntegrityPercent>
                                                                          <BuildPercent>0.7333333</BuildPercent>
                                                                          <BlockOrientation Forward="Right" Up="Backward" />
                                                                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                        </MyObjectBuilder_CubeBlock>
                                                                      </CubeBlocks>
                                                                      <XMirroxPlane x="0" y="14" z="1" />
                                                                      <ConveyorLines>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="-1" y="14" z="6" />
                                                                          <StartDirection>Backward</StartDirection>
                                                                          <EndPosition x="-1" y="14" z="7" />
                                                                          <EndDirection>Forward</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="1" y="14" z="6" />
                                                                          <StartDirection>Backward</StartDirection>
                                                                          <EndPosition x="1" y="14" z="7" />
                                                                          <EndDirection>Forward</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="0" y="13" z="4" />
                                                                          <StartDirection>Forward</StartDirection>
                                                                          <EndPosition x="0" y="13" z="3" />
                                                                          <EndDirection>Backward</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="0" y="13" z="2" />
                                                                          <StartDirection>Backward</StartDirection>
                                                                          <EndPosition x="0" y="13" z="3" />
                                                                          <EndDirection>Forward</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="1" y="13" z="3" />
                                                                          <StartDirection>Left</StartDirection>
                                                                          <EndPosition x="0" y="13" z="3" />
                                                                          <EndDirection>Right</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="-1" y="13" z="3" />
                                                                          <StartDirection>Right</StartDirection>
                                                                          <EndPosition x="0" y="13" z="3" />
                                                                          <EndDirection>Left</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="0" y="14" z="9" />
                                                                          <StartDirection>Backward</StartDirection>
                                                                          <EndPosition x="0" y="14" z="10" />
                                                                          <EndDirection>Forward</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="0" y="13" z="0" />
                                                                          <StartDirection>Backward</StartDirection>
                                                                          <EndPosition x="0" y="13" z="1" />
                                                                          <EndDirection>Forward</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                        <MyObjectBuilder_ConveyorLine>
                                                                          <StartPosition x="0" y="13" z="2" />
                                                                          <StartDirection>Forward</StartDirection>
                                                                          <EndPosition x="0" y="13" z="1" />
                                                                          <EndDirection>Backward</EndDirection>
                                                                          <Sections />
                                                                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                        </MyObjectBuilder_ConveyorLine>
                                                                      </ConveyorLines>
                                                                      <BlockGroups>
                                                                        <MyObjectBuilder_BlockGroup>
                                                                          <Name>VC SC Lights</Name>
                                                                          <Blocks>
                                                                            <Vector3I>
                                                                              <X>-2</X>
                                                                              <Y>13</Y>
                                                                              <Z>3</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>2</X>
                                                                              <Y>13</Y>
                                                                              <Z>3</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>-2</X>
                                                                              <Y>14</Y>
                                                                              <Z>10</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>2</X>
                                                                              <Y>14</Y>
                                                                              <Z>10</Z>
                                                                            </Vector3I>
                                                                          </Blocks>
                                                                        </MyObjectBuilder_BlockGroup>
                                                                        <MyObjectBuilder_BlockGroup>
                                                                          <Name>VC SC Wheels</Name>
                                                                          <Blocks>
                                                                            <Vector3I>
                                                                              <X>-1</X>
                                                                              <Y>12</Y>
                                                                              <Z>1</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>1</X>
                                                                              <Y>12</Y>
                                                                              <Z>1</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>-1</X>
                                                                              <Y>12</Y>
                                                                              <Z>9</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>1</X>
                                                                              <Y>12</Y>
                                                                              <Z>9</Z>
                                                                            </Vector3I>
                                                                          </Blocks>
                                                                        </MyObjectBuilder_BlockGroup>
                                                                        <MyObjectBuilder_BlockGroup>
                                                                          <Name>VC SC Artificial Mass</Name>
                                                                          <Blocks>
                                                                            <Vector3I>
                                                                              <X>-1</X>
                                                                              <Y>12</Y>
                                                                              <Z>8</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>1</X>
                                                                              <Y>12</Y>
                                                                              <Z>8</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>-1</X>
                                                                              <Y>12</Y>
                                                                              <Z>2</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>1</X>
                                                                              <Y>12</Y>
                                                                              <Z>2</Z>
                                                                            </Vector3I>
                                                                          </Blocks>
                                                                        </MyObjectBuilder_BlockGroup>
                                                                        <MyObjectBuilder_BlockGroup>
                                                                          <Name>VC SC Reactors</Name>
                                                                          <Blocks>
                                                                            <Vector3I>
                                                                              <X>1</X>
                                                                              <Y>13</Y>
                                                                              <Z>3</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>-1</X>
                                                                              <Y>13</Y>
                                                                              <Z>3</Z>
                                                                            </Vector3I>
                                                                          </Blocks>
                                                                        </MyObjectBuilder_BlockGroup>
                                                                        <MyObjectBuilder_BlockGroup>
                                                                          <Name>Thrusters</Name>
                                                                          <Blocks>
                                                                            <Vector3I>
                                                                              <X>-2</X>
                                                                              <Y>14</Y>
                                                                              <Z>7</Z>
                                                                            </Vector3I>
                                                                            <Vector3I>
                                                                              <X>2</X>
                                                                              <Y>14</Y>
                                                                              <Z>7</Z>
                                                                            </Vector3I>
                                                                          </Blocks>
                                                                        </MyObjectBuilder_BlockGroup>
                                                                      </BlockGroups>
                                                                      <Handbrake>true</Handbrake>
                                                                      <DisplayName>VC Scout Car</DisplayName>
                                                                      <OxygenAmount>
                                                                        <float>0</float>
                                                                        <float>0</float>
                                                                      </OxygenAmount>
                                                                      <DestructibleBlocks>true</DestructibleBlocks>
                                                                      <CreatePhysics>false</CreatePhysics>
                                                                      <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                                                                      <IsRespawnGrid>false</IsRespawnGrid>
                                                                      <LocalCoordSys>0</LocalCoordSys>
                                                                      <TargetingTargets />
                                                                    </ProjectedGrid>
                                                                    <ProjectionOffset>
                                                                      <X>-2</X>
                                                                      <Y>-13</Y>
                                                                      <Z>-4</Z>
                                                                    </ProjectionOffset>
                                                                    <ProjectionRotation>
                                                                      <X>0</X>
                                                                      <Y>0</Y>
                                                                      <Z>0</Z>
                                                                    </ProjectionRotation>
                                                                    <KeepProjection>true</KeepProjection>
                                                                    <ShowOnlyBuildable>false</ShowOnlyBuildable>
                                                                    <InstantBuildingEnabled>false</InstantBuildingEnabled>
                                                                    <MaxNumberOfProjections>5</MaxNumberOfProjections>
                                                                    <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                                                                    <ProjectionsRemaining>0</ProjectionsRemaining>
                                                                    <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                                    <Min x="-2" y="13" z="6" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                                                    <SubtypeName>TimerBlockSmall</SubtypeName>
                                                                    <EntityId>77490195618633951</EntityId>
                                                                    <Min x="2" y="13" z="6" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC LCD Timer Block</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <Toolbar>
                                                                      <ToolbarType>Character</ToolbarType>
                                                                      <SelectedSlot xsi:nil="true" />
                                                                      <Slots>
                                                                        <Slot>
                                                                          <Index>0</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>Run</Action>
                                                                            <Parameters>
                                                                              <MyObjectBuilder_ToolbarItemActionParameter>
                                                                                <TypeCode>String</TypeCode>
                                                                                <Value />
                                                                              </MyObjectBuilder_ToolbarItemActionParameter>
                                                                            </Parameters>
                                                                            <BlockEntityId>84213669621303632</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>1</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>Start</Action>
                                                                            <BlockEntityId>77490195618633951</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                        <Slot>
                                                                          <Index>2</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                            <Action>TriggerNow</Action>
                                                                            <BlockEntityId>77490195618633951</BlockEntityId>
                                                                          </Data>
                                                                        </Slot>
                                                                      </Slots>
                                                                    </Toolbar>
                                                                    <JustTriggered>true</JustTriggered>
                                                                    <Delay>1100</Delay>
                                                                    <CurrentTime>0</CurrentTime>
                                                                    <IsCountingDown>false</IsCountingDown>
                                                                    <Silent>true</Silent>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                                    <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                                    <EntityId>92674525302780362</EntityId>
                                                                    <Min x="-2" y="13" z="7" />
                                                                    <BlockOrientation Forward="Up" Up="Backward" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                                    <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                                    <EntityId>85835521705269572</EntityId>
                                                                    <Min x="2" y="13" z="7" />
                                                                    <BlockOrientation Forward="Up" Up="Backward" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="3" y="14" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                                    <Min x="2" y="15" z="10" />
                                                                    <BlockOrientation Forward="Down" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                                                                    <SubtypeName>SmallProgrammableBlock</SubtypeName>
                                                                    <EntityId>84213669621303632</EntityId>
                                                                    <Min x="-2" y="14" z="8" />
                                                                    <BlockOrientation Forward="Right" Up="Up" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC LCD Programmable block</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                                                                    <Storage />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="0" y="12" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="0" y="12" z="8" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                                    <Min x="0" y="12" z="9" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                                    <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                                    <EntityId>119077925814233773</EntityId>
                                                                    <Min x="-2" y="12" z="9" />
                                                                    <BlockOrientation Forward="Up" Up="Left" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <TopBlockId xsi:nil="true" />
                                                                    <ShareInertiaTensor>false</ShareInertiaTensor>
                                                                    <SafetyDetach xsi:nil="true" />
                                                                    <RotorEntityId>103663420504469009</RotorEntityId>
                                                                    <WeldedEntityId xsi:nil="true" />
                                                                    <SteerAngle>0</SteerAngle>
                                                                    <Damping>0.012</Damping>
                                                                    <Strength>0.502000034</Strength>
                                                                    <Propulsion>true</Propulsion>
                                                                    <Friction>1.6</Friction>
                                                                    <Power>0.7</Power>
                                                                    <Height>-0.0880000442</Height>
                                                                    <MaxSteerAngle>0.32</MaxSteerAngle>
                                                                    <InvertSteer>false</InvertSteer>
                                                                    <InvertPropulsion>false</InvertPropulsion>
                                                                    <SpeedLimit>360</SpeedLimit>
                                                                    <PowerNew>0.6</PowerNew>
                                                                    <StrengthNew>0.1</StrengthNew>
                                                                    <FrictionNew xsi:nil="true" />
                                                                    <AirShockEnabled>true</AirShockEnabled>
                                                                    <BrakingEnabled>true</BrakingEnabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                                    <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                                    <EntityId>101658717126612384</EntityId>
                                                                    <Min x="1" y="12" z="9" />
                                                                    <BlockOrientation Forward="Up" Up="Right" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <TopBlockId xsi:nil="true" />
                                                                    <ShareInertiaTensor>false</ShareInertiaTensor>
                                                                    <SafetyDetach xsi:nil="true" />
                                                                    <RotorEntityId>101136316096997966</RotorEntityId>
                                                                    <WeldedEntityId xsi:nil="true" />
                                                                    <SteerAngle>0</SteerAngle>
                                                                    <Damping>0.012</Damping>
                                                                    <Strength>0.502000034</Strength>
                                                                    <Propulsion>true</Propulsion>
                                                                    <Friction>1.6</Friction>
                                                                    <Power>0.7</Power>
                                                                    <Height>-0.0880000442</Height>
                                                                    <MaxSteerAngle>0.32</MaxSteerAngle>
                                                                    <InvertSteer>false</InvertSteer>
                                                                    <InvertPropulsion>false</InvertPropulsion>
                                                                    <SpeedLimit>360</SpeedLimit>
                                                                    <PowerNew>0.6</PowerNew>
                                                                    <StrengthNew>0.1</StrengthNew>
                                                                    <FrictionNew xsi:nil="true" />
                                                                    <AirShockEnabled>true</AirShockEnabled>
                                                                    <BrakingEnabled>true</BrakingEnabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                                                                    <SubtypeName>SmallBlockOreDetector</SubtypeName>
                                                                    <EntityId>117109466511062361</EntityId>
                                                                    <Min x="2" y="14" z="5" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Ore Detector </CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <DetectionRadius>50</DetectionRadius>
                                                                    <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <EntityId>120857077136361162</EntityId>
                                                                    <Min x="-2" y="12" z="6" />
                                                                    <IntegrityPercent>0.399999946</IntegrityPercent>
                                                                    <BuildPercent>0.399999946</BuildPercent>
                                                                    <BlockOrientation Forward="Left" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="1" y="12" z="0" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                                                                    <SubtypeName>SmallWheel3x3</SubtypeName>
                                                                    <EntityId>125157729070468073</EntityId>
                                                                    <Min x="3" y="12" z="4" />
                                                                    <BlockOrientation Forward="Forward" Up="Right" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <YieldLastComponent>true</YieldLastComponent>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <EntityId>103042043584781569</EntityId>
                                                                    <Min x="-3" y="12" z="6" />
                                                                    <IntegrityPercent>0.3600001</IntegrityPercent>
                                                                    <BuildPercent>0.3600001</BuildPercent>
                                                                    <BlockOrientation Forward="Right" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                                    <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                                    <EntityId>80774587160395654</EntityId>
                                                                    <Min x="-1" y="13" z="3" />
                                                                    <BlockOrientation Forward="Right" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <ComponentContainer>
                                                                      <Components>
                                                                        <ComponentData>
                                                                          <TypeId>MyInventoryBase</TypeId>
                                                                          <Component xsi:type="MyObjectBuilder_Inventory">
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>0.125</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Component>
                                                                        </ComponentData>
                                                                      </Components>
                                                                    </ComponentContainer>
                                                                    <CustomName>VC SC Small Reactor 2</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <Inventory>
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>0.125</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Inventory>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                                    <Min x="1" y="13" z="2" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                                    <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                                    <EntityId>126482161367836852</EntityId>
                                                                    <Min x="-2" y="14" z="10" />
                                                                    <BlockOrientation Forward="Backward" Up="Up" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Tail Light 1</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>false</Enabled>
                                                                    <Radius>1</Radius>
                                                                    <ReflectorRadius>20</ReflectorRadius>
                                                                    <ColorGreen>0.654902</ColorGreen>
                                                                    <ColorBlue>0.4117647</ColorBlue>
                                                                    <Falloff>1</Falloff>
                                                                    <Intensity>3</Intensity>
                                                                    <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                                    <BlinkLenght>10</BlinkLenght>
                                                                    <BlinkOffset>0</BlinkOffset>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                                    <Min x="1" y="13" z="1" />
                                                                    <BlockOrientation Forward="Backward" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="-1" y="12" z="4" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="1" y="12" z="4" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="1" y="12" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="-1" y="12" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                                    <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                                    <EntityId>77908280741584828</EntityId>
                                                                    <Min x="-2" y="13" z="3" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Headlight 1</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>false</Enabled>
                                                                    <Radius>5</Radius>
                                                                    <ReflectorRadius>120</ReflectorRadius>
                                                                    <Falloff>1</Falloff>
                                                                    <Intensity>4</Intensity>
                                                                    <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                                    <BlinkLenght>10</BlinkLenght>
                                                                    <BlinkOffset>0</BlinkOffset>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="-1" y="12" z="6" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="1" y="12" z="6" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="3" y="15" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                                    <SubtypeName>VirtualMassSmall</SubtypeName>
                                                                    <EntityId>111547929922549368</EntityId>
                                                                    <Min x="-1" y="12" z="8" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Artificial Mass</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                                    <SubtypeName>VirtualMassSmall</SubtypeName>
                                                                    <EntityId>138643794333109143</EntityId>
                                                                    <Min x="1" y="12" z="8" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Artificial Mass</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="-3" y="15" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="3" y="13" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                                    <SubtypeName>VirtualMassSmall</SubtypeName>
                                                                    <EntityId>119260617720369581</EntityId>
                                                                    <Min x="-1" y="12" z="2" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Artificial Mass</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                                    <SubtypeName>VirtualMassSmall</SubtypeName>
                                                                    <EntityId>114639941305687388</EntityId>
                                                                    <Min x="1" y="12" z="2" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Artificial Mass</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>false</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                                                                    <SubtypeName>OxygenTankSmall</SubtypeName>
                                                                    <EntityId>85710420501491751</EntityId>
                                                                    <Min x="-1" y="13" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Up" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <ComponentContainer>
                                                                      <Components>
                                                                        <ComponentData>
                                                                          <TypeId>MyInventoryBase</TypeId>
                                                                          <Component xsi:type="MyObjectBuilder_Inventory">
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>4</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Component>
                                                                        </ComponentData>
                                                                      </Components>
                                                                    </ComponentContainer>
                                                                    <CustomName>VC SC Oxygen Tank</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <IsStockpiling>false</IsStockpiling>
                                                                    <FilledRatio>0.005872145</FilledRatio>
                                                                    <Inventory>
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>4</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Inventory>
                                                                    <AutoRefill>false</AutoRefill>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                                    <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                                    <EntityId>94800448084959467</EntityId>
                                                                    <Min x="2" y="13" z="3" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <CustomName>VC SC Headlight 2</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>false</Enabled>
                                                                    <Radius>5</Radius>
                                                                    <ReflectorRadius>120</ReflectorRadius>
                                                                    <Falloff>1</Falloff>
                                                                    <Intensity>4</Intensity>
                                                                    <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                                    <BlinkLenght>10</BlinkLenght>
                                                                    <BlinkOffset>0</BlinkOffset>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                                    <Min x="-2" y="15" z="10" />
                                                                    <BlockOrientation Forward="Right" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="-3" y="14" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="-3" y="13" z="7" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                                                                    <SubtypeName>ConnectorMedium</SubtypeName>
                                                                    <EntityId>82721552506948444</EntityId>
                                                                    <Min x="-1" y="13" z="10" />
                                                                    <BlockOrientation Forward="Backward" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <DeformationRatio>0.5</DeformationRatio>
                                                                    <ComponentContainer>
                                                                      <Components>
                                                                        <ComponentData>
                                                                          <TypeId>MyInventoryBase</TypeId>
                                                                          <Component xsi:type="MyObjectBuilder_Inventory">
                                                                            <Items />
                                                                            <nextItemId>0</nextItemId>
                                                                            <Volume>1.152</Volume>
                                                                            <Mass>9223372036854.775807</Mass>
                                                                            <MaxItemCount>2147483647</MaxItemCount>
                                                                            <Size xsi:nil="true" />
                                                                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                          </Component>
                                                                        </ComponentData>
                                                                      </Components>
                                                                    </ComponentContainer>
                                                                    <CustomName>VC SC Connector</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <Inventory>
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>1.152</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Inventory>
                                                                    <MasterToSlaveTransform xsi:nil="true" />
                                                                    <MasterToSlaveGrid xsi:nil="true" />
                                                                    <IsMaster>true</IsMaster>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                                                                    <SubtypeName>SmallBlockBeacon</SubtypeName>
                                                                    <EntityId>86966322801640572</EntityId>
                                                                    <Min x="2" y="14" z="8" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Beacon</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <BroadcastRadius>10000</BroadcastRadius>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="3" y="14" z="8" />
                                                                    <BlockOrientation Forward="Forward" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="-3" y="14" z="10" />
                                                                    <BlockOrientation Forward="Forward" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                                                                    <SubtypeName>SmallCameraBlock</SubtypeName>
                                                                    <EntityId>140563434068444831</EntityId>
                                                                    <Min x="0" y="12" z="10" />
                                                                    <BlockOrientation Forward="Backward" Up="Up" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Camera</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <IsActive>false</IsActive>
                                                                    <Fov>1.04719758</Fov>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="3" y="14" z="10" />
                                                                    <BlockOrientation Forward="Forward" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                                                                    <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                                                                    <EntityId>126013999359402213</EntityId>
                                                                    <Min x="-2" y="14" z="9" />
                                                                    <BlockOrientation Forward="Up" Up="Left" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Antenna </CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <BroadcastRadius>500</BroadcastRadius>
                                                                    <ShowShipName>false</ShowShipName>
                                                                    <EnableBroadcasting>true</EnableBroadcasting>
                                                                    <AttachedPB>0</AttachedPB>
                                                                    <IgnoreAllied>false</IgnoreAllied>
                                                                    <IgnoreOther>true</IgnoreOther>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="-3" y="15" z="8" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <Min x="3" y="15" z="8" />
                                                                    <BlockOrientation Forward="Forward" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                                    <Min x="-2" y="15" z="8" />
                                                                    <BlockOrientation Forward="Backward" Up="Right" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                                    <Min x="2" y="15" z="8" />
                                                                    <BlockOrientation Forward="Backward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <EntityId>129675158414211314</EntityId>
                                                                    <Min x="-3" y="12" z="5" />
                                                                    <IntegrityPercent>0.3600001</IntegrityPercent>
                                                                    <BuildPercent>0.3600001</BuildPercent>
                                                                    <BlockOrientation Forward="Right" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                                    <EntityId>92668714271821583</EntityId>
                                                                    <Min x="-2" y="12" z="5" />
                                                                    <IntegrityPercent>0.399999946</IntegrityPercent>
                                                                    <BuildPercent>0.399999946</BuildPercent>
                                                                    <BlockOrientation Forward="Left" Up="Down" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="1" y="12" z="3" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                                                                    <SubtypeName>ButtonPanelSmall</SubtypeName>
                                                                    <EntityId>103463945053129971</EntityId>
                                                                    <Min x="-3" y="13" z="4" />
                                                                    <BlockOrientation Forward="Forward" Up="Left" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                    <ShareMode>All</ShareMode>
                                                                    <CustomName>VC SC Button Panel</CustomName>
                                                                    <ShowOnHUD>false</ShowOnHUD>
                                                                    <ShowInTerminal>true</ShowInTerminal>
                                                                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                                    <ShowInInventory>true</ShowInInventory>
                                                                    <Enabled>true</Enabled>
                                                                    <Toolbar>
                                                                      <ToolbarType>Character</ToolbarType>
                                                                      <SelectedSlot xsi:nil="true" />
                                                                      <Slots>
                                                                        <Slot>
                                                                          <Index>0</Index>
                                                                          <Item />
                                                                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                            <Action>OnOff</Action>
                                                                            <GridEntityId>0</GridEntityId>
                                                                            <BlockEntityId>103463945053129971</BlockEntityId>
                                                                            <GroupName>VC SC Lights</GroupName>
                                                                          </Data>
                                                                        </Slot>
                                                                      </Slots>
                                                                    </Toolbar>
                                                                    <AnyoneCanUse>false</AnyoneCanUse>
                                                                    <CustomButtonNames>
                                                                      <dictionary>
                                                                        <item>
                                                                          <Key>0</Key>
                                                                          <Value>VC SC Lights</Value>
                                                                        </item>
                                                                      </dictionary>
                                                                    </CustomButtonNames>
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="-1" y="12" z="3" />
                                                                    <BlockOrientation Forward="Forward" Up="Down" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="1" y="12" z="10" />
                                                                    <BlockOrientation Forward="Up" Up="Backward" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                                    <Min x="-1" y="12" z="10" />
                                                                    <BlockOrientation Forward="Up" Up="Backward" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="2" y="15" z="9" />
                                                                    <BlockOrientation Forward="Left" Up="Up" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="-2" y="14" z="6" />
                                                                    <BlockOrientation Forward="Down" Up="Forward" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                                    <Min x="-2" y="14" z="5" />
                                                                    <BlockOrientation Forward="Down" Up="Backward" />
                                                                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <EntityId>132389170823135809</EntityId>
                                                                    <Min x="-3" y="13" z="6" />
                                                                    <IntegrityPercent>0.7333333</IntegrityPercent>
                                                                    <BuildPercent>0.7333333</BuildPercent>
                                                                    <BlockOrientation Forward="Right" Up="Up" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                                    <EntityId>134543731895331512</EntityId>
                                                                    <Min x="-3" y="13" z="5" />
                                                                    <IntegrityPercent>0.7333333</IntegrityPercent>
                                                                    <BuildPercent>0.7333333</BuildPercent>
                                                                    <BlockOrientation Forward="Right" Up="Backward" />
                                                                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                                  </MyObjectBuilder_CubeBlock>
                                                                </CubeBlocks>
                                                                <XMirroxPlane x="0" y="14" z="1" />
                                                                <ConveyorLines>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="-1" y="14" z="6" />
                                                                    <StartDirection>Backward</StartDirection>
                                                                    <EndPosition x="-1" y="14" z="7" />
                                                                    <EndDirection>Forward</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="1" y="14" z="6" />
                                                                    <StartDirection>Backward</StartDirection>
                                                                    <EndPosition x="1" y="14" z="7" />
                                                                    <EndDirection>Forward</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="0" y="13" z="4" />
                                                                    <StartDirection>Forward</StartDirection>
                                                                    <EndPosition x="0" y="13" z="3" />
                                                                    <EndDirection>Backward</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="0" y="13" z="2" />
                                                                    <StartDirection>Backward</StartDirection>
                                                                    <EndPosition x="0" y="13" z="3" />
                                                                    <EndDirection>Forward</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="1" y="13" z="3" />
                                                                    <StartDirection>Left</StartDirection>
                                                                    <EndPosition x="0" y="13" z="3" />
                                                                    <EndDirection>Right</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="-1" y="13" z="3" />
                                                                    <StartDirection>Right</StartDirection>
                                                                    <EndPosition x="0" y="13" z="3" />
                                                                    <EndDirection>Left</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="0" y="14" z="9" />
                                                                    <StartDirection>Backward</StartDirection>
                                                                    <EndPosition x="0" y="14" z="10" />
                                                                    <EndDirection>Forward</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="0" y="13" z="0" />
                                                                    <StartDirection>Backward</StartDirection>
                                                                    <EndPosition x="0" y="13" z="1" />
                                                                    <EndDirection>Forward</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                  <MyObjectBuilder_ConveyorLine>
                                                                    <StartPosition x="0" y="13" z="2" />
                                                                    <StartDirection>Forward</StartDirection>
                                                                    <EndPosition x="0" y="13" z="1" />
                                                                    <EndDirection>Backward</EndDirection>
                                                                    <Sections />
                                                                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                                  </MyObjectBuilder_ConveyorLine>
                                                                </ConveyorLines>
                                                                <BlockGroups>
                                                                  <MyObjectBuilder_BlockGroup>
                                                                    <Name>VC SC Lights</Name>
                                                                    <Blocks>
                                                                      <Vector3I>
                                                                        <X>-2</X>
                                                                        <Y>13</Y>
                                                                        <Z>3</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>2</X>
                                                                        <Y>13</Y>
                                                                        <Z>3</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>-2</X>
                                                                        <Y>14</Y>
                                                                        <Z>10</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>2</X>
                                                                        <Y>14</Y>
                                                                        <Z>10</Z>
                                                                      </Vector3I>
                                                                    </Blocks>
                                                                  </MyObjectBuilder_BlockGroup>
                                                                  <MyObjectBuilder_BlockGroup>
                                                                    <Name>VC SC Wheels</Name>
                                                                    <Blocks>
                                                                      <Vector3I>
                                                                        <X>-1</X>
                                                                        <Y>12</Y>
                                                                        <Z>1</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>1</X>
                                                                        <Y>12</Y>
                                                                        <Z>1</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>-1</X>
                                                                        <Y>12</Y>
                                                                        <Z>9</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>1</X>
                                                                        <Y>12</Y>
                                                                        <Z>9</Z>
                                                                      </Vector3I>
                                                                    </Blocks>
                                                                  </MyObjectBuilder_BlockGroup>
                                                                  <MyObjectBuilder_BlockGroup>
                                                                    <Name>VC SC Artificial Mass</Name>
                                                                    <Blocks>
                                                                      <Vector3I>
                                                                        <X>-1</X>
                                                                        <Y>12</Y>
                                                                        <Z>8</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>1</X>
                                                                        <Y>12</Y>
                                                                        <Z>8</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>-1</X>
                                                                        <Y>12</Y>
                                                                        <Z>2</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>1</X>
                                                                        <Y>12</Y>
                                                                        <Z>2</Z>
                                                                      </Vector3I>
                                                                    </Blocks>
                                                                  </MyObjectBuilder_BlockGroup>
                                                                  <MyObjectBuilder_BlockGroup>
                                                                    <Name>VC SC Reactors</Name>
                                                                    <Blocks>
                                                                      <Vector3I>
                                                                        <X>1</X>
                                                                        <Y>13</Y>
                                                                        <Z>3</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>-1</X>
                                                                        <Y>13</Y>
                                                                        <Z>3</Z>
                                                                      </Vector3I>
                                                                    </Blocks>
                                                                  </MyObjectBuilder_BlockGroup>
                                                                  <MyObjectBuilder_BlockGroup>
                                                                    <Name>Thrusters</Name>
                                                                    <Blocks>
                                                                      <Vector3I>
                                                                        <X>-2</X>
                                                                        <Y>14</Y>
                                                                        <Z>7</Z>
                                                                      </Vector3I>
                                                                      <Vector3I>
                                                                        <X>2</X>
                                                                        <Y>14</Y>
                                                                        <Z>7</Z>
                                                                      </Vector3I>
                                                                    </Blocks>
                                                                  </MyObjectBuilder_BlockGroup>
                                                                </BlockGroups>
                                                                <Handbrake>true</Handbrake>
                                                                <DisplayName>VC Scout Car</DisplayName>
                                                                <OxygenAmount>
                                                                  <float>0</float>
                                                                  <float>0</float>
                                                                </OxygenAmount>
                                                                <DestructibleBlocks>true</DestructibleBlocks>
                                                                <CreatePhysics>false</CreatePhysics>
                                                                <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                                                                <IsRespawnGrid>false</IsRespawnGrid>
                                                                <LocalCoordSys>0</LocalCoordSys>
                                                                <TargetingTargets />
                                                              </ProjectedGrid>
                                                              <ProjectionOffset>
                                                                <X>-2</X>
                                                                <Y>-13</Y>
                                                                <Z>-4</Z>
                                                              </ProjectionOffset>
                                                              <ProjectionRotation>
                                                                <X>0</X>
                                                                <Y>0</Y>
                                                                <Z>0</Z>
                                                              </ProjectionRotation>
                                                              <KeepProjection>true</KeepProjection>
                                                              <ShowOnlyBuildable>false</ShowOnlyBuildable>
                                                              <InstantBuildingEnabled>false</InstantBuildingEnabled>
                                                              <MaxNumberOfProjections>5</MaxNumberOfProjections>
                                                              <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                                                              <ProjectionsRemaining>0</ProjectionsRemaining>
                                                              <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                              <Min x="-2" y="13" z="6" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                                              <SubtypeName>TimerBlockSmall</SubtypeName>
                                                              <EntityId>122703121239105300</EntityId>
                                                              <Min x="2" y="13" z="6" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC LCD Timer Block</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <Toolbar>
                                                                <ToolbarType>Character</ToolbarType>
                                                                <SelectedSlot xsi:nil="true" />
                                                                <Slots>
                                                                  <Slot>
                                                                    <Index>0</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>Run</Action>
                                                                      <Parameters>
                                                                        <MyObjectBuilder_ToolbarItemActionParameter>
                                                                          <TypeCode>String</TypeCode>
                                                                          <Value />
                                                                        </MyObjectBuilder_ToolbarItemActionParameter>
                                                                      </Parameters>
                                                                      <BlockEntityId>91262686404027585</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>1</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>Start</Action>
                                                                      <BlockEntityId>122703121239105300</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                  <Slot>
                                                                    <Index>2</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                      <Action>TriggerNow</Action>
                                                                      <BlockEntityId>122703121239105300</BlockEntityId>
                                                                    </Data>
                                                                  </Slot>
                                                                </Slots>
                                                              </Toolbar>
                                                              <JustTriggered>true</JustTriggered>
                                                              <Delay>1100</Delay>
                                                              <CurrentTime>0</CurrentTime>
                                                              <IsCountingDown>false</IsCountingDown>
                                                              <Silent>true</Silent>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                              <EntityId>110321338968217673</EntityId>
                                                              <Min x="-2" y="13" z="7" />
                                                              <BlockOrientation Forward="Up" Up="Backward" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                              <EntityId>107970776068226297</EntityId>
                                                              <Min x="2" y="13" z="7" />
                                                              <BlockOrientation Forward="Up" Up="Backward" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="3" y="14" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                              <Min x="2" y="15" z="10" />
                                                              <BlockOrientation Forward="Down" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                                                              <SubtypeName>SmallProgrammableBlock</SubtypeName>
                                                              <EntityId>91262686404027585</EntityId>
                                                              <Min x="-2" y="14" z="8" />
                                                              <BlockOrientation Forward="Right" Up="Up" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC LCD Programmable block</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                                                              <Storage />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="0" y="12" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="0" y="12" z="8" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                              <Min x="0" y="12" z="9" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                              <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                              <EntityId>75079369983703790</EntityId>
                                                              <Min x="-2" y="12" z="9" />
                                                              <BlockOrientation Forward="Up" Up="Left" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <TopBlockId xsi:nil="true" />
                                                              <ShareInertiaTensor>false</ShareInertiaTensor>
                                                              <SafetyDetach xsi:nil="true" />
                                                              <RotorEntityId>111413487927485134</RotorEntityId>
                                                              <WeldedEntityId xsi:nil="true" />
                                                              <SteerAngle>0</SteerAngle>
                                                              <Damping>0.012</Damping>
                                                              <Strength>0.502000034</Strength>
                                                              <Propulsion>true</Propulsion>
                                                              <Friction>1.6</Friction>
                                                              <Power>0.7</Power>
                                                              <Height>-0.0880000442</Height>
                                                              <MaxSteerAngle>0.32</MaxSteerAngle>
                                                              <InvertSteer>false</InvertSteer>
                                                              <InvertPropulsion>false</InvertPropulsion>
                                                              <SpeedLimit>360</SpeedLimit>
                                                              <PowerNew>0.6</PowerNew>
                                                              <StrengthNew>0.1</StrengthNew>
                                                              <FrictionNew xsi:nil="true" />
                                                              <AirShockEnabled>true</AirShockEnabled>
                                                              <BrakingEnabled>true</BrakingEnabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                              <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                              <EntityId>111888116648313126</EntityId>
                                                              <Min x="1" y="12" z="9" />
                                                              <BlockOrientation Forward="Up" Up="Right" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <TopBlockId xsi:nil="true" />
                                                              <ShareInertiaTensor>false</ShareInertiaTensor>
                                                              <SafetyDetach xsi:nil="true" />
                                                              <RotorEntityId>92722096265335128</RotorEntityId>
                                                              <WeldedEntityId xsi:nil="true" />
                                                              <SteerAngle>0</SteerAngle>
                                                              <Damping>0.012</Damping>
                                                              <Strength>0.502000034</Strength>
                                                              <Propulsion>true</Propulsion>
                                                              <Friction>1.6</Friction>
                                                              <Power>0.7</Power>
                                                              <Height>-0.0880000442</Height>
                                                              <MaxSteerAngle>0.32</MaxSteerAngle>
                                                              <InvertSteer>false</InvertSteer>
                                                              <InvertPropulsion>false</InvertPropulsion>
                                                              <SpeedLimit>360</SpeedLimit>
                                                              <PowerNew>0.6</PowerNew>
                                                              <StrengthNew>0.1</StrengthNew>
                                                              <FrictionNew xsi:nil="true" />
                                                              <AirShockEnabled>true</AirShockEnabled>
                                                              <BrakingEnabled>true</BrakingEnabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                                                              <SubtypeName>SmallBlockOreDetector</SubtypeName>
                                                              <EntityId>77752390833825445</EntityId>
                                                              <Min x="2" y="14" z="5" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Ore Detector </CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <DetectionRadius>50</DetectionRadius>
                                                              <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <EntityId>125376034413347981</EntityId>
                                                              <Min x="-2" y="12" z="6" />
                                                              <IntegrityPercent>0.399999946</IntegrityPercent>
                                                              <BuildPercent>0.399999946</BuildPercent>
                                                              <BlockOrientation Forward="Left" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="1" y="12" z="0" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                                                              <SubtypeName>SmallWheel3x3</SubtypeName>
                                                              <EntityId>94372379406577136</EntityId>
                                                              <Min x="3" y="12" z="4" />
                                                              <BlockOrientation Forward="Forward" Up="Right" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <YieldLastComponent>true</YieldLastComponent>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <EntityId>77036198688830252</EntityId>
                                                              <Min x="-3" y="12" z="6" />
                                                              <IntegrityPercent>0.3600001</IntegrityPercent>
                                                              <BuildPercent>0.3600001</BuildPercent>
                                                              <BlockOrientation Forward="Right" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                              <EntityId>79472406576951192</EntityId>
                                                              <Min x="-1" y="13" z="3" />
                                                              <BlockOrientation Forward="Right" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <ComponentContainer>
                                                                <Components>
                                                                  <ComponentData>
                                                                    <TypeId>MyInventoryBase</TypeId>
                                                                    <Component xsi:type="MyObjectBuilder_Inventory">
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>0.125</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Component>
                                                                  </ComponentData>
                                                                </Components>
                                                              </ComponentContainer>
                                                              <CustomName>VC SC Small Reactor 2</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <Inventory>
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>0.125</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Inventory>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                              <Min x="1" y="13" z="2" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                              <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                              <EntityId>93945518889753837</EntityId>
                                                              <Min x="-2" y="14" z="10" />
                                                              <BlockOrientation Forward="Backward" Up="Up" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Tail Light 1</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>false</Enabled>
                                                              <Radius>1</Radius>
                                                              <ReflectorRadius>20</ReflectorRadius>
                                                              <ColorGreen>0.654902</ColorGreen>
                                                              <ColorBlue>0.4117647</ColorBlue>
                                                              <Falloff>1</Falloff>
                                                              <Intensity>3</Intensity>
                                                              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                              <BlinkLenght>10</BlinkLenght>
                                                              <BlinkOffset>0</BlinkOffset>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                              <Min x="1" y="13" z="1" />
                                                              <BlockOrientation Forward="Backward" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="-1" y="12" z="4" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="1" y="12" z="4" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="1" y="12" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="-1" y="12" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                              <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                              <EntityId>143395308949836243</EntityId>
                                                              <Min x="-2" y="13" z="3" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Headlight 1</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>false</Enabled>
                                                              <Radius>5</Radius>
                                                              <ReflectorRadius>120</ReflectorRadius>
                                                              <Falloff>1</Falloff>
                                                              <Intensity>4</Intensity>
                                                              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                              <BlinkLenght>10</BlinkLenght>
                                                              <BlinkOffset>0</BlinkOffset>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="-1" y="12" z="6" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="1" y="12" z="6" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="3" y="15" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                              <SubtypeName>VirtualMassSmall</SubtypeName>
                                                              <EntityId>110720312769227031</EntityId>
                                                              <Min x="-1" y="12" z="8" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Artificial Mass</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                              <SubtypeName>VirtualMassSmall</SubtypeName>
                                                              <EntityId>102503031940131314</EntityId>
                                                              <Min x="1" y="12" z="8" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Artificial Mass</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="-3" y="15" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="3" y="13" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                              <SubtypeName>VirtualMassSmall</SubtypeName>
                                                              <EntityId>106306961693882386</EntityId>
                                                              <Min x="-1" y="12" z="2" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Artificial Mass</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                              <SubtypeName>VirtualMassSmall</SubtypeName>
                                                              <EntityId>80498847362958693</EntityId>
                                                              <Min x="1" y="12" z="2" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Artificial Mass</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>false</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                                                              <SubtypeName>OxygenTankSmall</SubtypeName>
                                                              <EntityId>137527169899277054</EntityId>
                                                              <Min x="-1" y="13" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Up" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <ComponentContainer>
                                                                <Components>
                                                                  <ComponentData>
                                                                    <TypeId>MyInventoryBase</TypeId>
                                                                    <Component xsi:type="MyObjectBuilder_Inventory">
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>4</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Component>
                                                                  </ComponentData>
                                                                </Components>
                                                              </ComponentContainer>
                                                              <CustomName>VC SC Oxygen Tank</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <IsStockpiling>false</IsStockpiling>
                                                              <FilledRatio>0.0058931415</FilledRatio>
                                                              <Inventory>
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>4</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Inventory>
                                                              <AutoRefill>false</AutoRefill>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                              <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                              <EntityId>99477554607167730</EntityId>
                                                              <Min x="2" y="13" z="3" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <CustomName>VC SC Headlight 2</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>false</Enabled>
                                                              <Radius>5</Radius>
                                                              <ReflectorRadius>120</ReflectorRadius>
                                                              <Falloff>1</Falloff>
                                                              <Intensity>4</Intensity>
                                                              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                              <BlinkLenght>10</BlinkLenght>
                                                              <BlinkOffset>0</BlinkOffset>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                              <Min x="-2" y="15" z="10" />
                                                              <BlockOrientation Forward="Right" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="-3" y="14" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="-3" y="13" z="7" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                                                              <SubtypeName>ConnectorMedium</SubtypeName>
                                                              <EntityId>141413214648781651</EntityId>
                                                              <Min x="-1" y="13" z="10" />
                                                              <BlockOrientation Forward="Backward" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <DeformationRatio>0.5</DeformationRatio>
                                                              <ComponentContainer>
                                                                <Components>
                                                                  <ComponentData>
                                                                    <TypeId>MyInventoryBase</TypeId>
                                                                    <Component xsi:type="MyObjectBuilder_Inventory">
                                                                      <Items />
                                                                      <nextItemId>0</nextItemId>
                                                                      <Volume>1.152</Volume>
                                                                      <Mass>9223372036854.775807</Mass>
                                                                      <MaxItemCount>2147483647</MaxItemCount>
                                                                      <Size xsi:nil="true" />
                                                                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                                    </Component>
                                                                  </ComponentData>
                                                                </Components>
                                                              </ComponentContainer>
                                                              <CustomName>VC SC Connector</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <Inventory>
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>1.152</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Inventory>
                                                              <MasterToSlaveTransform xsi:nil="true" />
                                                              <MasterToSlaveGrid xsi:nil="true" />
                                                              <IsMaster>true</IsMaster>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Beacon">
                                                              <SubtypeName>SmallBlockBeacon</SubtypeName>
                                                              <EntityId>114103032198774760</EntityId>
                                                              <Min x="2" y="14" z="8" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Beacon</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <BroadcastRadius>10000</BroadcastRadius>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="3" y="14" z="8" />
                                                              <BlockOrientation Forward="Forward" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="-3" y="14" z="10" />
                                                              <BlockOrientation Forward="Forward" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                                                              <SubtypeName>SmallCameraBlock</SubtypeName>
                                                              <EntityId>137506534290951170</EntityId>
                                                              <Min x="0" y="12" z="10" />
                                                              <BlockOrientation Forward="Backward" Up="Up" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Camera</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <IsActive>false</IsActive>
                                                              <Fov>1.04719758</Fov>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="3" y="14" z="10" />
                                                              <BlockOrientation Forward="Forward" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                                                              <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                                                              <EntityId>121397424478587525</EntityId>
                                                              <Min x="-2" y="14" z="9" />
                                                              <BlockOrientation Forward="Up" Up="Left" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Antenna </CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <BroadcastRadius>500</BroadcastRadius>
                                                              <ShowShipName>false</ShowShipName>
                                                              <EnableBroadcasting>true</EnableBroadcasting>
                                                              <AttachedPB>0</AttachedPB>
                                                              <IgnoreAllied>false</IgnoreAllied>
                                                              <IgnoreOther>true</IgnoreOther>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="-3" y="15" z="8" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <Min x="3" y="15" z="8" />
                                                              <BlockOrientation Forward="Forward" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                              <Min x="-2" y="15" z="8" />
                                                              <BlockOrientation Forward="Backward" Up="Right" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                              <Min x="2" y="15" z="8" />
                                                              <BlockOrientation Forward="Backward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <EntityId>126009010628513829</EntityId>
                                                              <Min x="-3" y="12" z="5" />
                                                              <IntegrityPercent>0.3600001</IntegrityPercent>
                                                              <BuildPercent>0.3600001</BuildPercent>
                                                              <BlockOrientation Forward="Right" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                              <EntityId>114586110093073711</EntityId>
                                                              <Min x="-2" y="12" z="5" />
                                                              <IntegrityPercent>0.399999946</IntegrityPercent>
                                                              <BuildPercent>0.399999946</BuildPercent>
                                                              <BlockOrientation Forward="Left" Up="Down" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="1" y="12" z="3" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                                                              <SubtypeName>ButtonPanelSmall</SubtypeName>
                                                              <EntityId>92704970137405963</EntityId>
                                                              <Min x="-3" y="13" z="4" />
                                                              <BlockOrientation Forward="Forward" Up="Left" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                              <ShareMode>All</ShareMode>
                                                              <CustomName>VC SC Button Panel</CustomName>
                                                              <ShowOnHUD>false</ShowOnHUD>
                                                              <ShowInTerminal>true</ShowInTerminal>
                                                              <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                              <ShowInInventory>true</ShowInInventory>
                                                              <Enabled>true</Enabled>
                                                              <Toolbar>
                                                                <ToolbarType>Character</ToolbarType>
                                                                <SelectedSlot xsi:nil="true" />
                                                                <Slots>
                                                                  <Slot>
                                                                    <Index>0</Index>
                                                                    <Item />
                                                                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                      <Action>OnOff</Action>
                                                                      <GridEntityId>0</GridEntityId>
                                                                      <BlockEntityId>92704970137405963</BlockEntityId>
                                                                      <GroupName>VC SC Lights</GroupName>
                                                                    </Data>
                                                                  </Slot>
                                                                </Slots>
                                                              </Toolbar>
                                                              <AnyoneCanUse>false</AnyoneCanUse>
                                                              <CustomButtonNames>
                                                                <dictionary>
                                                                  <item>
                                                                    <Key>0</Key>
                                                                    <Value>VC SC Lights</Value>
                                                                  </item>
                                                                </dictionary>
                                                              </CustomButtonNames>
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="-1" y="12" z="3" />
                                                              <BlockOrientation Forward="Forward" Up="Down" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="1" y="12" z="10" />
                                                              <BlockOrientation Forward="Up" Up="Backward" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                              <Min x="-1" y="12" z="10" />
                                                              <BlockOrientation Forward="Up" Up="Backward" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="2" y="15" z="9" />
                                                              <BlockOrientation Forward="Left" Up="Up" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="-2" y="14" z="6" />
                                                              <BlockOrientation Forward="Down" Up="Forward" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                              <Min x="-2" y="14" z="5" />
                                                              <BlockOrientation Forward="Down" Up="Backward" />
                                                              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <EntityId>133050793220462807</EntityId>
                                                              <Min x="-3" y="13" z="6" />
                                                              <IntegrityPercent>0.7333333</IntegrityPercent>
                                                              <BuildPercent>0.7333333</BuildPercent>
                                                              <BlockOrientation Forward="Right" Up="Up" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                              <EntityId>116829688030837711</EntityId>
                                                              <Min x="-3" y="13" z="5" />
                                                              <IntegrityPercent>0.7333333</IntegrityPercent>
                                                              <BuildPercent>0.7333333</BuildPercent>
                                                              <BlockOrientation Forward="Right" Up="Backward" />
                                                              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                            </MyObjectBuilder_CubeBlock>
                                                          </CubeBlocks>
                                                          <XMirroxPlane x="0" y="14" z="1" />
                                                          <ConveyorLines>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="-1" y="14" z="6" />
                                                              <StartDirection>Backward</StartDirection>
                                                              <EndPosition x="-1" y="14" z="7" />
                                                              <EndDirection>Forward</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="1" y="14" z="6" />
                                                              <StartDirection>Backward</StartDirection>
                                                              <EndPosition x="1" y="14" z="7" />
                                                              <EndDirection>Forward</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="0" y="13" z="4" />
                                                              <StartDirection>Forward</StartDirection>
                                                              <EndPosition x="0" y="13" z="3" />
                                                              <EndDirection>Backward</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="0" y="13" z="2" />
                                                              <StartDirection>Backward</StartDirection>
                                                              <EndPosition x="0" y="13" z="3" />
                                                              <EndDirection>Forward</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="1" y="13" z="3" />
                                                              <StartDirection>Left</StartDirection>
                                                              <EndPosition x="0" y="13" z="3" />
                                                              <EndDirection>Right</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="-1" y="13" z="3" />
                                                              <StartDirection>Right</StartDirection>
                                                              <EndPosition x="0" y="13" z="3" />
                                                              <EndDirection>Left</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="0" y="14" z="9" />
                                                              <StartDirection>Backward</StartDirection>
                                                              <EndPosition x="0" y="14" z="10" />
                                                              <EndDirection>Forward</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="0" y="13" z="0" />
                                                              <StartDirection>Backward</StartDirection>
                                                              <EndPosition x="0" y="13" z="1" />
                                                              <EndDirection>Forward</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                            <MyObjectBuilder_ConveyorLine>
                                                              <StartPosition x="0" y="13" z="2" />
                                                              <StartDirection>Forward</StartDirection>
                                                              <EndPosition x="0" y="13" z="1" />
                                                              <EndDirection>Backward</EndDirection>
                                                              <Sections />
                                                              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                            </MyObjectBuilder_ConveyorLine>
                                                          </ConveyorLines>
                                                          <BlockGroups>
                                                            <MyObjectBuilder_BlockGroup>
                                                              <Name>VC SC Lights</Name>
                                                              <Blocks>
                                                                <Vector3I>
                                                                  <X>-2</X>
                                                                  <Y>13</Y>
                                                                  <Z>3</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>2</X>
                                                                  <Y>13</Y>
                                                                  <Z>3</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>-2</X>
                                                                  <Y>14</Y>
                                                                  <Z>10</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>2</X>
                                                                  <Y>14</Y>
                                                                  <Z>10</Z>
                                                                </Vector3I>
                                                              </Blocks>
                                                            </MyObjectBuilder_BlockGroup>
                                                            <MyObjectBuilder_BlockGroup>
                                                              <Name>VC SC Wheels</Name>
                                                              <Blocks>
                                                                <Vector3I>
                                                                  <X>-1</X>
                                                                  <Y>12</Y>
                                                                  <Z>1</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>1</X>
                                                                  <Y>12</Y>
                                                                  <Z>1</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>-1</X>
                                                                  <Y>12</Y>
                                                                  <Z>9</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>1</X>
                                                                  <Y>12</Y>
                                                                  <Z>9</Z>
                                                                </Vector3I>
                                                              </Blocks>
                                                            </MyObjectBuilder_BlockGroup>
                                                            <MyObjectBuilder_BlockGroup>
                                                              <Name>VC SC Artificial Mass</Name>
                                                              <Blocks>
                                                                <Vector3I>
                                                                  <X>-1</X>
                                                                  <Y>12</Y>
                                                                  <Z>8</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>1</X>
                                                                  <Y>12</Y>
                                                                  <Z>8</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>-1</X>
                                                                  <Y>12</Y>
                                                                  <Z>2</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>1</X>
                                                                  <Y>12</Y>
                                                                  <Z>2</Z>
                                                                </Vector3I>
                                                              </Blocks>
                                                            </MyObjectBuilder_BlockGroup>
                                                            <MyObjectBuilder_BlockGroup>
                                                              <Name>VC SC Reactors</Name>
                                                              <Blocks>
                                                                <Vector3I>
                                                                  <X>1</X>
                                                                  <Y>13</Y>
                                                                  <Z>3</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>-1</X>
                                                                  <Y>13</Y>
                                                                  <Z>3</Z>
                                                                </Vector3I>
                                                              </Blocks>
                                                            </MyObjectBuilder_BlockGroup>
                                                            <MyObjectBuilder_BlockGroup>
                                                              <Name>Thrusters</Name>
                                                              <Blocks>
                                                                <Vector3I>
                                                                  <X>-2</X>
                                                                  <Y>14</Y>
                                                                  <Z>7</Z>
                                                                </Vector3I>
                                                                <Vector3I>
                                                                  <X>2</X>
                                                                  <Y>14</Y>
                                                                  <Z>7</Z>
                                                                </Vector3I>
                                                              </Blocks>
                                                            </MyObjectBuilder_BlockGroup>
                                                          </BlockGroups>
                                                          <Handbrake>true</Handbrake>
                                                          <DisplayName>VC Scout Car</DisplayName>
                                                          <OxygenAmount>
                                                            <float>0</float>
                                                            <float>0</float>
                                                          </OxygenAmount>
                                                          <DestructibleBlocks>true</DestructibleBlocks>
                                                          <CreatePhysics>false</CreatePhysics>
                                                          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                                                          <IsRespawnGrid>false</IsRespawnGrid>
                                                          <LocalCoordSys>0</LocalCoordSys>
                                                          <TargetingTargets />
                                                        </ProjectedGrid>
                                                        <ProjectionOffset>
                                                          <X>-2</X>
                                                          <Y>-13</Y>
                                                          <Z>-4</Z>
                                                        </ProjectionOffset>
                                                        <ProjectionRotation>
                                                          <X>0</X>
                                                          <Y>0</Y>
                                                          <Z>0</Z>
                                                        </ProjectionRotation>
                                                        <KeepProjection>true</KeepProjection>
                                                        <ShowOnlyBuildable>false</ShowOnlyBuildable>
                                                        <InstantBuildingEnabled>false</InstantBuildingEnabled>
                                                        <MaxNumberOfProjections>5</MaxNumberOfProjections>
                                                        <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                                                        <ProjectionsRemaining>0</ProjectionsRemaining>
                                                        <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="2" y="15" z="9" />
                                                        <BlockOrientation Forward="Left" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                                        <SubtypeName>TimerBlockSmall</SubtypeName>
                                                        <EntityId>80110553344840281</EntityId>
                                                        <Min x="2" y="13" z="6" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC LCD Timer Block</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Toolbar>
                                                          <ToolbarType>Character</ToolbarType>
                                                          <SelectedSlot xsi:nil="true" />
                                                          <Slots>
                                                            <Slot>
                                                              <Index>0</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>Run</Action>
                                                                <Parameters>
                                                                  <MyObjectBuilder_ToolbarItemActionParameter>
                                                                    <TypeCode>String</TypeCode>
                                                                    <Value />
                                                                  </MyObjectBuilder_ToolbarItemActionParameter>
                                                                </Parameters>
                                                                <BlockEntityId>143016164039965236</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>1</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>Start</Action>
                                                                <BlockEntityId>80110553344840281</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                            <Slot>
                                                              <Index>2</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                                <Action>TriggerNow</Action>
                                                                <BlockEntityId>80110553344840281</BlockEntityId>
                                                              </Data>
                                                            </Slot>
                                                          </Slots>
                                                        </Toolbar>
                                                        <JustTriggered>true</JustTriggered>
                                                        <Delay>1100</Delay>
                                                        <CurrentTime>0</CurrentTime>
                                                        <IsCountingDown>false</IsCountingDown>
                                                        <Silent>true</Silent>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                        <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                        <EntityId>102717128678201990</EntityId>
                                                        <Min x="-2" y="13" z="7" />
                                                        <BlockOrientation Forward="Up" Up="Backward" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                        <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                        <EntityId>142462391160228548</EntityId>
                                                        <Min x="2" y="13" z="7" />
                                                        <BlockOrientation Forward="Up" Up="Backward" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="3" y="14" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                        <Min x="2" y="15" z="10" />
                                                        <BlockOrientation Forward="Down" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                                                        <SubtypeName>SmallProgrammableBlock</SubtypeName>
                                                        <EntityId>143016164039965236</EntityId>
                                                        <Min x="-2" y="14" z="8" />
                                                        <BlockOrientation Forward="Right" Up="Up" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC LCD Programmable block</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                                                        <Storage />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="0" y="12" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="0" y="12" z="8" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                        <Min x="0" y="12" z="9" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                        <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                        <EntityId>110504739426512747</EntityId>
                                                        <Min x="-2" y="12" z="9" />
                                                        <BlockOrientation Forward="Up" Up="Left" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <TopBlockId xsi:nil="true" />
                                                        <ShareInertiaTensor>false</ShareInertiaTensor>
                                                        <SafetyDetach xsi:nil="true" />
                                                        <RotorEntityId>112118245495849276</RotorEntityId>
                                                        <WeldedEntityId xsi:nil="true" />
                                                        <SteerAngle>0</SteerAngle>
                                                        <Damping>0.75</Damping>
                                                        <Strength>0.18</Strength>
                                                        <Propulsion>true</Propulsion>
                                                        <Friction>2.4</Friction>
                                                        <Power>0.55</Power>
                                                        <Height>-0.32</Height>
                                                        <MaxSteerAngle>0.32</MaxSteerAngle>
                                                        <InvertSteer>false</InvertSteer>
                                                        <InvertPropulsion>false</InvertPropulsion>
                                                        <SpeedLimit>110</SpeedLimit>
                                                        <PowerNew>0.6</PowerNew>
                                                        <StrengthNew>0.1</StrengthNew>
                                                        <FrictionNew xsi:nil="true" />
                                                        <AirShockEnabled>true</AirShockEnabled>
                                                        <BrakingEnabled>true</BrakingEnabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                        <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                        <EntityId>114401821043229247</EntityId>
                                                        <Min x="1" y="12" z="9" />
                                                        <BlockOrientation Forward="Up" Up="Right" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <TopBlockId xsi:nil="true" />
                                                        <ShareInertiaTensor>false</ShareInertiaTensor>
                                                        <SafetyDetach xsi:nil="true" />
                                                        <RotorEntityId>103830898082669221</RotorEntityId>
                                                        <WeldedEntityId xsi:nil="true" />
                                                        <SteerAngle>0</SteerAngle>
                                                        <Damping>0.75</Damping>
                                                        <Strength>0.18</Strength>
                                                        <Propulsion>true</Propulsion>
                                                        <Friction>2.4</Friction>
                                                        <Power>0.55</Power>
                                                        <Height>-0.32</Height>
                                                        <MaxSteerAngle>0.32</MaxSteerAngle>
                                                        <InvertSteer>false</InvertSteer>
                                                        <InvertPropulsion>false</InvertPropulsion>
                                                        <SpeedLimit>110</SpeedLimit>
                                                        <PowerNew>0.6</PowerNew>
                                                        <StrengthNew>0.1</StrengthNew>
                                                        <FrictionNew xsi:nil="true" />
                                                        <AirShockEnabled>true</AirShockEnabled>
                                                        <BrakingEnabled>true</BrakingEnabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                                                        <SubtypeName>SmallBlockOreDetector</SubtypeName>
                                                        <EntityId>94681784202740160</EntityId>
                                                        <Min x="2" y="14" z="5" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Ore Detector </CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <DetectionRadius>50</DetectionRadius>
                                                        <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <EntityId>111508410242169553</EntityId>
                                                        <Min x="-2" y="12" z="6" />
                                                        <IntegrityPercent>0.399999946</IntegrityPercent>
                                                        <BuildPercent>0.399999946</BuildPercent>
                                                        <BlockOrientation Forward="Left" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="1" y="12" z="0" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                                                        <SubtypeName>SmallWheel3x3</SubtypeName>
                                                        <EntityId>81725807163817916</EntityId>
                                                        <Min x="3" y="12" z="4" />
                                                        <BlockOrientation Forward="Forward" Up="Right" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <YieldLastComponent>true</YieldLastComponent>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <EntityId>114194904400598552</EntityId>
                                                        <Min x="-3" y="12" z="6" />
                                                        <IntegrityPercent>0.3600001</IntegrityPercent>
                                                        <BuildPercent>0.3600001</BuildPercent>
                                                        <BlockOrientation Forward="Right" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                        <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                        <EntityId>81569706183723344</EntityId>
                                                        <Min x="-1" y="13" z="3" />
                                                        <BlockOrientation Forward="Right" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <ComponentContainer>
                                                          <Components>
                                                            <ComponentData>
                                                              <TypeId>MyInventoryBase</TypeId>
                                                              <Component xsi:type="MyObjectBuilder_Inventory">
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>0.125</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Component>
                                                            </ComponentData>
                                                          </Components>
                                                        </ComponentContainer>
                                                        <CustomName>VC SC Small Reactor 2</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Inventory>
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>0.125</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Inventory>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                        <Min x="1" y="13" z="2" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                        <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                        <EntityId>80688197135106097</EntityId>
                                                        <Min x="-2" y="14" z="10" />
                                                        <BlockOrientation Forward="Backward" Up="Up" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <CustomName>VC SC Tail Light 1</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                        <Radius>1</Radius>
                                                        <ReflectorRadius>20</ReflectorRadius>
                                                        <ColorGreen>0.654902</ColorGreen>
                                                        <ColorBlue>0.4117647</ColorBlue>
                                                        <Falloff>1</Falloff>
                                                        <Intensity>3</Intensity>
                                                        <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                        <BlinkLenght>10</BlinkLenght>
                                                        <BlinkOffset>0</BlinkOffset>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                        <Min x="1" y="13" z="1" />
                                                        <BlockOrientation Forward="Backward" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="-1" y="12" z="4" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="1" y="12" z="4" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="1" y="12" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="-1" y="12" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="-1" y="12" z="6" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="1" y="12" z="6" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="3" y="15" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                        <SubtypeName>VirtualMassSmall</SubtypeName>
                                                        <EntityId>135997379476749013</EntityId>
                                                        <Min x="-1" y="12" z="8" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Artificial Mass</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                        <SubtypeName>VirtualMassSmall</SubtypeName>
                                                        <EntityId>91823971962003103</EntityId>
                                                        <Min x="1" y="12" z="8" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Artificial Mass</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="-3" y="15" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="3" y="13" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                        <SubtypeName>VirtualMassSmall</SubtypeName>
                                                        <EntityId>88764285678557285</EntityId>
                                                        <Min x="-1" y="12" z="2" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Artificial Mass</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                        <SubtypeName>VirtualMassSmall</SubtypeName>
                                                        <EntityId>107879176854773021</EntityId>
                                                        <Min x="1" y="12" z="2" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Artificial Mass</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                                                        <SubtypeName>OxygenTankSmall</SubtypeName>
                                                        <EntityId>136538053066660401</EntityId>
                                                        <Min x="-1" y="13" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Up" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <ComponentContainer>
                                                          <Components>
                                                            <ComponentData>
                                                              <TypeId>MyInventoryBase</TypeId>
                                                              <Component xsi:type="MyObjectBuilder_Inventory">
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>4</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Component>
                                                            </ComponentData>
                                                          </Components>
                                                        </ComponentContainer>
                                                        <CustomName>VC SC Oxygen Tank</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <IsStockpiling>false</IsStockpiling>
                                                        <FilledRatio>1</FilledRatio>
                                                        <Inventory>
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>4</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Inventory>
                                                        <AutoRefill>false</AutoRefill>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                        <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                        <EntityId>105041406048958711</EntityId>
                                                        <Min x="1" y="16" z="7" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <CustomName>VC SC Spotlight</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                        <Radius>5</Radius>
                                                        <ReflectorRadius>120</ReflectorRadius>
                                                        <Falloff>1</Falloff>
                                                        <Intensity>5</Intensity>
                                                        <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                        <BlinkLenght>10</BlinkLenght>
                                                        <BlinkOffset>0</BlinkOffset>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                        <Min x="-2" y="15" z="10" />
                                                        <BlockOrientation Forward="Right" Up="Up" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="-3" y="14" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="-3" y="13" z="7" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                                                        <SubtypeName>ConnectorMedium</SubtypeName>
                                                        <EntityId>104888058172808102</EntityId>
                                                        <Min x="-1" y="13" z="10" />
                                                        <BlockOrientation Forward="Backward" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <DeformationRatio>0.5</DeformationRatio>
                                                        <ComponentContainer>
                                                          <Components>
                                                            <ComponentData>
                                                              <TypeId>MyInventoryBase</TypeId>
                                                              <Component xsi:type="MyObjectBuilder_Inventory">
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>1.152</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Component>
                                                            </ComponentData>
                                                          </Components>
                                                        </ComponentContainer>
                                                        <CustomName>VC SC Connector</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Inventory>
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>1.152</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Inventory>
                                                        <MasterToSlaveTransform xsi:nil="true" />
                                                        <MasterToSlaveGrid xsi:nil="true" />
                                                        <IsMaster>true</IsMaster>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                        <Min x="2" y="14" z="9" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="3" y="14" z="8" />
                                                        <BlockOrientation Forward="Forward" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="-3" y="14" z="10" />
                                                        <BlockOrientation Forward="Forward" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                                                        <SubtypeName>SmallCameraBlock</SubtypeName>
                                                        <EntityId>81701996106928222</EntityId>
                                                        <Min x="0" y="12" z="10" />
                                                        <BlockOrientation Forward="Backward" Up="Up" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Camera</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <IsActive>false</IsActive>
                                                        <Fov>1.04719758</Fov>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                        <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                        <EntityId>132673725450006714</EntityId>
                                                        <Min x="2" y="14" z="10" />
                                                        <BlockOrientation Forward="Left" Up="Up" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <ComponentContainer>
                                                          <Components>
                                                            <ComponentData>
                                                              <TypeId>MyInventoryBase</TypeId>
                                                              <Component xsi:type="MyObjectBuilder_Inventory">
                                                                <Items />
                                                                <nextItemId>0</nextItemId>
                                                                <Volume>0.125</Volume>
                                                                <Mass>9223372036854.775807</Mass>
                                                                <MaxItemCount>2147483647</MaxItemCount>
                                                                <Size xsi:nil="true" />
                                                                <InventoryFlags>CanReceive</InventoryFlags>
                                                                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                              </Component>
                                                            </ComponentData>
                                                          </Components>
                                                        </ComponentContainer>
                                                        <CustomName>VC SC Small Reactor 3</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>false</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Inventory>
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>0.125</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Inventory>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                                                        <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                                                        <EntityId>76739881056699725</EntityId>
                                                        <Min x="-2" y="14" z="9" />
                                                        <BlockOrientation Forward="Up" Up="Left" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Antenna </CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <BroadcastRadius>500</BroadcastRadius>
                                                        <ShowShipName>true</ShowShipName>
                                                        <EnableBroadcasting>true</EnableBroadcasting>
                                                        <AttachedPB>0</AttachedPB>
                                                        <IgnoreAllied>false</IgnoreAllied>
                                                        <IgnoreOther>true</IgnoreOther>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="-3" y="15" z="8" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <Min x="3" y="15" z="8" />
                                                        <BlockOrientation Forward="Forward" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                        <Min x="-2" y="15" z="8" />
                                                        <BlockOrientation Forward="Backward" Up="Right" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                        <Min x="2" y="15" z="8" />
                                                        <BlockOrientation Forward="Backward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <EntityId>134460452847036223</EntityId>
                                                        <Min x="-3" y="12" z="5" />
                                                        <IntegrityPercent>0.3600001</IntegrityPercent>
                                                        <BuildPercent>0.3600001</BuildPercent>
                                                        <BlockOrientation Forward="Right" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                        <EntityId>108957173958458015</EntityId>
                                                        <Min x="-2" y="12" z="5" />
                                                        <IntegrityPercent>0.399999946</IntegrityPercent>
                                                        <BuildPercent>0.399999946</BuildPercent>
                                                        <BlockOrientation Forward="Left" Up="Down" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="1" y="12" z="3" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                                                        <SubtypeName>ButtonPanelSmall</SubtypeName>
                                                        <EntityId>130079683929600803</EntityId>
                                                        <Min x="-3" y="13" z="4" />
                                                        <BlockOrientation Forward="Forward" Up="Left" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <CustomName>VC SC Button Panel</CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                        <Toolbar>
                                                          <ToolbarType>Character</ToolbarType>
                                                          <SelectedSlot xsi:nil="true" />
                                                          <Slots>
                                                            <Slot>
                                                              <Index>0</Index>
                                                              <Item />
                                                              <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                                <Action>OnOff</Action>
                                                                <GridEntityId>0</GridEntityId>
                                                                <BlockEntityId>130079683929600803</BlockEntityId>
                                                                <GroupName>VC SC Lights</GroupName>
                                                              </Data>
                                                            </Slot>
                                                          </Slots>
                                                        </Toolbar>
                                                        <AnyoneCanUse>false</AnyoneCanUse>
                                                        <CustomButtonNames>
                                                          <dictionary>
                                                            <item>
                                                              <Key>0</Key>
                                                              <Value>VC SC Lights</Value>
                                                            </item>
                                                          </dictionary>
                                                        </CustomButtonNames>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="-1" y="12" z="3" />
                                                        <BlockOrientation Forward="Forward" Up="Down" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="1" y="12" z="10" />
                                                        <BlockOrientation Forward="Up" Up="Backward" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                        <Min x="-1" y="12" z="10" />
                                                        <BlockOrientation Forward="Up" Up="Backward" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
                                                        <SubtypeName>SmallBlockGyro</SubtypeName>
                                                        <EntityId>79303713771659346</EntityId>
                                                        <Min x="2" y="14" z="8" />
                                                        <BlockOrientation Forward="Down" Up="Right" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                        <ShareMode>All</ShareMode>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>true</Enabled>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="-2" y="14" z="6" />
                                                        <BlockOrientation Forward="Down" Up="Forward" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                        <Min x="-2" y="14" z="5" />
                                                        <BlockOrientation Forward="Down" Up="Backward" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <EntityId>99812333483007912</EntityId>
                                                        <Min x="-3" y="13" z="6" />
                                                        <IntegrityPercent>0.7333333</IntegrityPercent>
                                                        <BuildPercent>0.7333333</BuildPercent>
                                                        <BlockOrientation Forward="Right" Up="Up" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                        <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                        <EntityId>78721615699887776</EntityId>
                                                        <Min x="-3" y="13" z="5" />
                                                        <IntegrityPercent>0.7333333</IntegrityPercent>
                                                        <BuildPercent>0.7333333</BuildPercent>
                                                        <BlockOrientation Forward="Right" Up="Backward" />
                                                        <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                        <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                        <EntityId>143695298793322046</EntityId>
                                                        <Min x="-1" y="16" z="7" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <CustomName>VC SC Spotlight </CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                        <Radius>5</Radius>
                                                        <ReflectorRadius>120</ReflectorRadius>
                                                        <Falloff>1</Falloff>
                                                        <Intensity>5</Intensity>
                                                        <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                        <BlinkLenght>10</BlinkLenght>
                                                        <BlinkOffset>0</BlinkOffset>
                                                      </MyObjectBuilder_CubeBlock>
                                                      <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                        <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                        <EntityId>122246162077008428</EntityId>
                                                        <Min x="0" y="16" z="7" />
                                                        <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                        <CustomName>VC SC Spotlight </CustomName>
                                                        <ShowOnHUD>false</ShowOnHUD>
                                                        <ShowInTerminal>true</ShowInTerminal>
                                                        <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                        <ShowInInventory>true</ShowInInventory>
                                                        <Enabled>false</Enabled>
                                                        <Radius>5</Radius>
                                                        <ReflectorRadius>120</ReflectorRadius>
                                                        <Falloff>1</Falloff>
                                                        <Intensity>5</Intensity>
                                                        <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                        <BlinkLenght>10</BlinkLenght>
                                                        <BlinkOffset>0</BlinkOffset>
                                                      </MyObjectBuilder_CubeBlock>
                                                    </CubeBlocks>
                                                    <XMirroxPlane x="0" y="14" z="1" />
                                                    <ConveyorLines>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="-1" y="14" z="6" />
                                                        <StartDirection>Backward</StartDirection>
                                                        <EndPosition x="-1" y="14" z="7" />
                                                        <EndDirection>Forward</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="1" y="14" z="6" />
                                                        <StartDirection>Backward</StartDirection>
                                                        <EndPosition x="1" y="14" z="7" />
                                                        <EndDirection>Forward</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="0" y="13" z="4" />
                                                        <StartDirection>Forward</StartDirection>
                                                        <EndPosition x="0" y="13" z="3" />
                                                        <EndDirection>Backward</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="0" y="13" z="2" />
                                                        <StartDirection>Backward</StartDirection>
                                                        <EndPosition x="0" y="13" z="3" />
                                                        <EndDirection>Forward</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="1" y="13" z="3" />
                                                        <StartDirection>Left</StartDirection>
                                                        <EndPosition x="0" y="13" z="3" />
                                                        <EndDirection>Right</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="-1" y="13" z="3" />
                                                        <StartDirection>Right</StartDirection>
                                                        <EndPosition x="0" y="13" z="3" />
                                                        <EndDirection>Left</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="0" y="14" z="9" />
                                                        <StartDirection>Backward</StartDirection>
                                                        <EndPosition x="0" y="14" z="10" />
                                                        <EndDirection>Forward</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="0" y="13" z="0" />
                                                        <StartDirection>Backward</StartDirection>
                                                        <EndPosition x="0" y="13" z="1" />
                                                        <EndDirection>Forward</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="0" y="13" z="2" />
                                                        <StartDirection>Forward</StartDirection>
                                                        <EndPosition x="0" y="13" z="1" />
                                                        <EndDirection>Backward</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                      <MyObjectBuilder_ConveyorLine>
                                                        <StartPosition x="1" y="14" z="10" />
                                                        <StartDirection>Right</StartDirection>
                                                        <EndPosition x="2" y="14" z="10" />
                                                        <EndDirection>Left</EndDirection>
                                                        <Sections />
                                                        <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                      </MyObjectBuilder_ConveyorLine>
                                                    </ConveyorLines>
                                                    <BlockGroups>
                                                      <MyObjectBuilder_BlockGroup>
                                                        <Name>VC SC Wheels</Name>
                                                        <Blocks>
                                                          <Vector3I>
                                                            <X>-1</X>
                                                            <Y>12</Y>
                                                            <Z>1</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>1</X>
                                                            <Y>12</Y>
                                                            <Z>1</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>-1</X>
                                                            <Y>12</Y>
                                                            <Z>9</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>1</X>
                                                            <Y>12</Y>
                                                            <Z>9</Z>
                                                          </Vector3I>
                                                        </Blocks>
                                                      </MyObjectBuilder_BlockGroup>
                                                      <MyObjectBuilder_BlockGroup>
                                                        <Name>VC SC Thrusters</Name>
                                                        <Blocks>
                                                          <Vector3I>
                                                            <X>-2</X>
                                                            <Y>14</Y>
                                                            <Z>7</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>2</X>
                                                            <Y>14</Y>
                                                            <Z>7</Z>
                                                          </Vector3I>
                                                        </Blocks>
                                                      </MyObjectBuilder_BlockGroup>
                                                      <MyObjectBuilder_BlockGroup>
                                                        <Name>VC SC Artificial Mass</Name>
                                                        <Blocks>
                                                          <Vector3I>
                                                            <X>-1</X>
                                                            <Y>12</Y>
                                                            <Z>8</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>1</X>
                                                            <Y>12</Y>
                                                            <Z>8</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>-1</X>
                                                            <Y>12</Y>
                                                            <Z>2</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>1</X>
                                                            <Y>12</Y>
                                                            <Z>2</Z>
                                                          </Vector3I>
                                                        </Blocks>
                                                      </MyObjectBuilder_BlockGroup>
                                                      <MyObjectBuilder_BlockGroup>
                                                        <Name>VC SC Reactors</Name>
                                                        <Blocks>
                                                          <Vector3I>
                                                            <X>1</X>
                                                            <Y>13</Y>
                                                            <Z>3</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>-1</X>
                                                            <Y>13</Y>
                                                            <Z>3</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>2</X>
                                                            <Y>14</Y>
                                                            <Z>10</Z>
                                                          </Vector3I>
                                                        </Blocks>
                                                      </MyObjectBuilder_BlockGroup>
                                                      <MyObjectBuilder_BlockGroup>
                                                        <Name>VC SC Forward Lights</Name>
                                                        <Blocks>
                                                          <Vector3I>
                                                            <X>-1</X>
                                                            <Y>16</Y>
                                                            <Z>7</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>1</X>
                                                            <Y>16</Y>
                                                            <Z>7</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>0</X>
                                                            <Y>16</Y>
                                                            <Z>7</Z>
                                                          </Vector3I>
                                                        </Blocks>
                                                      </MyObjectBuilder_BlockGroup>
                                                      <MyObjectBuilder_BlockGroup>
                                                        <Name>VC SC Lights</Name>
                                                        <Blocks>
                                                          <Vector3I>
                                                            <X>-2</X>
                                                            <Y>14</Y>
                                                            <Z>10</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>-1</X>
                                                            <Y>16</Y>
                                                            <Z>7</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>1</X>
                                                            <Y>16</Y>
                                                            <Z>7</Z>
                                                          </Vector3I>
                                                          <Vector3I>
                                                            <X>0</X>
                                                            <Y>16</Y>
                                                            <Z>7</Z>
                                                          </Vector3I>
                                                        </Blocks>
                                                      </MyObjectBuilder_BlockGroup>
                                                    </BlockGroups>
                                                    <Handbrake>true</Handbrake>
                                                    <DisplayName>VC Scout Car</DisplayName>
                                                    <OxygenAmount>
                                                      <float>0</float>
                                                      <float>0</float>
                                                    </OxygenAmount>
                                                    <DestructibleBlocks>true</DestructibleBlocks>
                                                    <CreatePhysics>false</CreatePhysics>
                                                    <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                                                    <IsRespawnGrid>false</IsRespawnGrid>
                                                    <LocalCoordSys>0</LocalCoordSys>
                                                    <TargetingTargets />
                                                  </ProjectedGrid>
                                                  <ProjectionOffset>
                                                    <X>-2</X>
                                                    <Y>-13</Y>
                                                    <Z>-4</Z>
                                                  </ProjectionOffset>
                                                  <ProjectionRotation>
                                                    <X>0</X>
                                                    <Y>0</Y>
                                                    <Z>0</Z>
                                                  </ProjectionRotation>
                                                  <KeepProjection>true</KeepProjection>
                                                  <ShowOnlyBuildable>false</ShowOnlyBuildable>
                                                  <InstantBuildingEnabled>false</InstantBuildingEnabled>
                                                  <MaxNumberOfProjections>5</MaxNumberOfProjections>
                                                  <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                                                  <ProjectionsRemaining>0</ProjectionsRemaining>
                                                  <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="2" y="15" z="9" />
                                                  <BlockOrientation Forward="Left" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                                  <SubtypeName>TimerBlockSmall</SubtypeName>
                                                  <EntityId>113156509505932889</EntityId>
                                                  <Min x="2" y="13" z="6" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC LCD Timer Block</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Toolbar>
                                                    <ToolbarType>Character</ToolbarType>
                                                    <SelectedSlot xsi:nil="true" />
                                                    <Slots>
                                                      <Slot>
                                                        <Index>0</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>Run</Action>
                                                          <Parameters>
                                                            <MyObjectBuilder_ToolbarItemActionParameter>
                                                              <TypeCode>String</TypeCode>
                                                              <Value />
                                                            </MyObjectBuilder_ToolbarItemActionParameter>
                                                          </Parameters>
                                                          <BlockEntityId>95156306957167063</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>1</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>Start</Action>
                                                          <BlockEntityId>113156509505932889</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                      <Slot>
                                                        <Index>2</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                          <Action>TriggerNow</Action>
                                                          <BlockEntityId>113156509505932889</BlockEntityId>
                                                        </Data>
                                                      </Slot>
                                                    </Slots>
                                                  </Toolbar>
                                                  <JustTriggered>true</JustTriggered>
                                                  <Delay>1100</Delay>
                                                  <CurrentTime>0</CurrentTime>
                                                  <IsCountingDown>false</IsCountingDown>
                                                  <Silent>true</Silent>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                  <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                  <EntityId>98488387128404828</EntityId>
                                                  <Min x="-2" y="13" z="7" />
                                                  <BlockOrientation Forward="Up" Up="Backward" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                                  <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                                  <EntityId>99301127923552800</EntityId>
                                                  <Min x="2" y="13" z="7" />
                                                  <BlockOrientation Forward="Up" Up="Backward" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="3" y="14" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                  <Min x="2" y="15" z="10" />
                                                  <BlockOrientation Forward="Down" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                                                  <SubtypeName>SmallProgrammableBlock</SubtypeName>
                                                  <EntityId>95156306957167063</EntityId>
                                                  <Min x="-2" y="14" z="8" />
                                                  <BlockOrientation Forward="Right" Up="Up" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC LCD Programmable block</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                                                  <Storage />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="0" y="12" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="0" y="12" z="8" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                                  <Min x="0" y="12" z="9" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                  <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                  <EntityId>122765472953979667</EntityId>
                                                  <Min x="-2" y="12" z="9" />
                                                  <BlockOrientation Forward="Up" Up="Left" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <TopBlockId xsi:nil="true" />
                                                  <ShareInertiaTensor>false</ShareInertiaTensor>
                                                  <SafetyDetach xsi:nil="true" />
                                                  <RotorEntityId>106622048583840676</RotorEntityId>
                                                  <WeldedEntityId xsi:nil="true" />
                                                  <SteerAngle>0</SteerAngle>
                                                  <Damping>0.75</Damping>
                                                  <Strength>0.18</Strength>
                                                  <Propulsion>true</Propulsion>
                                                  <Friction>2.4</Friction>
                                                  <Power>0.55</Power>
                                                  <Height>-0.32</Height>
                                                  <MaxSteerAngle>0.32</MaxSteerAngle>
                                                  <InvertSteer>false</InvertSteer>
                                                  <InvertPropulsion>false</InvertPropulsion>
                                                  <SpeedLimit>110</SpeedLimit>
                                                  <PowerNew>0.6</PowerNew>
                                                  <StrengthNew>0.1</StrengthNew>
                                                  <FrictionNew xsi:nil="true" />
                                                  <AirShockEnabled>true</AirShockEnabled>
                                                  <BrakingEnabled>true</BrakingEnabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                                  <SubtypeName>SmallSuspension3x3</SubtypeName>
                                                  <EntityId>104180938912320239</EntityId>
                                                  <Min x="1" y="12" z="9" />
                                                  <BlockOrientation Forward="Up" Up="Right" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <TopBlockId xsi:nil="true" />
                                                  <ShareInertiaTensor>false</ShareInertiaTensor>
                                                  <SafetyDetach xsi:nil="true" />
                                                  <RotorEntityId>84172380033841520</RotorEntityId>
                                                  <WeldedEntityId xsi:nil="true" />
                                                  <SteerAngle>0</SteerAngle>
                                                  <Damping>0.75</Damping>
                                                  <Strength>0.18</Strength>
                                                  <Propulsion>true</Propulsion>
                                                  <Friction>2.4</Friction>
                                                  <Power>0.55</Power>
                                                  <Height>-0.32</Height>
                                                  <MaxSteerAngle>0.32</MaxSteerAngle>
                                                  <InvertSteer>false</InvertSteer>
                                                  <InvertPropulsion>false</InvertPropulsion>
                                                  <SpeedLimit>110</SpeedLimit>
                                                  <PowerNew>0.6</PowerNew>
                                                  <StrengthNew>0.1</StrengthNew>
                                                  <FrictionNew xsi:nil="true" />
                                                  <AirShockEnabled>true</AirShockEnabled>
                                                  <BrakingEnabled>true</BrakingEnabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                                                  <SubtypeName>SmallBlockOreDetector</SubtypeName>
                                                  <EntityId>137989762980970376</EntityId>
                                                  <Min x="2" y="14" z="5" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Ore Detector </CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <DetectionRadius>50</DetectionRadius>
                                                  <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <EntityId>141066058569944951</EntityId>
                                                  <Min x="-2" y="12" z="6" />
                                                  <IntegrityPercent>0.399999946</IntegrityPercent>
                                                  <BuildPercent>0.399999946</BuildPercent>
                                                  <BlockOrientation Forward="Left" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="1" y="12" z="0" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                                                  <SubtypeName>SmallWheel3x3</SubtypeName>
                                                  <EntityId>94100107344515415</EntityId>
                                                  <Min x="3" y="12" z="4" />
                                                  <BlockOrientation Forward="Forward" Up="Right" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <YieldLastComponent>true</YieldLastComponent>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <EntityId>136594896091195232</EntityId>
                                                  <Min x="-3" y="12" z="6" />
                                                  <IntegrityPercent>0.3600001</IntegrityPercent>
                                                  <BuildPercent>0.3600001</BuildPercent>
                                                  <BlockOrientation Forward="Right" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                  <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                  <EntityId>82795073240695623</EntityId>
                                                  <Min x="-1" y="13" z="3" />
                                                  <BlockOrientation Forward="Right" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <ComponentContainer>
                                                    <Components>
                                                      <ComponentData>
                                                        <TypeId>MyInventoryBase</TypeId>
                                                        <Component xsi:type="MyObjectBuilder_Inventory">
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>0.125</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Component>
                                                      </ComponentData>
                                                    </Components>
                                                  </ComponentContainer>
                                                  <CustomName>VC SC Small Reactor 2</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Inventory>
                                                    <Items />
                                                    <nextItemId>0</nextItemId>
                                                    <Volume>0.125</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Inventory>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                  <Min x="1" y="13" z="2" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                  <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                  <EntityId>116314259697763936</EntityId>
                                                  <Min x="-2" y="14" z="10" />
                                                  <BlockOrientation Forward="Backward" Up="Up" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <CustomName>VC SC Tail Light 1</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                  <Radius>1</Radius>
                                                  <ReflectorRadius>20</ReflectorRadius>
                                                  <ColorGreen>0.654902</ColorGreen>
                                                  <ColorBlue>0.4117647</ColorBlue>
                                                  <Falloff>1</Falloff>
                                                  <Intensity>3</Intensity>
                                                  <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                  <BlinkLenght>10</BlinkLenght>
                                                  <BlinkOffset>0</BlinkOffset>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                                  <Min x="1" y="13" z="1" />
                                                  <BlockOrientation Forward="Backward" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="-1" y="12" z="4" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="1" y="12" z="4" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="1" y="12" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="-1" y="12" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="-1" y="12" z="6" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="1" y="12" z="6" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="3" y="15" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                  <SubtypeName>VirtualMassSmall</SubtypeName>
                                                  <EntityId>108258407786707971</EntityId>
                                                  <Min x="-1" y="12" z="8" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Artificial Mass</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                  <SubtypeName>VirtualMassSmall</SubtypeName>
                                                  <EntityId>135203192390822832</EntityId>
                                                  <Min x="1" y="12" z="8" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Artificial Mass</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="-3" y="15" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="3" y="13" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                  <SubtypeName>VirtualMassSmall</SubtypeName>
                                                  <EntityId>118997398217184041</EntityId>
                                                  <Min x="-1" y="12" z="2" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Artificial Mass</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                                  <SubtypeName>VirtualMassSmall</SubtypeName>
                                                  <EntityId>125919054571496554</EntityId>
                                                  <Min x="1" y="12" z="2" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Artificial Mass</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                                                  <SubtypeName>OxygenTankSmall</SubtypeName>
                                                  <EntityId>85016974700178486</EntityId>
                                                  <Min x="-1" y="13" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Up" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <ComponentContainer>
                                                    <Components>
                                                      <ComponentData>
                                                        <TypeId>MyInventoryBase</TypeId>
                                                        <Component xsi:type="MyObjectBuilder_Inventory">
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>4</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Component>
                                                      </ComponentData>
                                                    </Components>
                                                  </ComponentContainer>
                                                  <CustomName>VC SC Oxygen Tank</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <IsStockpiling>false</IsStockpiling>
                                                  <FilledRatio>1</FilledRatio>
                                                  <Inventory>
                                                    <Items />
                                                    <nextItemId>0</nextItemId>
                                                    <Volume>4</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Inventory>
                                                  <AutoRefill>false</AutoRefill>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                  <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                  <EntityId>83070529473371913</EntityId>
                                                  <Min x="1" y="16" z="7" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <CustomName>VC SC Spotlight</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                  <Radius>5</Radius>
                                                  <ReflectorRadius>120</ReflectorRadius>
                                                  <Falloff>1</Falloff>
                                                  <Intensity>5</Intensity>
                                                  <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                  <BlinkLenght>10</BlinkLenght>
                                                  <BlinkOffset>0</BlinkOffset>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                                  <Min x="-2" y="15" z="10" />
                                                  <BlockOrientation Forward="Right" Up="Up" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="-3" y="14" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="-3" y="13" z="7" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                                                  <SubtypeName>ConnectorMedium</SubtypeName>
                                                  <EntityId>80458075517055618</EntityId>
                                                  <Min x="-1" y="13" z="10" />
                                                  <BlockOrientation Forward="Backward" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <DeformationRatio>0.5</DeformationRatio>
                                                  <ComponentContainer>
                                                    <Components>
                                                      <ComponentData>
                                                        <TypeId>MyInventoryBase</TypeId>
                                                        <Component xsi:type="MyObjectBuilder_Inventory">
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>1.152</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Component>
                                                      </ComponentData>
                                                    </Components>
                                                  </ComponentContainer>
                                                  <CustomName>VC SC Connector</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Inventory>
                                                    <Items />
                                                    <nextItemId>0</nextItemId>
                                                    <Volume>1.152</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Inventory>
                                                  <MasterToSlaveTransform xsi:nil="true" />
                                                  <MasterToSlaveGrid xsi:nil="true" />
                                                  <IsMaster>true</IsMaster>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorBlock</SubtypeName>
                                                  <Min x="2" y="14" z="9" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="3" y="14" z="8" />
                                                  <BlockOrientation Forward="Forward" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="-3" y="14" z="10" />
                                                  <BlockOrientation Forward="Forward" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                                                  <SubtypeName>SmallCameraBlock</SubtypeName>
                                                  <EntityId>129990850044357041</EntityId>
                                                  <Min x="0" y="12" z="10" />
                                                  <BlockOrientation Forward="Backward" Up="Up" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Camera</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <IsActive>false</IsActive>
                                                  <Fov>1.04719758</Fov>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                                  <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                                  <EntityId>127731695499176486</EntityId>
                                                  <Min x="2" y="14" z="10" />
                                                  <BlockOrientation Forward="Left" Up="Up" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <ComponentContainer>
                                                    <Components>
                                                      <ComponentData>
                                                        <TypeId>MyInventoryBase</TypeId>
                                                        <Component xsi:type="MyObjectBuilder_Inventory">
                                                          <Items />
                                                          <nextItemId>0</nextItemId>
                                                          <Volume>0.125</Volume>
                                                          <Mass>9223372036854.775807</Mass>
                                                          <MaxItemCount>2147483647</MaxItemCount>
                                                          <Size xsi:nil="true" />
                                                          <InventoryFlags>CanReceive</InventoryFlags>
                                                          <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                        </Component>
                                                      </ComponentData>
                                                    </Components>
                                                  </ComponentContainer>
                                                  <CustomName>VC SC Small Reactor 3</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>false</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Inventory>
                                                    <Items />
                                                    <nextItemId>0</nextItemId>
                                                    <Volume>0.125</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Inventory>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                                                  <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                                                  <EntityId>121063945178387233</EntityId>
                                                  <Min x="-2" y="14" z="9" />
                                                  <BlockOrientation Forward="Up" Up="Left" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Antenna </CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <BroadcastRadius>500</BroadcastRadius>
                                                  <ShowShipName>true</ShowShipName>
                                                  <EnableBroadcasting>true</EnableBroadcasting>
                                                  <AttachedPB>0</AttachedPB>
                                                  <IgnoreAllied>false</IgnoreAllied>
                                                  <IgnoreOther>true</IgnoreOther>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="-3" y="15" z="8" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <Min x="3" y="15" z="8" />
                                                  <BlockOrientation Forward="Forward" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                  <Min x="-2" y="15" z="8" />
                                                  <BlockOrientation Forward="Backward" Up="Right" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                                  <Min x="2" y="15" z="8" />
                                                  <BlockOrientation Forward="Backward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <EntityId>108924689440235990</EntityId>
                                                  <Min x="-3" y="12" z="5" />
                                                  <IntegrityPercent>0.3600001</IntegrityPercent>
                                                  <BuildPercent>0.3600001</BuildPercent>
                                                  <BlockOrientation Forward="Right" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                                  <EntityId>142434881816022636</EntityId>
                                                  <Min x="-2" y="12" z="5" />
                                                  <IntegrityPercent>0.399999946</IntegrityPercent>
                                                  <BuildPercent>0.399999946</BuildPercent>
                                                  <BlockOrientation Forward="Left" Up="Down" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="1" y="12" z="3" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                                                  <SubtypeName>ButtonPanelSmall</SubtypeName>
                                                  <EntityId>72096360652751659</EntityId>
                                                  <Min x="-3" y="13" z="4" />
                                                  <BlockOrientation Forward="Forward" Up="Left" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <CustomName>VC SC Button Panel</CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                  <Toolbar>
                                                    <ToolbarType>Character</ToolbarType>
                                                    <SelectedSlot xsi:nil="true" />
                                                    <Slots>
                                                      <Slot>
                                                        <Index>0</Index>
                                                        <Item />
                                                        <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                          <Action>OnOff</Action>
                                                          <GridEntityId>0</GridEntityId>
                                                          <BlockEntityId>72096360652751659</BlockEntityId>
                                                          <GroupName>VC SC Lights</GroupName>
                                                        </Data>
                                                      </Slot>
                                                    </Slots>
                                                  </Toolbar>
                                                  <AnyoneCanUse>false</AnyoneCanUse>
                                                  <CustomButtonNames>
                                                    <dictionary>
                                                      <item>
                                                        <Key>0</Key>
                                                        <Value>VC SC Lights</Value>
                                                      </item>
                                                    </dictionary>
                                                  </CustomButtonNames>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="-1" y="12" z="3" />
                                                  <BlockOrientation Forward="Forward" Up="Down" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="1" y="12" z="10" />
                                                  <BlockOrientation Forward="Up" Up="Backward" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                                  <Min x="-1" y="12" z="10" />
                                                  <BlockOrientation Forward="Up" Up="Backward" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
                                                  <SubtypeName>SmallBlockGyro</SubtypeName>
                                                  <EntityId>82406023776621159</EntityId>
                                                  <Min x="2" y="14" z="8" />
                                                  <BlockOrientation Forward="Down" Up="Right" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                  <ShareMode>All</ShareMode>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>true</Enabled>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="-2" y="14" z="6" />
                                                  <BlockOrientation Forward="Down" Up="Forward" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                                  <Min x="-2" y="14" z="5" />
                                                  <BlockOrientation Forward="Down" Up="Backward" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <EntityId>133100900328613319</EntityId>
                                                  <Min x="-3" y="13" z="6" />
                                                  <IntegrityPercent>0.7333333</IntegrityPercent>
                                                  <BuildPercent>0.7333333</BuildPercent>
                                                  <BlockOrientation Forward="Right" Up="Up" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                                  <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                                  <EntityId>89397744187363482</EntityId>
                                                  <Min x="-3" y="13" z="5" />
                                                  <IntegrityPercent>0.7333333</IntegrityPercent>
                                                  <BuildPercent>0.7333333</BuildPercent>
                                                  <BlockOrientation Forward="Right" Up="Backward" />
                                                  <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                  <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                  <EntityId>91452512646015983</EntityId>
                                                  <Min x="-1" y="16" z="7" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <CustomName>VC SC Spotlight </CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                  <Radius>5</Radius>
                                                  <ReflectorRadius>120</ReflectorRadius>
                                                  <Falloff>1</Falloff>
                                                  <Intensity>5</Intensity>
                                                  <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                  <BlinkLenght>10</BlinkLenght>
                                                  <BlinkOffset>0</BlinkOffset>
                                                </MyObjectBuilder_CubeBlock>
                                                <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                                  <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                                  <EntityId>143191035830648944</EntityId>
                                                  <Min x="0" y="16" z="7" />
                                                  <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                                  <CustomName>VC SC Spotlight </CustomName>
                                                  <ShowOnHUD>false</ShowOnHUD>
                                                  <ShowInTerminal>true</ShowInTerminal>
                                                  <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                                  <ShowInInventory>true</ShowInInventory>
                                                  <Enabled>false</Enabled>
                                                  <Radius>5</Radius>
                                                  <ReflectorRadius>120</ReflectorRadius>
                                                  <Falloff>1</Falloff>
                                                  <Intensity>5</Intensity>
                                                  <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                                  <BlinkLenght>10</BlinkLenght>
                                                  <BlinkOffset>0</BlinkOffset>
                                                </MyObjectBuilder_CubeBlock>
                                              </CubeBlocks>
                                              <XMirroxPlane x="0" y="14" z="1" />
                                              <ConveyorLines>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="-1" y="14" z="6" />
                                                  <StartDirection>Backward</StartDirection>
                                                  <EndPosition x="-1" y="14" z="7" />
                                                  <EndDirection>Forward</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="1" y="14" z="6" />
                                                  <StartDirection>Backward</StartDirection>
                                                  <EndPosition x="1" y="14" z="7" />
                                                  <EndDirection>Forward</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="0" y="13" z="4" />
                                                  <StartDirection>Forward</StartDirection>
                                                  <EndPosition x="0" y="13" z="3" />
                                                  <EndDirection>Backward</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="0" y="13" z="2" />
                                                  <StartDirection>Backward</StartDirection>
                                                  <EndPosition x="0" y="13" z="3" />
                                                  <EndDirection>Forward</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="1" y="13" z="3" />
                                                  <StartDirection>Left</StartDirection>
                                                  <EndPosition x="0" y="13" z="3" />
                                                  <EndDirection>Right</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="-1" y="13" z="3" />
                                                  <StartDirection>Right</StartDirection>
                                                  <EndPosition x="0" y="13" z="3" />
                                                  <EndDirection>Left</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="0" y="14" z="9" />
                                                  <StartDirection>Backward</StartDirection>
                                                  <EndPosition x="0" y="14" z="10" />
                                                  <EndDirection>Forward</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="0" y="13" z="0" />
                                                  <StartDirection>Backward</StartDirection>
                                                  <EndPosition x="0" y="13" z="1" />
                                                  <EndDirection>Forward</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="0" y="13" z="2" />
                                                  <StartDirection>Forward</StartDirection>
                                                  <EndPosition x="0" y="13" z="1" />
                                                  <EndDirection>Backward</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                                <MyObjectBuilder_ConveyorLine>
                                                  <StartPosition x="1" y="14" z="10" />
                                                  <StartDirection>Right</StartDirection>
                                                  <EndPosition x="2" y="14" z="10" />
                                                  <EndDirection>Left</EndDirection>
                                                  <Sections />
                                                  <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                                </MyObjectBuilder_ConveyorLine>
                                              </ConveyorLines>
                                              <BlockGroups>
                                                <MyObjectBuilder_BlockGroup>
                                                  <Name>VC SC Wheels</Name>
                                                  <Blocks>
                                                    <Vector3I>
                                                      <X>-1</X>
                                                      <Y>12</Y>
                                                      <Z>1</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>1</X>
                                                      <Y>12</Y>
                                                      <Z>1</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>-1</X>
                                                      <Y>12</Y>
                                                      <Z>9</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>1</X>
                                                      <Y>12</Y>
                                                      <Z>9</Z>
                                                    </Vector3I>
                                                  </Blocks>
                                                </MyObjectBuilder_BlockGroup>
                                                <MyObjectBuilder_BlockGroup>
                                                  <Name>VC SC Thrusters</Name>
                                                  <Blocks>
                                                    <Vector3I>
                                                      <X>-2</X>
                                                      <Y>14</Y>
                                                      <Z>7</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>2</X>
                                                      <Y>14</Y>
                                                      <Z>7</Z>
                                                    </Vector3I>
                                                  </Blocks>
                                                </MyObjectBuilder_BlockGroup>
                                                <MyObjectBuilder_BlockGroup>
                                                  <Name>VC SC Artificial Mass</Name>
                                                  <Blocks>
                                                    <Vector3I>
                                                      <X>-1</X>
                                                      <Y>12</Y>
                                                      <Z>8</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>1</X>
                                                      <Y>12</Y>
                                                      <Z>8</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>-1</X>
                                                      <Y>12</Y>
                                                      <Z>2</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>1</X>
                                                      <Y>12</Y>
                                                      <Z>2</Z>
                                                    </Vector3I>
                                                  </Blocks>
                                                </MyObjectBuilder_BlockGroup>
                                                <MyObjectBuilder_BlockGroup>
                                                  <Name>VC SC Reactors</Name>
                                                  <Blocks>
                                                    <Vector3I>
                                                      <X>1</X>
                                                      <Y>13</Y>
                                                      <Z>3</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>-1</X>
                                                      <Y>13</Y>
                                                      <Z>3</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>2</X>
                                                      <Y>14</Y>
                                                      <Z>10</Z>
                                                    </Vector3I>
                                                  </Blocks>
                                                </MyObjectBuilder_BlockGroup>
                                                <MyObjectBuilder_BlockGroup>
                                                  <Name>VC SC Forward Lights</Name>
                                                  <Blocks>
                                                    <Vector3I>
                                                      <X>-1</X>
                                                      <Y>16</Y>
                                                      <Z>7</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>1</X>
                                                      <Y>16</Y>
                                                      <Z>7</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>0</X>
                                                      <Y>16</Y>
                                                      <Z>7</Z>
                                                    </Vector3I>
                                                  </Blocks>
                                                </MyObjectBuilder_BlockGroup>
                                                <MyObjectBuilder_BlockGroup>
                                                  <Name>VC SC Lights</Name>
                                                  <Blocks>
                                                    <Vector3I>
                                                      <X>-2</X>
                                                      <Y>14</Y>
                                                      <Z>10</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>-1</X>
                                                      <Y>16</Y>
                                                      <Z>7</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>1</X>
                                                      <Y>16</Y>
                                                      <Z>7</Z>
                                                    </Vector3I>
                                                    <Vector3I>
                                                      <X>0</X>
                                                      <Y>16</Y>
                                                      <Z>7</Z>
                                                    </Vector3I>
                                                  </Blocks>
                                                </MyObjectBuilder_BlockGroup>
                                              </BlockGroups>
                                              <Handbrake>true</Handbrake>
                                              <DisplayName>VC Scout Car</DisplayName>
                                              <OxygenAmount>
                                                <float>0</float>
                                                <float>0</float>
                                              </OxygenAmount>
                                              <DestructibleBlocks>true</DestructibleBlocks>
                                              <CreatePhysics>false</CreatePhysics>
                                              <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                                              <IsRespawnGrid>false</IsRespawnGrid>
                                              <LocalCoordSys>0</LocalCoordSys>
                                              <TargetingTargets />
                                            </ProjectedGrid>
                                            <ProjectionOffset>
                                              <X>-2</X>
                                              <Y>-13</Y>
                                              <Z>-4</Z>
                                            </ProjectionOffset>
                                            <ProjectionRotation>
                                              <X>0</X>
                                              <Y>0</Y>
                                              <Z>0</Z>
                                            </ProjectionRotation>
                                            <KeepProjection>true</KeepProjection>
                                            <ShowOnlyBuildable>false</ShowOnlyBuildable>
                                            <InstantBuildingEnabled>false</InstantBuildingEnabled>
                                            <MaxNumberOfProjections>5</MaxNumberOfProjections>
                                            <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                                            <ProjectionsRemaining>0</ProjectionsRemaining>
                                            <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="2" y="15" z="9" />
                                            <BlockOrientation Forward="Left" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                            <SubtypeName>TimerBlockSmall</SubtypeName>
                                            <EntityId>127287825258694880</EntityId>
                                            <Min x="2" y="13" z="6" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC LCD Timer Block</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Toolbar>
                                              <ToolbarType>Character</ToolbarType>
                                              <SelectedSlot xsi:nil="true" />
                                              <Slots>
                                                <Slot>
                                                  <Index>0</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>Run</Action>
                                                    <Parameters>
                                                      <MyObjectBuilder_ToolbarItemActionParameter>
                                                        <TypeCode>String</TypeCode>
                                                        <Value />
                                                      </MyObjectBuilder_ToolbarItemActionParameter>
                                                    </Parameters>
                                                    <BlockEntityId>90818584373888758</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>1</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>Start</Action>
                                                    <BlockEntityId>127287825258694880</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>2</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>TriggerNow</Action>
                                                    <BlockEntityId>127287825258694880</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                              </Slots>
                                            </Toolbar>
                                            <JustTriggered>true</JustTriggered>
                                            <Delay>1100</Delay>
                                            <CurrentTime>0</CurrentTime>
                                            <IsCountingDown>false</IsCountingDown>
                                            <Silent>true</Silent>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                            <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                            <EntityId>143724921948653061</EntityId>
                                            <Min x="-2" y="13" z="7" />
                                            <BlockOrientation Forward="Up" Up="Backward" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                            <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                            <EntityId>126328568070947297</EntityId>
                                            <Min x="2" y="13" z="7" />
                                            <BlockOrientation Forward="Up" Up="Backward" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="3" y="14" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                            <Min x="2" y="15" z="10" />
                                            <BlockOrientation Forward="Down" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                                            <SubtypeName>SmallProgrammableBlock</SubtypeName>
                                            <EntityId>90818584373888758</EntityId>
                                            <Min x="-2" y="14" z="8" />
                                            <BlockOrientation Forward="Right" Up="Up" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC LCD Programmable block</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                                            <Storage />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="0" y="12" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="0" y="12" z="8" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                            <Min x="0" y="12" z="9" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                            <SubtypeName>SmallSuspension3x3</SubtypeName>
                                            <EntityId>139037454374096724</EntityId>
                                            <Min x="-2" y="12" z="9" />
                                            <BlockOrientation Forward="Up" Up="Left" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <TopBlockId xsi:nil="true" />
                                            <ShareInertiaTensor>false</ShareInertiaTensor>
                                            <SafetyDetach xsi:nil="true" />
                                            <RotorEntityId>79040916881180519</RotorEntityId>
                                            <WeldedEntityId xsi:nil="true" />
                                            <SteerAngle>0</SteerAngle>
                                            <Damping>0.75</Damping>
                                            <Strength>0.18</Strength>
                                            <Propulsion>true</Propulsion>
                                            <Friction>2.4</Friction>
                                            <Power>0.5</Power>
                                            <Height>-0.32</Height>
                                            <MaxSteerAngle>0.32</MaxSteerAngle>
                                            <InvertSteer>false</InvertSteer>
                                            <InvertPropulsion>false</InvertPropulsion>
                                            <SpeedLimit>100.000008</SpeedLimit>
                                            <PowerNew>0.6</PowerNew>
                                            <StrengthNew>0.1</StrengthNew>
                                            <FrictionNew xsi:nil="true" />
                                            <AirShockEnabled>true</AirShockEnabled>
                                            <BrakingEnabled>true</BrakingEnabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                            <SubtypeName>SmallSuspension3x3</SubtypeName>
                                            <EntityId>118473038076519294</EntityId>
                                            <Min x="1" y="12" z="9" />
                                            <BlockOrientation Forward="Up" Up="Right" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <TopBlockId xsi:nil="true" />
                                            <ShareInertiaTensor>false</ShareInertiaTensor>
                                            <SafetyDetach xsi:nil="true" />
                                            <RotorEntityId>100473773478110921</RotorEntityId>
                                            <WeldedEntityId xsi:nil="true" />
                                            <SteerAngle>0</SteerAngle>
                                            <Damping>0.75</Damping>
                                            <Strength>0.18</Strength>
                                            <Propulsion>true</Propulsion>
                                            <Friction>2.4</Friction>
                                            <Power>0.5</Power>
                                            <Height>-0.32</Height>
                                            <MaxSteerAngle>0.32</MaxSteerAngle>
                                            <InvertSteer>false</InvertSteer>
                                            <InvertPropulsion>false</InvertPropulsion>
                                            <SpeedLimit>100.000008</SpeedLimit>
                                            <PowerNew>0.6</PowerNew>
                                            <StrengthNew>0.1</StrengthNew>
                                            <FrictionNew xsi:nil="true" />
                                            <AirShockEnabled>true</AirShockEnabled>
                                            <BrakingEnabled>true</BrakingEnabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                                            <SubtypeName>SmallBlockOreDetector</SubtypeName>
                                            <EntityId>125331362115795269</EntityId>
                                            <Min x="2" y="14" z="5" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Ore Detector </CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <DetectionRadius>50</DetectionRadius>
                                            <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <EntityId>114121823094793944</EntityId>
                                            <Min x="-2" y="12" z="6" />
                                            <IntegrityPercent>0.399999946</IntegrityPercent>
                                            <BuildPercent>0.399999946</BuildPercent>
                                            <BlockOrientation Forward="Left" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="1" y="12" z="0" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                                            <SubtypeName>SmallWheel3x3</SubtypeName>
                                            <EntityId>92616034926858280</EntityId>
                                            <Min x="3" y="12" z="4" />
                                            <BlockOrientation Forward="Forward" Up="Right" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <YieldLastComponent>true</YieldLastComponent>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <EntityId>97835158504484523</EntityId>
                                            <Min x="-3" y="12" z="6" />
                                            <IntegrityPercent>0.3600001</IntegrityPercent>
                                            <BuildPercent>0.3600001</BuildPercent>
                                            <BlockOrientation Forward="Right" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                            <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                            <EntityId>113824392492303650</EntityId>
                                            <Min x="-1" y="13" z="3" />
                                            <BlockOrientation Forward="Right" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <ComponentContainer>
                                              <Components>
                                                <ComponentData>
                                                  <TypeId>MyInventoryBase</TypeId>
                                                  <Component xsi:type="MyObjectBuilder_Inventory">
                                                    <Items>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>2.158247</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                          <SubtypeName>Uranium</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>0</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                    </Items>
                                                    <nextItemId>1</nextItemId>
                                                    <Volume>0.125</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Component>
                                                </ComponentData>
                                              </Components>
                                            </ComponentContainer>
                                            <CustomName>VC SC Small Reactor 2</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Inventory>
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2.158247</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                    <SubtypeName>Uranium</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>1</nextItemId>
                                              <Volume>0.125</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Inventory>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                            <Min x="1" y="13" z="2" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                            <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                            <EntityId>76874787260920677</EntityId>
                                            <Min x="-2" y="14" z="10" />
                                            <BlockOrientation Forward="Backward" Up="Up" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <CustomName>VC SC Tail Light 1</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                            <Radius>1</Radius>
                                            <ReflectorRadius>20</ReflectorRadius>
                                            <ColorGreen>0.654902</ColorGreen>
                                            <ColorBlue>0.4117647</ColorBlue>
                                            <Falloff>1</Falloff>
                                            <Intensity>3</Intensity>
                                            <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                            <BlinkLenght>10</BlinkLenght>
                                            <BlinkOffset>0</BlinkOffset>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                            <Min x="1" y="13" z="1" />
                                            <BlockOrientation Forward="Backward" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="-1" y="12" z="4" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="1" y="12" z="4" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="1" y="12" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="-1" y="12" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="-1" y="12" z="6" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="1" y="12" z="6" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="3" y="15" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                            <SubtypeName>VirtualMassSmall</SubtypeName>
                                            <EntityId>97775868074546512</EntityId>
                                            <Min x="-1" y="12" z="8" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Artificial Mass</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                            <SubtypeName>VirtualMassSmall</SubtypeName>
                                            <EntityId>108596628978053744</EntityId>
                                            <Min x="1" y="12" z="8" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Artificial Mass</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="-3" y="15" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="3" y="13" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                            <SubtypeName>VirtualMassSmall</SubtypeName>
                                            <EntityId>99927095309974539</EntityId>
                                            <Min x="-1" y="12" z="2" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Artificial Mass</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                            <SubtypeName>VirtualMassSmall</SubtypeName>
                                            <EntityId>87563095314012284</EntityId>
                                            <Min x="1" y="12" z="2" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Artificial Mass</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                                            <SubtypeName>OxygenTankSmall</SubtypeName>
                                            <EntityId>126216917753354709</EntityId>
                                            <Min x="-1" y="13" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Up" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <ComponentContainer>
                                              <Components>
                                                <ComponentData>
                                                  <TypeId>MyInventoryBase</TypeId>
                                                  <Component xsi:type="MyObjectBuilder_Inventory">
                                                    <Items />
                                                    <nextItemId>0</nextItemId>
                                                    <Volume>4</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Component>
                                                </ComponentData>
                                              </Components>
                                            </ComponentContainer>
                                            <CustomName>VC SC Oxygen Tank</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <IsStockpiling>false</IsStockpiling>
                                            <FilledRatio>1</FilledRatio>
                                            <Inventory>
                                              <Items />
                                              <nextItemId>0</nextItemId>
                                              <Volume>4</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Inventory>
                                            <AutoRefill>false</AutoRefill>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                            <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                            <EntityId>130620212803066909</EntityId>
                                            <Min x="1" y="16" z="7" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <CustomName>VC SC Spotlight</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                            <Radius>5</Radius>
                                            <ReflectorRadius>120</ReflectorRadius>
                                            <Falloff>1</Falloff>
                                            <Intensity>5</Intensity>
                                            <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                            <BlinkLenght>10</BlinkLenght>
                                            <BlinkOffset>0</BlinkOffset>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                            <Min x="-2" y="15" z="10" />
                                            <BlockOrientation Forward="Right" Up="Up" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="-3" y="14" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="-3" y="13" z="7" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                                            <SubtypeName>ConnectorMedium</SubtypeName>
                                            <EntityId>84034952074693610</EntityId>
                                            <Min x="-1" y="13" z="10" />
                                            <BlockOrientation Forward="Backward" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <DeformationRatio>0.5</DeformationRatio>
                                            <ComponentContainer>
                                              <Components>
                                                <ComponentData>
                                                  <TypeId>MyInventoryBase</TypeId>
                                                  <Component xsi:type="MyObjectBuilder_Inventory">
                                                    <Items>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>34</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                          <SubtypeName>SteelPlate</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>0</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>2</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                          <SubtypeName>Computer</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>1</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>12</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                          <SubtypeName>SmallTube</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>2</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>6</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                          <SubtypeName>Motor</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>3</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>42</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                          <SubtypeName>Construction</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>4</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>2</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                          <SubtypeName>LargeTube</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>5</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>1</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                                          <SubtypeName>OxygenBottle</SubtypeName>
                                                          <GasLevel>0</GasLevel>
                                                          <OxygenLevel>0</OxygenLevel>
                                                        </PhysicalContent>
                                                        <ItemId>6</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>1</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                                          <SubtypeName>HydrogenBottle</SubtypeName>
                                                          <GasLevel>0</GasLevel>
                                                        </PhysicalContent>
                                                        <ItemId>7</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                    </Items>
                                                    <nextItemId>8</nextItemId>
                                                    <Volume>1.152</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Component>
                                                </ComponentData>
                                              </Components>
                                            </ComponentContainer>
                                            <CustomName>VC SC Connector</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Inventory>
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>34</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>SteelPlate</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>Computer</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>1</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>12</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>SmallTube</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>2</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>6</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>Motor</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>3</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>42</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>Construction</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>4</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>LargeTube</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>5</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>1</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                                    <SubtypeName>OxygenBottle</SubtypeName>
                                                    <GasLevel>0</GasLevel>
                                                    <OxygenLevel>0</OxygenLevel>
                                                  </PhysicalContent>
                                                  <ItemId>6</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>1</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                                    <SubtypeName>HydrogenBottle</SubtypeName>
                                                    <GasLevel>0</GasLevel>
                                                  </PhysicalContent>
                                                  <ItemId>7</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>8</nextItemId>
                                              <Volume>1.152</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Inventory>
                                            <MasterToSlaveTransform xsi:nil="true" />
                                            <MasterToSlaveGrid xsi:nil="true" />
                                            <IsMaster>true</IsMaster>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                            <SubtypeName>TimerBlockSmall</SubtypeName>
                                            <EntityId>131119759599806763</EntityId>
                                            <Min x="2" y="14" z="9" />
                                            <BlockOrientation Forward="Up" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Repair Projector Timer Block</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Toolbar>
                                              <ToolbarType>Character</ToolbarType>
                                              <SelectedSlot xsi:nil="true" />
                                              <Slots>
                                                <Slot>
                                                  <Index>0</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>OnOff</Action>
                                                    <BlockEntityId>108806667641169994</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>1</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>OnOff</Action>
                                                    <BlockEntityId>85046923645917809</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                                <Slot>
                                                  <Index>2</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                                    <Action>OnOff</Action>
                                                    <BlockEntityId>76987518742915826</BlockEntityId>
                                                  </Data>
                                                </Slot>
                                              </Slots>
                                            </Toolbar>
                                            <Delay>1100</Delay>
                                            <CurrentTime>0</CurrentTime>
                                            <IsCountingDown>false</IsCountingDown>
                                            <Silent>false</Silent>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="3" y="14" z="8" />
                                            <BlockOrientation Forward="Forward" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="-3" y="14" z="10" />
                                            <BlockOrientation Forward="Forward" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                                            <SubtypeName>SmallCameraBlock</SubtypeName>
                                            <EntityId>107561106207480908</EntityId>
                                            <Min x="0" y="12" z="10" />
                                            <BlockOrientation Forward="Backward" Up="Up" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Camera</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <IsActive>false</IsActive>
                                            <Fov>1.04719758</Fov>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                            <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                            <EntityId>134906998107503995</EntityId>
                                            <Min x="2" y="14" z="10" />
                                            <BlockOrientation Forward="Left" Up="Up" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <ComponentContainer>
                                              <Components>
                                                <ComponentData>
                                                  <TypeId>MyInventoryBase</TypeId>
                                                  <Component xsi:type="MyObjectBuilder_Inventory">
                                                    <Items>
                                                      <MyObjectBuilder_InventoryItem>
                                                        <Amount>2.158247</Amount>
                                                        <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                          <SubtypeName>Uranium</SubtypeName>
                                                        </PhysicalContent>
                                                        <ItemId>0</ItemId>
                                                      </MyObjectBuilder_InventoryItem>
                                                    </Items>
                                                    <nextItemId>1</nextItemId>
                                                    <Volume>0.125</Volume>
                                                    <Mass>9223372036854.775807</Mass>
                                                    <MaxItemCount>2147483647</MaxItemCount>
                                                    <Size xsi:nil="true" />
                                                    <InventoryFlags>CanReceive</InventoryFlags>
                                                    <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                                  </Component>
                                                </ComponentData>
                                              </Components>
                                            </ComponentContainer>
                                            <CustomName>VC SC Small Reactor 3</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>false</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Inventory>
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2.158247</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                    <SubtypeName>Uranium</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>1</nextItemId>
                                              <Volume>0.125</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Inventory>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                                            <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                                            <EntityId>91110317786647716</EntityId>
                                            <Min x="-2" y="14" z="9" />
                                            <BlockOrientation Forward="Up" Up="Left" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Antenna </CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <BroadcastRadius>500</BroadcastRadius>
                                            <ShowShipName>true</ShowShipName>
                                            <EnableBroadcasting>true</EnableBroadcasting>
                                            <AttachedPB>0</AttachedPB>
                                            <IgnoreAllied>false</IgnoreAllied>
                                            <IgnoreOther>true</IgnoreOther>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="-3" y="15" z="8" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <Min x="3" y="15" z="8" />
                                            <BlockOrientation Forward="Forward" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                            <Min x="-2" y="15" z="8" />
                                            <BlockOrientation Forward="Backward" Up="Right" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                            <Min x="2" y="15" z="8" />
                                            <BlockOrientation Forward="Backward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <EntityId>103134062339792748</EntityId>
                                            <Min x="-3" y="12" z="5" />
                                            <IntegrityPercent>0.3600001</IntegrityPercent>
                                            <BuildPercent>0.3600001</BuildPercent>
                                            <BlockOrientation Forward="Right" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                            <EntityId>131516913252961261</EntityId>
                                            <Min x="-2" y="12" z="5" />
                                            <IntegrityPercent>0.399999946</IntegrityPercent>
                                            <BuildPercent>0.399999946</BuildPercent>
                                            <BlockOrientation Forward="Left" Up="Down" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="1" y="12" z="3" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                                            <SubtypeName>ButtonPanelSmall</SubtypeName>
                                            <EntityId>73823684493987757</EntityId>
                                            <Min x="-3" y="13" z="4" />
                                            <BlockOrientation Forward="Forward" Up="Left" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Button Panel</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                            <Toolbar>
                                              <ToolbarType>Character</ToolbarType>
                                              <SelectedSlot xsi:nil="true" />
                                              <Slots>
                                                <Slot>
                                                  <Index>0</Index>
                                                  <Item />
                                                  <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                                    <Action>OnOff</Action>
                                                    <GridEntityId>0</GridEntityId>
                                                    <BlockEntityId>73823684493987757</BlockEntityId>
                                                    <GroupName>VC SC Lights</GroupName>
                                                  </Data>
                                                </Slot>
                                              </Slots>
                                            </Toolbar>
                                            <AnyoneCanUse>false</AnyoneCanUse>
                                            <CustomButtonNames>
                                              <dictionary>
                                                <item>
                                                  <Key>0</Key>
                                                  <Value>VC SC Lights</Value>
                                                </item>
                                              </dictionary>
                                            </CustomButtonNames>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="-1" y="12" z="3" />
                                            <BlockOrientation Forward="Forward" Up="Down" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="1" y="12" z="10" />
                                            <BlockOrientation Forward="Up" Up="Backward" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                            <Min x="-1" y="12" z="10" />
                                            <BlockOrientation Forward="Up" Up="Backward" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
                                            <SubtypeName>SmallBlockGyro</SubtypeName>
                                            <EntityId>76923092252181727</EntityId>
                                            <Min x="2" y="14" z="8" />
                                            <BlockOrientation Forward="Down" Up="Right" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                            <ShareMode>All</ShareMode>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>true</Enabled>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="-2" y="14" z="6" />
                                            <BlockOrientation Forward="Down" Up="Forward" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                            <Min x="-2" y="14" z="5" />
                                            <BlockOrientation Forward="Down" Up="Backward" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <EntityId>99632954191431673</EntityId>
                                            <Min x="-3" y="13" z="6" />
                                            <IntegrityPercent>0.7333333</IntegrityPercent>
                                            <BuildPercent>0.7333333</BuildPercent>
                                            <BlockOrientation Forward="Right" Up="Up" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                            <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                            <EntityId>101911688819583675</EntityId>
                                            <Min x="-3" y="13" z="5" />
                                            <IntegrityPercent>0.7333333</IntegrityPercent>
                                            <BuildPercent>0.7333333</BuildPercent>
                                            <BlockOrientation Forward="Right" Up="Backward" />
                                            <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                            <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                            <EntityId>102034806608290043</EntityId>
                                            <Min x="-1" y="16" z="7" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <CustomName>VC SC Spotlight </CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                            <Radius>5</Radius>
                                            <ReflectorRadius>120</ReflectorRadius>
                                            <Falloff>1</Falloff>
                                            <Intensity>5</Intensity>
                                            <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                            <BlinkLenght>10</BlinkLenght>
                                            <BlinkOffset>0</BlinkOffset>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                            <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                            <EntityId>125226690246209961</EntityId>
                                            <Min x="0" y="16" z="7" />
                                            <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                            <CustomName>VC SC Spotlight </CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                            <Radius>5</Radius>
                                            <ReflectorRadius>120</ReflectorRadius>
                                            <Falloff>1</Falloff>
                                            <Intensity>5</Intensity>
                                            <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                            <BlinkLenght>10</BlinkLenght>
                                            <BlinkOffset>0</BlinkOffset>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                            <SubtypeName>SmallTextPanel</SubtypeName>
                                            <EntityId>76987518742915826</EntityId>
                                            <Min x="0" y="14" z="1" />
                                            <BlockOrientation Forward="Down" Up="Forward" />
                                            <ShareMode>All</ShareMode>
                                            <CustomName>VC SC Front Piston Jack Attach Point Sign</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                            <Description />
                                            <Title>Title</Title>
                                            <AccessFlag>READ_AND_WRITE_ALL</AccessFlag>
                                            <ChangeInterval>1</ChangeInterval>
                                            <SelectedImages>
                                              <string>Arrow</string>
                                              <string>Construction</string>
                                            </SelectedImages>
                                            <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                            <FontSize>1</FontSize>
                                            <PublicDescription />
                                            <PublicTitle>Public title</PublicTitle>
                                            <ShowText>NONE</ShowText>
                                            <FontColor>
                                              <PackedValue>4294967295</PackedValue>
                                              <X>255</X>
                                              <Y>255</Y>
                                              <Z>255</Z>
                                              <R>255</R>
                                              <G>255</G>
                                              <B>255</B>
                                              <A>255</A>
                                            </FontColor>
                                            <BackgroundColor>
                                              <PackedValue>4278190080</PackedValue>
                                              <X>0</X>
                                              <Y>0</Y>
                                              <Z>0</Z>
                                              <R>0</R>
                                              <G>0</G>
                                              <B>0</B>
                                              <A>255</A>
                                            </BackgroundColor>
                                            <CurrentShownTexture>0</CurrentShownTexture>
                                          </MyObjectBuilder_CubeBlock>
                                          <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                            <SubtypeName>SmallTextPanel</SubtypeName>
                                            <EntityId>85046923645917809</EntityId>
                                            <Min x="2" y="13" z="10" />
                                            <BlockOrientation Forward="Left" Up="Up" />
                                            <CustomName>VC SC Rear Piston Jack Attach Point Sign</CustomName>
                                            <ShowOnHUD>false</ShowOnHUD>
                                            <ShowInTerminal>true</ShowInTerminal>
                                            <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                            <ShowInInventory>true</ShowInInventory>
                                            <Enabled>false</Enabled>
                                            <Description />
                                            <Title>Title</Title>
                                            <AccessFlag>READ_AND_WRITE_ALL</AccessFlag>
                                            <ChangeInterval>1</ChangeInterval>
                                            <SelectedImages>
                                              <string>Arrow</string>
                                              <string>Construction</string>
                                            </SelectedImages>
                                            <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                            <FontSize>1.6</FontSize>
                                            <PublicDescription />
                                            <PublicTitle>Public title</PublicTitle>
                                            <ShowText>NONE</ShowText>
                                            <FontColor>
                                              <PackedValue>4294967295</PackedValue>
                                              <X>255</X>
                                              <Y>255</Y>
                                              <Z>255</Z>
                                              <R>255</R>
                                              <G>255</G>
                                              <B>255</B>
                                              <A>255</A>
                                            </FontColor>
                                            <BackgroundColor>
                                              <PackedValue>4278190080</PackedValue>
                                              <X>0</X>
                                              <Y>0</Y>
                                              <Z>0</Z>
                                              <R>0</R>
                                              <G>0</G>
                                              <B>0</B>
                                              <A>255</A>
                                            </BackgroundColor>
                                            <CurrentShownTexture>0</CurrentShownTexture>
                                          </MyObjectBuilder_CubeBlock>
                                        </CubeBlocks>
                                        <XMirroxPlane x="0" y="14" z="1" />
                                        <ConveyorLines>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="-1" y="14" z="6" />
                                            <StartDirection>Backward</StartDirection>
                                            <EndPosition x="-1" y="14" z="7" />
                                            <EndDirection>Forward</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="1" y="14" z="6" />
                                            <StartDirection>Backward</StartDirection>
                                            <EndPosition x="1" y="14" z="7" />
                                            <EndDirection>Forward</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="0" y="13" z="4" />
                                            <StartDirection>Forward</StartDirection>
                                            <EndPosition x="0" y="13" z="3" />
                                            <EndDirection>Backward</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="0" y="13" z="2" />
                                            <StartDirection>Backward</StartDirection>
                                            <EndPosition x="0" y="13" z="3" />
                                            <EndDirection>Forward</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="1" y="13" z="3" />
                                            <StartDirection>Left</StartDirection>
                                            <EndPosition x="0" y="13" z="3" />
                                            <EndDirection>Right</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="-1" y="13" z="3" />
                                            <StartDirection>Right</StartDirection>
                                            <EndPosition x="0" y="13" z="3" />
                                            <EndDirection>Left</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="0" y="14" z="9" />
                                            <StartDirection>Backward</StartDirection>
                                            <EndPosition x="0" y="14" z="10" />
                                            <EndDirection>Forward</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="0" y="13" z="0" />
                                            <StartDirection>Backward</StartDirection>
                                            <EndPosition x="0" y="13" z="1" />
                                            <EndDirection>Forward</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="0" y="13" z="2" />
                                            <StartDirection>Forward</StartDirection>
                                            <EndPosition x="0" y="13" z="1" />
                                            <EndDirection>Backward</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                          <MyObjectBuilder_ConveyorLine>
                                            <StartPosition x="1" y="14" z="10" />
                                            <StartDirection>Right</StartDirection>
                                            <EndPosition x="2" y="14" z="10" />
                                            <EndDirection>Left</EndDirection>
                                            <Sections />
                                            <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                          </MyObjectBuilder_ConveyorLine>
                                        </ConveyorLines>
                                        <BlockGroups>
                                          <MyObjectBuilder_BlockGroup>
                                            <Name>VC SC Wheels</Name>
                                            <Blocks>
                                              <Vector3I>
                                                <X>-1</X>
                                                <Y>12</Y>
                                                <Z>1</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>1</X>
                                                <Y>12</Y>
                                                <Z>1</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>-1</X>
                                                <Y>12</Y>
                                                <Z>9</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>1</X>
                                                <Y>12</Y>
                                                <Z>9</Z>
                                              </Vector3I>
                                            </Blocks>
                                          </MyObjectBuilder_BlockGroup>
                                          <MyObjectBuilder_BlockGroup>
                                            <Name>VC SC Thrusters</Name>
                                            <Blocks>
                                              <Vector3I>
                                                <X>-2</X>
                                                <Y>14</Y>
                                                <Z>7</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>2</X>
                                                <Y>14</Y>
                                                <Z>7</Z>
                                              </Vector3I>
                                            </Blocks>
                                          </MyObjectBuilder_BlockGroup>
                                          <MyObjectBuilder_BlockGroup>
                                            <Name>VC SC Artificial Mass</Name>
                                            <Blocks>
                                              <Vector3I>
                                                <X>-1</X>
                                                <Y>12</Y>
                                                <Z>8</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>1</X>
                                                <Y>12</Y>
                                                <Z>8</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>-1</X>
                                                <Y>12</Y>
                                                <Z>2</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>1</X>
                                                <Y>12</Y>
                                                <Z>2</Z>
                                              </Vector3I>
                                            </Blocks>
                                          </MyObjectBuilder_BlockGroup>
                                          <MyObjectBuilder_BlockGroup>
                                            <Name>VC SC Reactors</Name>
                                            <Blocks>
                                              <Vector3I>
                                                <X>1</X>
                                                <Y>13</Y>
                                                <Z>3</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>-1</X>
                                                <Y>13</Y>
                                                <Z>3</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>2</X>
                                                <Y>14</Y>
                                                <Z>10</Z>
                                              </Vector3I>
                                            </Blocks>
                                          </MyObjectBuilder_BlockGroup>
                                          <MyObjectBuilder_BlockGroup>
                                            <Name>VC SC Forward Lights</Name>
                                            <Blocks>
                                              <Vector3I>
                                                <X>-1</X>
                                                <Y>16</Y>
                                                <Z>7</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>1</X>
                                                <Y>16</Y>
                                                <Z>7</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>0</X>
                                                <Y>16</Y>
                                                <Z>7</Z>
                                              </Vector3I>
                                            </Blocks>
                                          </MyObjectBuilder_BlockGroup>
                                          <MyObjectBuilder_BlockGroup>
                                            <Name>VC SC Lights</Name>
                                            <Blocks>
                                              <Vector3I>
                                                <X>-2</X>
                                                <Y>14</Y>
                                                <Z>10</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>-1</X>
                                                <Y>16</Y>
                                                <Z>7</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>1</X>
                                                <Y>16</Y>
                                                <Z>7</Z>
                                              </Vector3I>
                                              <Vector3I>
                                                <X>0</X>
                                                <Y>16</Y>
                                                <Z>7</Z>
                                              </Vector3I>
                                            </Blocks>
                                          </MyObjectBuilder_BlockGroup>
                                        </BlockGroups>
                                        <Handbrake>true</Handbrake>
                                        <DisplayName>VC Scout Car</DisplayName>
                                        <OxygenAmount>
                                          <float>0</float>
                                          <float>0</float>
                                        </OxygenAmount>
                                        <DestructibleBlocks>true</DestructibleBlocks>
                                        <CreatePhysics>false</CreatePhysics>
                                        <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                                        <IsRespawnGrid>false</IsRespawnGrid>
                                        <LocalCoordSys>0</LocalCoordSys>
                                        <TargetingTargets />
                                      </ProjectedGrid>
                                      <ProjectionOffset>
                                        <X>-2</X>
                                        <Y>-13</Y>
                                        <Z>-4</Z>
                                      </ProjectionOffset>
                                      <ProjectionRotation>
                                        <X>0</X>
                                        <Y>0</Y>
                                        <Z>0</Z>
                                      </ProjectionRotation>
                                      <KeepProjection>true</KeepProjection>
                                      <ShowOnlyBuildable>false</ShowOnlyBuildable>
                                      <InstantBuildingEnabled>false</InstantBuildingEnabled>
                                      <MaxNumberOfProjections>5</MaxNumberOfProjections>
                                      <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                                      <ProjectionsRemaining>0</ProjectionsRemaining>
                                      <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="2" y="15" z="9" />
                                      <BlockOrientation Forward="Left" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                      <SubtypeName>TimerBlockSmall</SubtypeName>
                                      <EntityId>93049358804884376</EntityId>
                                      <Min x="2" y="13" z="6" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC LCD Timer Block</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Toolbar>
                                        <ToolbarType>Character</ToolbarType>
                                        <SelectedSlot xsi:nil="true" />
                                        <Slots>
                                          <Slot>
                                            <Index>0</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>Run</Action>
                                              <Parameters>
                                                <MyObjectBuilder_ToolbarItemActionParameter>
                                                  <TypeCode>String</TypeCode>
                                                  <Value />
                                                </MyObjectBuilder_ToolbarItemActionParameter>
                                              </Parameters>
                                              <BlockEntityId>131371508014857641</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>1</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>Start</Action>
                                              <BlockEntityId>93049358804884376</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>2</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>TriggerNow</Action>
                                              <BlockEntityId>93049358804884376</BlockEntityId>
                                            </Data>
                                          </Slot>
                                        </Slots>
                                      </Toolbar>
                                      <JustTriggered>true</JustTriggered>
                                      <Delay>1100</Delay>
                                      <CurrentTime>0</CurrentTime>
                                      <IsCountingDown>false</IsCountingDown>
                                      <Silent>true</Silent>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                      <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                      <EntityId>92415779286203364</EntityId>
                                      <Min x="-2" y="13" z="7" />
                                      <BlockOrientation Forward="Up" Up="Backward" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                      <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                      <EntityId>82610095450505821</EntityId>
                                      <Min x="2" y="13" z="7" />
                                      <BlockOrientation Forward="Up" Up="Backward" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="3" y="14" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                      <Min x="2" y="15" z="10" />
                                      <BlockOrientation Forward="Down" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                                      <SubtypeName>SmallProgrammableBlock</SubtypeName>
                                      <EntityId>131371508014857641</EntityId>
                                      <Min x="-2" y="14" z="8" />
                                      <BlockOrientation Forward="Right" Up="Up" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC LCD Programmable block</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                                      <Storage />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="0" y="12" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="0" y="12" z="8" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                      <Min x="0" y="12" z="9" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                      <SubtypeName>SmallSuspension3x3</SubtypeName>
                                      <EntityId>118026987796260461</EntityId>
                                      <Min x="-2" y="12" z="9" />
                                      <BlockOrientation Forward="Up" Up="Left" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <TopBlockId xsi:nil="true" />
                                      <ShareInertiaTensor>false</ShareInertiaTensor>
                                      <SafetyDetach xsi:nil="true" />
                                      <RotorEntityId>111927723370849685</RotorEntityId>
                                      <WeldedEntityId xsi:nil="true" />
                                      <SteerAngle>0</SteerAngle>
                                      <Damping>0.75</Damping>
                                      <Strength>0.18</Strength>
                                      <Propulsion>true</Propulsion>
                                      <Friction>2.4</Friction>
                                      <Power>0.5</Power>
                                      <Height>-0.32</Height>
                                      <MaxSteerAngle>0.32</MaxSteerAngle>
                                      <InvertSteer>false</InvertSteer>
                                      <InvertPropulsion>false</InvertPropulsion>
                                      <SpeedLimit>100.000008</SpeedLimit>
                                      <PowerNew>0.6</PowerNew>
                                      <StrengthNew>0.1</StrengthNew>
                                      <FrictionNew xsi:nil="true" />
                                      <AirShockEnabled>true</AirShockEnabled>
                                      <BrakingEnabled>true</BrakingEnabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                      <SubtypeName>SmallSuspension3x3</SubtypeName>
                                      <EntityId>107063739076831262</EntityId>
                                      <Min x="1" y="12" z="9" />
                                      <BlockOrientation Forward="Up" Up="Right" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <TopBlockId xsi:nil="true" />
                                      <ShareInertiaTensor>false</ShareInertiaTensor>
                                      <SafetyDetach xsi:nil="true" />
                                      <RotorEntityId>109379840401779538</RotorEntityId>
                                      <WeldedEntityId xsi:nil="true" />
                                      <SteerAngle>0</SteerAngle>
                                      <Damping>0.75</Damping>
                                      <Strength>0.18</Strength>
                                      <Propulsion>true</Propulsion>
                                      <Friction>2.4</Friction>
                                      <Power>0.5</Power>
                                      <Height>-0.32</Height>
                                      <MaxSteerAngle>0.32</MaxSteerAngle>
                                      <InvertSteer>false</InvertSteer>
                                      <InvertPropulsion>false</InvertPropulsion>
                                      <SpeedLimit>100.000008</SpeedLimit>
                                      <PowerNew>0.6</PowerNew>
                                      <StrengthNew>0.1</StrengthNew>
                                      <FrictionNew xsi:nil="true" />
                                      <AirShockEnabled>true</AirShockEnabled>
                                      <BrakingEnabled>true</BrakingEnabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                                      <SubtypeName>SmallBlockOreDetector</SubtypeName>
                                      <EntityId>121959171013148440</EntityId>
                                      <Min x="2" y="14" z="5" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Ore Detector </CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <DetectionRadius>50</DetectionRadius>
                                      <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <EntityId>129874631364089111</EntityId>
                                      <Min x="-2" y="12" z="6" />
                                      <IntegrityPercent>0.399999946</IntegrityPercent>
                                      <BuildPercent>0.399999946</BuildPercent>
                                      <BlockOrientation Forward="Left" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="1" y="12" z="0" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                                      <SubtypeName>SmallWheel3x3</SubtypeName>
                                      <EntityId>139574744232182197</EntityId>
                                      <Min x="3" y="12" z="4" />
                                      <BlockOrientation Forward="Forward" Up="Right" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <YieldLastComponent>true</YieldLastComponent>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <EntityId>73745976824118506</EntityId>
                                      <Min x="-3" y="12" z="6" />
                                      <IntegrityPercent>0.3600001</IntegrityPercent>
                                      <BuildPercent>0.3600001</BuildPercent>
                                      <BlockOrientation Forward="Right" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                      <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                      <EntityId>123642619472895521</EntityId>
                                      <Min x="-1" y="13" z="3" />
                                      <BlockOrientation Forward="Right" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <ComponentContainer>
                                        <Components>
                                          <ComponentData>
                                            <TypeId>MyInventoryBase</TypeId>
                                            <Component xsi:type="MyObjectBuilder_Inventory">
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2.33324</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                    <SubtypeName>Uranium</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>1</nextItemId>
                                              <Volume>0.125</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Component>
                                          </ComponentData>
                                        </Components>
                                      </ComponentContainer>
                                      <CustomName>VC SC Small Reactor 2</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Inventory>
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2.33324</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                              <SubtypeName>Uranium</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>1</nextItemId>
                                        <Volume>0.125</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Inventory>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                      <Min x="1" y="13" z="2" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                      <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                      <EntityId>142560007549840438</EntityId>
                                      <Min x="-2" y="14" z="10" />
                                      <BlockOrientation Forward="Backward" Up="Up" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <CustomName>VC SC Tail Light 1</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                      <Radius>1</Radius>
                                      <ReflectorRadius>20</ReflectorRadius>
                                      <ColorGreen>0.654902</ColorGreen>
                                      <ColorBlue>0.4117647</ColorBlue>
                                      <Falloff>1</Falloff>
                                      <Intensity>3</Intensity>
                                      <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                      <BlinkLenght>10</BlinkLenght>
                                      <BlinkOffset>0</BlinkOffset>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                      <Min x="1" y="13" z="1" />
                                      <BlockOrientation Forward="Backward" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="-1" y="12" z="4" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="1" y="12" z="4" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="1" y="12" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="-1" y="12" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="-1" y="12" z="6" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="1" y="12" z="6" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="3" y="15" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                      <SubtypeName>VirtualMassSmall</SubtypeName>
                                      <EntityId>121028760176624861</EntityId>
                                      <Min x="-1" y="12" z="8" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Artificial Mass</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                      <SubtypeName>VirtualMassSmall</SubtypeName>
                                      <EntityId>143958039439820047</EntityId>
                                      <Min x="1" y="12" z="8" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Artificial Mass</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="-3" y="15" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="3" y="13" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                      <SubtypeName>VirtualMassSmall</SubtypeName>
                                      <EntityId>101649439497833872</EntityId>
                                      <Min x="-1" y="12" z="2" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Artificial Mass</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                      <SubtypeName>VirtualMassSmall</SubtypeName>
                                      <EntityId>107696812043976329</EntityId>
                                      <Min x="1" y="12" z="2" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Artificial Mass</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                                      <SubtypeName>OxygenTankSmall</SubtypeName>
                                      <EntityId>140381581832582269</EntityId>
                                      <Min x="-1" y="13" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Up" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <ComponentContainer>
                                        <Components>
                                          <ComponentData>
                                            <TypeId>MyInventoryBase</TypeId>
                                            <Component xsi:type="MyObjectBuilder_Inventory">
                                              <Items />
                                              <nextItemId>0</nextItemId>
                                              <Volume>4</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Component>
                                          </ComponentData>
                                        </Components>
                                      </ComponentContainer>
                                      <CustomName>VC SC Oxygen Tank</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <IsStockpiling>false</IsStockpiling>
                                      <FilledRatio>1</FilledRatio>
                                      <Inventory>
                                        <Items />
                                        <nextItemId>0</nextItemId>
                                        <Volume>4</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Inventory>
                                      <AutoRefill>false</AutoRefill>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                      <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                      <EntityId>142394523503447362</EntityId>
                                      <Min x="1" y="16" z="7" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <CustomName>VC SC Spotlight</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                      <Radius>5</Radius>
                                      <ReflectorRadius>120</ReflectorRadius>
                                      <Falloff>1</Falloff>
                                      <Intensity>5</Intensity>
                                      <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                      <BlinkLenght>10</BlinkLenght>
                                      <BlinkOffset>0</BlinkOffset>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                      <Min x="-2" y="15" z="10" />
                                      <BlockOrientation Forward="Right" Up="Up" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="-3" y="14" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="-3" y="13" z="7" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                                      <SubtypeName>ConnectorMedium</SubtypeName>
                                      <EntityId>127152906374516016</EntityId>
                                      <Min x="-1" y="13" z="10" />
                                      <BlockOrientation Forward="Backward" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <DeformationRatio>0.5</DeformationRatio>
                                      <ComponentContainer>
                                        <Components>
                                          <ComponentData>
                                            <TypeId>MyInventoryBase</TypeId>
                                            <Component xsi:type="MyObjectBuilder_Inventory">
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>34</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>SteelPlate</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>Computer</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>1</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>12</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>SmallTube</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>2</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>6</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>Motor</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>3</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>42</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>Construction</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>4</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                                    <SubtypeName>LargeTube</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>5</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>1</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                                    <SubtypeName>OxygenBottle</SubtypeName>
                                                    <GasLevel>0</GasLevel>
                                                    <OxygenLevel>0</OxygenLevel>
                                                  </PhysicalContent>
                                                  <ItemId>6</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>1</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                                    <SubtypeName>HydrogenBottle</SubtypeName>
                                                    <GasLevel>0</GasLevel>
                                                  </PhysicalContent>
                                                  <ItemId>7</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>8</nextItemId>
                                              <Volume>1.152</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Component>
                                          </ComponentData>
                                        </Components>
                                      </ComponentContainer>
                                      <CustomName>VC SC Connector</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Inventory>
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>34</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>SteelPlate</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>Computer</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>1</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>12</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>SmallTube</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>2</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>6</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>Motor</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>3</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>42</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>Construction</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>4</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>LargeTube</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>5</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>1</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                              <SubtypeName>OxygenBottle</SubtypeName>
                                              <GasLevel>0</GasLevel>
                                              <OxygenLevel>0</OxygenLevel>
                                            </PhysicalContent>
                                            <ItemId>6</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>1</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                              <SubtypeName>HydrogenBottle</SubtypeName>
                                              <GasLevel>0</GasLevel>
                                            </PhysicalContent>
                                            <ItemId>7</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>8</nextItemId>
                                        <Volume>1.152</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Inventory>
                                      <MasterToSlaveTransform xsi:nil="true" />
                                      <MasterToSlaveGrid xsi:nil="true" />
                                      <IsMaster>true</IsMaster>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                      <SubtypeName>TimerBlockSmall</SubtypeName>
                                      <EntityId>100245666623628261</EntityId>
                                      <Min x="2" y="14" z="9" />
                                      <BlockOrientation Forward="Up" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Repair Projector Timer Block</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Toolbar>
                                        <ToolbarType>Character</ToolbarType>
                                        <SelectedSlot xsi:nil="true" />
                                        <Slots>
                                          <Slot>
                                            <Index>0</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>OnOff</Action>
                                              <BlockEntityId>78030332643612284</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>1</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>OnOff</Action>
                                              <BlockEntityId>92480570575034220</BlockEntityId>
                                            </Data>
                                          </Slot>
                                          <Slot>
                                            <Index>2</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                              <Action>OnOff</Action>
                                              <BlockEntityId>111353767120109210</BlockEntityId>
                                            </Data>
                                          </Slot>
                                        </Slots>
                                      </Toolbar>
                                      <Delay>1100</Delay>
                                      <CurrentTime>0</CurrentTime>
                                      <IsCountingDown>false</IsCountingDown>
                                      <Silent>false</Silent>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="3" y="14" z="8" />
                                      <BlockOrientation Forward="Forward" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="-3" y="14" z="10" />
                                      <BlockOrientation Forward="Forward" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                                      <SubtypeName>SmallCameraBlock</SubtypeName>
                                      <EntityId>120252882816328092</EntityId>
                                      <Min x="0" y="12" z="10" />
                                      <BlockOrientation Forward="Backward" Up="Up" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Camera</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <IsActive>false</IsActive>
                                      <Fov>1.04719758</Fov>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                      <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                      <EntityId>74151131902176967</EntityId>
                                      <Min x="2" y="14" z="10" />
                                      <BlockOrientation Forward="Left" Up="Up" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <ComponentContainer>
                                        <Components>
                                          <ComponentData>
                                            <TypeId>MyInventoryBase</TypeId>
                                            <Component xsi:type="MyObjectBuilder_Inventory">
                                              <Items>
                                                <MyObjectBuilder_InventoryItem>
                                                  <Amount>2.33324</Amount>
                                                  <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                                    <SubtypeName>Uranium</SubtypeName>
                                                  </PhysicalContent>
                                                  <ItemId>0</ItemId>
                                                </MyObjectBuilder_InventoryItem>
                                              </Items>
                                              <nextItemId>1</nextItemId>
                                              <Volume>0.125</Volume>
                                              <Mass>9223372036854.775807</Mass>
                                              <MaxItemCount>2147483647</MaxItemCount>
                                              <Size xsi:nil="true" />
                                              <InventoryFlags>CanReceive</InventoryFlags>
                                              <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                            </Component>
                                          </ComponentData>
                                        </Components>
                                      </ComponentContainer>
                                      <CustomName>VC SC Small Reactor 3</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>false</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Inventory>
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2.33324</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                              <SubtypeName>Uranium</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>1</nextItemId>
                                        <Volume>0.125</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Inventory>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                                      <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                                      <EntityId>74072395174758701</EntityId>
                                      <Min x="-2" y="14" z="9" />
                                      <BlockOrientation Forward="Up" Up="Left" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Antenna </CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <BroadcastRadius>500</BroadcastRadius>
                                      <ShowShipName>true</ShowShipName>
                                      <EnableBroadcasting>true</EnableBroadcasting>
                                      <AttachedPB>0</AttachedPB>
                                      <IgnoreAllied>false</IgnoreAllied>
                                      <IgnoreOther>true</IgnoreOther>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="-3" y="15" z="8" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <Min x="3" y="15" z="8" />
                                      <BlockOrientation Forward="Forward" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                      <Min x="-2" y="15" z="8" />
                                      <BlockOrientation Forward="Backward" Up="Right" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                      <Min x="2" y="15" z="8" />
                                      <BlockOrientation Forward="Backward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <EntityId>111288736175341011</EntityId>
                                      <Min x="-3" y="12" z="5" />
                                      <IntegrityPercent>0.3600001</IntegrityPercent>
                                      <BuildPercent>0.3600001</BuildPercent>
                                      <BlockOrientation Forward="Right" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                      <EntityId>133622400815566330</EntityId>
                                      <Min x="-2" y="12" z="5" />
                                      <IntegrityPercent>0.399999946</IntegrityPercent>
                                      <BuildPercent>0.399999946</BuildPercent>
                                      <BlockOrientation Forward="Left" Up="Down" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="1" y="12" z="3" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                                      <SubtypeName>ButtonPanelSmall</SubtypeName>
                                      <EntityId>107157628319474948</EntityId>
                                      <Min x="-3" y="13" z="4" />
                                      <BlockOrientation Forward="Forward" Up="Left" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Button Panel</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                      <Toolbar>
                                        <ToolbarType>Character</ToolbarType>
                                        <SelectedSlot xsi:nil="true" />
                                        <Slots>
                                          <Slot>
                                            <Index>0</Index>
                                            <Item />
                                            <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                              <Action>OnOff</Action>
                                              <GridEntityId>0</GridEntityId>
                                              <BlockEntityId>107157628319474948</BlockEntityId>
                                              <GroupName>VC SC Lights</GroupName>
                                            </Data>
                                          </Slot>
                                        </Slots>
                                      </Toolbar>
                                      <AnyoneCanUse>false</AnyoneCanUse>
                                      <CustomButtonNames>
                                        <dictionary>
                                          <item>
                                            <Key>0</Key>
                                            <Value>VC SC Lights</Value>
                                          </item>
                                        </dictionary>
                                      </CustomButtonNames>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="-1" y="12" z="3" />
                                      <BlockOrientation Forward="Forward" Up="Down" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="1" y="12" z="10" />
                                      <BlockOrientation Forward="Up" Up="Backward" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                      <Min x="-1" y="12" z="10" />
                                      <BlockOrientation Forward="Up" Up="Backward" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
                                      <SubtypeName>SmallBlockGyro</SubtypeName>
                                      <EntityId>122719714305163029</EntityId>
                                      <Min x="2" y="14" z="8" />
                                      <BlockOrientation Forward="Down" Up="Right" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                      <ShareMode>All</ShareMode>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>true</Enabled>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="-2" y="14" z="6" />
                                      <BlockOrientation Forward="Down" Up="Forward" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                      <Min x="-2" y="14" z="5" />
                                      <BlockOrientation Forward="Down" Up="Backward" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <EntityId>123283857809156609</EntityId>
                                      <Min x="-3" y="13" z="6" />
                                      <IntegrityPercent>0.7333333</IntegrityPercent>
                                      <BuildPercent>0.7333333</BuildPercent>
                                      <BlockOrientation Forward="Right" Up="Up" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                      <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                      <EntityId>87878822693770000</EntityId>
                                      <Min x="-3" y="13" z="5" />
                                      <IntegrityPercent>0.7333333</IntegrityPercent>
                                      <BuildPercent>0.7333333</BuildPercent>
                                      <BlockOrientation Forward="Right" Up="Backward" />
                                      <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                      <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                      <EntityId>113986323664849651</EntityId>
                                      <Min x="-1" y="16" z="7" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <CustomName>VC SC Spotlight </CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                      <Radius>5</Radius>
                                      <ReflectorRadius>120</ReflectorRadius>
                                      <Falloff>1</Falloff>
                                      <Intensity>5</Intensity>
                                      <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                      <BlinkLenght>10</BlinkLenght>
                                      <BlinkOffset>0</BlinkOffset>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                      <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                      <EntityId>99489843989382163</EntityId>
                                      <Min x="0" y="16" z="7" />
                                      <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                      <CustomName>VC SC Spotlight </CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                      <Radius>5</Radius>
                                      <ReflectorRadius>120</ReflectorRadius>
                                      <Falloff>1</Falloff>
                                      <Intensity>5</Intensity>
                                      <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                      <BlinkLenght>10</BlinkLenght>
                                      <BlinkOffset>0</BlinkOffset>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                      <SubtypeName>SmallTextPanel</SubtypeName>
                                      <EntityId>111353767120109210</EntityId>
                                      <Min x="0" y="14" z="1" />
                                      <BlockOrientation Forward="Down" Up="Forward" />
                                      <ShareMode>All</ShareMode>
                                      <CustomName>VC SC Front Piston Jack Attach Point Sign</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                      <Description />
                                      <Title>Title</Title>
                                      <AccessFlag>READ_AND_WRITE_ALL</AccessFlag>
                                      <ChangeInterval>1</ChangeInterval>
                                      <SelectedImages>
                                        <string>Arrow</string>
                                        <string>Construction</string>
                                      </SelectedImages>
                                      <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                      <FontSize>1</FontSize>
                                      <PublicDescription />
                                      <PublicTitle>Public title</PublicTitle>
                                      <ShowText>NONE</ShowText>
                                      <FontColor>
                                        <PackedValue>4294967295</PackedValue>
                                        <X>255</X>
                                        <Y>255</Y>
                                        <Z>255</Z>
                                        <R>255</R>
                                        <G>255</G>
                                        <B>255</B>
                                        <A>255</A>
                                      </FontColor>
                                      <BackgroundColor>
                                        <PackedValue>4278190080</PackedValue>
                                        <X>0</X>
                                        <Y>0</Y>
                                        <Z>0</Z>
                                        <R>0</R>
                                        <G>0</G>
                                        <B>0</B>
                                        <A>255</A>
                                      </BackgroundColor>
                                      <CurrentShownTexture>0</CurrentShownTexture>
                                    </MyObjectBuilder_CubeBlock>
                                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                      <SubtypeName>SmallTextPanel</SubtypeName>
                                      <EntityId>92480570575034220</EntityId>
                                      <Min x="2" y="13" z="10" />
                                      <BlockOrientation Forward="Left" Up="Up" />
                                      <CustomName>VC SC Rear Piston Jack Attach Point Sign</CustomName>
                                      <ShowOnHUD>false</ShowOnHUD>
                                      <ShowInTerminal>true</ShowInTerminal>
                                      <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                      <ShowInInventory>true</ShowInInventory>
                                      <Enabled>false</Enabled>
                                      <Description />
                                      <Title>Title</Title>
                                      <AccessFlag>READ_AND_WRITE_ALL</AccessFlag>
                                      <ChangeInterval>1</ChangeInterval>
                                      <SelectedImages>
                                        <string>Arrow</string>
                                        <string>Construction</string>
                                      </SelectedImages>
                                      <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                      <FontSize>1.6</FontSize>
                                      <PublicDescription />
                                      <PublicTitle>Public title</PublicTitle>
                                      <ShowText>NONE</ShowText>
                                      <FontColor>
                                        <PackedValue>4294967295</PackedValue>
                                        <X>255</X>
                                        <Y>255</Y>
                                        <Z>255</Z>
                                        <R>255</R>
                                        <G>255</G>
                                        <B>255</B>
                                        <A>255</A>
                                      </FontColor>
                                      <BackgroundColor>
                                        <PackedValue>4278190080</PackedValue>
                                        <X>0</X>
                                        <Y>0</Y>
                                        <Z>0</Z>
                                        <R>0</R>
                                        <G>0</G>
                                        <B>0</B>
                                        <A>255</A>
                                      </BackgroundColor>
                                      <CurrentShownTexture>0</CurrentShownTexture>
                                    </MyObjectBuilder_CubeBlock>
                                  </CubeBlocks>
                                  <XMirroxPlane x="0" y="14" z="1" />
                                  <ConveyorLines>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="-1" y="14" z="6" />
                                      <StartDirection>Backward</StartDirection>
                                      <EndPosition x="-1" y="14" z="7" />
                                      <EndDirection>Forward</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="1" y="14" z="6" />
                                      <StartDirection>Backward</StartDirection>
                                      <EndPosition x="1" y="14" z="7" />
                                      <EndDirection>Forward</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="0" y="13" z="4" />
                                      <StartDirection>Forward</StartDirection>
                                      <EndPosition x="0" y="13" z="3" />
                                      <EndDirection>Backward</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="0" y="13" z="2" />
                                      <StartDirection>Backward</StartDirection>
                                      <EndPosition x="0" y="13" z="3" />
                                      <EndDirection>Forward</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="1" y="13" z="3" />
                                      <StartDirection>Left</StartDirection>
                                      <EndPosition x="0" y="13" z="3" />
                                      <EndDirection>Right</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="-1" y="13" z="3" />
                                      <StartDirection>Right</StartDirection>
                                      <EndPosition x="0" y="13" z="3" />
                                      <EndDirection>Left</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="0" y="14" z="9" />
                                      <StartDirection>Backward</StartDirection>
                                      <EndPosition x="0" y="14" z="10" />
                                      <EndDirection>Forward</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="0" y="13" z="0" />
                                      <StartDirection>Backward</StartDirection>
                                      <EndPosition x="0" y="13" z="1" />
                                      <EndDirection>Forward</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="0" y="13" z="2" />
                                      <StartDirection>Forward</StartDirection>
                                      <EndPosition x="0" y="13" z="1" />
                                      <EndDirection>Backward</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                    <MyObjectBuilder_ConveyorLine>
                                      <StartPosition x="1" y="14" z="10" />
                                      <StartDirection>Right</StartDirection>
                                      <EndPosition x="2" y="14" z="10" />
                                      <EndDirection>Left</EndDirection>
                                      <Sections />
                                      <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                                    </MyObjectBuilder_ConveyorLine>
                                  </ConveyorLines>
                                  <BlockGroups>
                                    <MyObjectBuilder_BlockGroup>
                                      <Name>VC SC Wheels</Name>
                                      <Blocks>
                                        <Vector3I>
                                          <X>-1</X>
                                          <Y>12</Y>
                                          <Z>1</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>1</X>
                                          <Y>12</Y>
                                          <Z>1</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>-1</X>
                                          <Y>12</Y>
                                          <Z>9</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>1</X>
                                          <Y>12</Y>
                                          <Z>9</Z>
                                        </Vector3I>
                                      </Blocks>
                                    </MyObjectBuilder_BlockGroup>
                                    <MyObjectBuilder_BlockGroup>
                                      <Name>VC SC Thrusters</Name>
                                      <Blocks>
                                        <Vector3I>
                                          <X>-2</X>
                                          <Y>14</Y>
                                          <Z>7</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>2</X>
                                          <Y>14</Y>
                                          <Z>7</Z>
                                        </Vector3I>
                                      </Blocks>
                                    </MyObjectBuilder_BlockGroup>
                                    <MyObjectBuilder_BlockGroup>
                                      <Name>VC SC Artificial Mass</Name>
                                      <Blocks>
                                        <Vector3I>
                                          <X>-1</X>
                                          <Y>12</Y>
                                          <Z>8</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>1</X>
                                          <Y>12</Y>
                                          <Z>8</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>-1</X>
                                          <Y>12</Y>
                                          <Z>2</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>1</X>
                                          <Y>12</Y>
                                          <Z>2</Z>
                                        </Vector3I>
                                      </Blocks>
                                    </MyObjectBuilder_BlockGroup>
                                    <MyObjectBuilder_BlockGroup>
                                      <Name>VC SC Reactors</Name>
                                      <Blocks>
                                        <Vector3I>
                                          <X>1</X>
                                          <Y>13</Y>
                                          <Z>3</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>-1</X>
                                          <Y>13</Y>
                                          <Z>3</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>2</X>
                                          <Y>14</Y>
                                          <Z>10</Z>
                                        </Vector3I>
                                      </Blocks>
                                    </MyObjectBuilder_BlockGroup>
                                    <MyObjectBuilder_BlockGroup>
                                      <Name>VC SC Forward Lights</Name>
                                      <Blocks>
                                        <Vector3I>
                                          <X>-1</X>
                                          <Y>16</Y>
                                          <Z>7</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>1</X>
                                          <Y>16</Y>
                                          <Z>7</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>0</X>
                                          <Y>16</Y>
                                          <Z>7</Z>
                                        </Vector3I>
                                      </Blocks>
                                    </MyObjectBuilder_BlockGroup>
                                    <MyObjectBuilder_BlockGroup>
                                      <Name>VC SC Lights</Name>
                                      <Blocks>
                                        <Vector3I>
                                          <X>-2</X>
                                          <Y>14</Y>
                                          <Z>10</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>-1</X>
                                          <Y>16</Y>
                                          <Z>7</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>1</X>
                                          <Y>16</Y>
                                          <Z>7</Z>
                                        </Vector3I>
                                        <Vector3I>
                                          <X>0</X>
                                          <Y>16</Y>
                                          <Z>7</Z>
                                        </Vector3I>
                                      </Blocks>
                                    </MyObjectBuilder_BlockGroup>
                                  </BlockGroups>
                                  <Handbrake>true</Handbrake>
                                  <DisplayName>VC Scout Car</DisplayName>
                                  <OxygenAmount>
                                    <float>0</float>
                                    <float>0</float>
                                  </OxygenAmount>
                                  <DestructibleBlocks>true</DestructibleBlocks>
                                  <CreatePhysics>false</CreatePhysics>
                                  <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                                  <IsRespawnGrid>false</IsRespawnGrid>
                                  <LocalCoordSys>0</LocalCoordSys>
                                  <TargetingTargets />
                                </ProjectedGrid>
                                <ProjectionOffset>
                                  <X>-2</X>
                                  <Y>-13</Y>
                                  <Z>-4</Z>
                                </ProjectionOffset>
                                <ProjectionRotation>
                                  <X>0</X>
                                  <Y>0</Y>
                                  <Z>0</Z>
                                </ProjectionRotation>
                                <KeepProjection>true</KeepProjection>
                                <ShowOnlyBuildable>false</ShowOnlyBuildable>
                                <InstantBuildingEnabled>false</InstantBuildingEnabled>
                                <MaxNumberOfProjections>5</MaxNumberOfProjections>
                                <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                                <ProjectionsRemaining>0</ProjectionsRemaining>
                                <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                <Min x="2" y="15" z="9" />
                                <BlockOrientation Forward="Left" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                <SubtypeName>TimerBlockSmall</SubtypeName>
                                <EntityId>128795827204367936</EntityId>
                                <Min x="2" y="13" z="6" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC LCD Timer Block</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Toolbar>
                                  <ToolbarType>Character</ToolbarType>
                                  <SelectedSlot xsi:nil="true" />
                                  <Slots>
                                    <Slot>
                                      <Index>0</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>Run</Action>
                                        <Parameters>
                                          <MyObjectBuilder_ToolbarItemActionParameter>
                                            <TypeCode>String</TypeCode>
                                            <Value />
                                          </MyObjectBuilder_ToolbarItemActionParameter>
                                        </Parameters>
                                        <BlockEntityId>99362620075059927</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>1</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>Start</Action>
                                        <BlockEntityId>128795827204367936</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>2</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>TriggerNow</Action>
                                        <BlockEntityId>128795827204367936</BlockEntityId>
                                      </Data>
                                    </Slot>
                                  </Slots>
                                </Toolbar>
                                <JustTriggered>true</JustTriggered>
                                <Delay>1100</Delay>
                                <CurrentTime>0</CurrentTime>
                                <IsCountingDown>false</IsCountingDown>
                                <Silent>true</Silent>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                <EntityId>116636638014061165</EntityId>
                                <Min x="-2" y="13" z="7" />
                                <BlockOrientation Forward="Up" Up="Backward" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                                <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                                <EntityId>107888753823134102</EntityId>
                                <Min x="2" y="13" z="7" />
                                <BlockOrientation Forward="Up" Up="Backward" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                <Min x="3" y="14" z="7" />
                                <BlockOrientation Forward="Backward" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                <Min x="2" y="15" z="10" />
                                <BlockOrientation Forward="Down" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                                <SubtypeName>SmallProgrammableBlock</SubtypeName>
                                <EntityId>99362620075059927</EntityId>
                                <Min x="-2" y="14" z="8" />
                                <BlockOrientation Forward="Right" Up="Up" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC LCD Programmable block</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                                <Storage />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <Min x="0" y="12" z="7" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="0" y="12" z="8" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                                <Min x="0" y="12" z="9" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                <SubtypeName>SmallSuspension3x3</SubtypeName>
                                <EntityId>79620192528289970</EntityId>
                                <Min x="-2" y="12" z="9" />
                                <BlockOrientation Forward="Up" Up="Left" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <TopBlockId xsi:nil="true" />
                                <ShareInertiaTensor>false</ShareInertiaTensor>
                                <SafetyDetach xsi:nil="true" />
                                <RotorEntityId>92827842395787009</RotorEntityId>
                                <WeldedEntityId xsi:nil="true" />
                                <SteerAngle>0</SteerAngle>
                                <Damping>0.75</Damping>
                                <Strength>0.18</Strength>
                                <Propulsion>true</Propulsion>
                                <Friction>2.4</Friction>
                                <Power>0.5</Power>
                                <Height>-0.32</Height>
                                <MaxSteerAngle>0.32</MaxSteerAngle>
                                <InvertSteer>false</InvertSteer>
                                <InvertPropulsion>false</InvertPropulsion>
                                <SpeedLimit>100.000008</SpeedLimit>
                                <PowerNew>0.6</PowerNew>
                                <StrengthNew>0.1</StrengthNew>
                                <FrictionNew xsi:nil="true" />
                                <AirShockEnabled>true</AirShockEnabled>
                                <BrakingEnabled>true</BrakingEnabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                                <SubtypeName>SmallSuspension3x3</SubtypeName>
                                <EntityId>124377673416634787</EntityId>
                                <Min x="1" y="12" z="9" />
                                <BlockOrientation Forward="Up" Up="Right" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <TopBlockId xsi:nil="true" />
                                <ShareInertiaTensor>false</ShareInertiaTensor>
                                <SafetyDetach xsi:nil="true" />
                                <RotorEntityId>125197750911566855</RotorEntityId>
                                <WeldedEntityId xsi:nil="true" />
                                <SteerAngle>0</SteerAngle>
                                <Damping>0.75</Damping>
                                <Strength>0.18</Strength>
                                <Propulsion>true</Propulsion>
                                <Friction>2.4</Friction>
                                <Power>0.5</Power>
                                <Height>-0.32</Height>
                                <MaxSteerAngle>0.32</MaxSteerAngle>
                                <InvertSteer>false</InvertSteer>
                                <InvertPropulsion>false</InvertPropulsion>
                                <SpeedLimit>100.000008</SpeedLimit>
                                <PowerNew>0.6</PowerNew>
                                <StrengthNew>0.1</StrengthNew>
                                <FrictionNew xsi:nil="true" />
                                <AirShockEnabled>true</AirShockEnabled>
                                <BrakingEnabled>true</BrakingEnabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                                <SubtypeName>SmallBlockOreDetector</SubtypeName>
                                <EntityId>120107802471951146</EntityId>
                                <Min x="2" y="14" z="5" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Ore Detector </CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <DetectionRadius>50</DetectionRadius>
                                <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <EntityId>116340541221716127</EntityId>
                                <Min x="-2" y="12" z="6" />
                                <IntegrityPercent>0.399999946</IntegrityPercent>
                                <BuildPercent>0.399999946</BuildPercent>
                                <BlockOrientation Forward="Left" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="1" y="12" z="0" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                                <SubtypeName>SmallWheel3x3</SubtypeName>
                                <EntityId>127716312747856360</EntityId>
                                <Min x="3" y="12" z="4" />
                                <BlockOrientation Forward="Forward" Up="Right" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <YieldLastComponent>true</YieldLastComponent>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <EntityId>121082730697242647</EntityId>
                                <Min x="-3" y="12" z="6" />
                                <IntegrityPercent>0.3600001</IntegrityPercent>
                                <BuildPercent>0.3600001</BuildPercent>
                                <BlockOrientation Forward="Right" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                <EntityId>119718895566240146</EntityId>
                                <Min x="-1" y="13" z="3" />
                                <BlockOrientation Forward="Right" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <ComponentContainer>
                                  <Components>
                                    <ComponentData>
                                      <TypeId>MyInventoryBase</TypeId>
                                      <Component xsi:type="MyObjectBuilder_Inventory">
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2.549898</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                              <SubtypeName>Uranium</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>1</nextItemId>
                                        <Volume>0.125</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Component>
                                    </ComponentData>
                                  </Components>
                                </ComponentContainer>
                                <CustomName>VC SC Small Reactor 2</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Inventory>
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>2.549898</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                        <SubtypeName>Uranium</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>1</nextItemId>
                                  <Volume>0.125</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Inventory>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                <Min x="1" y="13" z="2" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                <EntityId>127403026152582470</EntityId>
                                <Min x="-2" y="14" z="10" />
                                <BlockOrientation Forward="Backward" Up="Up" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <CustomName>VC SC Tail Light 1</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                                <Radius>1</Radius>
                                <ReflectorRadius>20</ReflectorRadius>
                                <ColorGreen>0.654902</ColorGreen>
                                <ColorBlue>0.4117647</ColorBlue>
                                <Falloff>1</Falloff>
                                <Intensity>3</Intensity>
                                <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                <BlinkLenght>10</BlinkLenght>
                                <BlinkOffset>0</BlinkOffset>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                                <Min x="1" y="13" z="1" />
                                <BlockOrientation Forward="Backward" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <Min x="-1" y="12" z="4" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <Min x="1" y="12" z="4" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="1" y="12" z="7" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="-1" y="12" z="7" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <Min x="-1" y="12" z="6" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <Min x="1" y="12" z="6" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <Min x="3" y="15" z="7" />
                                <BlockOrientation Forward="Backward" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                <SubtypeName>VirtualMassSmall</SubtypeName>
                                <EntityId>88786044425992294</EntityId>
                                <Min x="-1" y="12" z="8" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Artificial Mass</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                <SubtypeName>VirtualMassSmall</SubtypeName>
                                <EntityId>104860499922732069</EntityId>
                                <Min x="1" y="12" z="8" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Artificial Mass</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <Min x="-3" y="15" z="7" />
                                <BlockOrientation Forward="Backward" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <Min x="3" y="13" z="7" />
                                <BlockOrientation Forward="Backward" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                <SubtypeName>VirtualMassSmall</SubtypeName>
                                <EntityId>78560322205862289</EntityId>
                                <Min x="-1" y="12" z="2" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Artificial Mass</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                                <SubtypeName>VirtualMassSmall</SubtypeName>
                                <EntityId>103916608669773351</EntityId>
                                <Min x="1" y="12" z="2" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Artificial Mass</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                                <SubtypeName>OxygenTankSmall</SubtypeName>
                                <EntityId>123313640738398953</EntityId>
                                <Min x="-1" y="13" z="7" />
                                <BlockOrientation Forward="Backward" Up="Up" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <ComponentContainer>
                                  <Components>
                                    <ComponentData>
                                      <TypeId>MyInventoryBase</TypeId>
                                      <Component xsi:type="MyObjectBuilder_Inventory">
                                        <Items />
                                        <nextItemId>0</nextItemId>
                                        <Volume>4</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Component>
                                    </ComponentData>
                                  </Components>
                                </ComponentContainer>
                                <CustomName>VC SC Oxygen Tank</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <IsStockpiling>false</IsStockpiling>
                                <FilledRatio>1</FilledRatio>
                                <Inventory>
                                  <Items />
                                  <nextItemId>0</nextItemId>
                                  <Volume>4</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Inventory>
                                <AutoRefill>false</AutoRefill>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                <EntityId>128298881379856371</EntityId>
                                <Min x="1" y="16" z="7" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <CustomName>VC SC Spotlight</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                                <Radius>5</Radius>
                                <ReflectorRadius>120</ReflectorRadius>
                                <Falloff>1</Falloff>
                                <Intensity>5</Intensity>
                                <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                <BlinkLenght>10</BlinkLenght>
                                <BlinkOffset>0</BlinkOffset>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                                <Min x="-2" y="15" z="10" />
                                <BlockOrientation Forward="Right" Up="Up" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                <Min x="-3" y="14" z="7" />
                                <BlockOrientation Forward="Backward" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <Min x="-3" y="13" z="7" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                                <SubtypeName>ConnectorMedium</SubtypeName>
                                <EntityId>134256371689239421</EntityId>
                                <Min x="-1" y="13" z="10" />
                                <BlockOrientation Forward="Backward" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <DeformationRatio>0.5</DeformationRatio>
                                <ComponentContainer>
                                  <Components>
                                    <ComponentData>
                                      <TypeId>MyInventoryBase</TypeId>
                                      <Component xsi:type="MyObjectBuilder_Inventory">
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>34</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>SteelPlate</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>Computer</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>1</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>12</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>SmallTube</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>2</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>6</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>Motor</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>3</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>42</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>Construction</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>4</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                              <SubtypeName>LargeTube</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>5</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>1</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                              <SubtypeName>OxygenBottle</SubtypeName>
                                              <GasLevel>0</GasLevel>
                                              <OxygenLevel>0</OxygenLevel>
                                            </PhysicalContent>
                                            <ItemId>6</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>1</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                              <SubtypeName>HydrogenBottle</SubtypeName>
                                              <GasLevel>0</GasLevel>
                                            </PhysicalContent>
                                            <ItemId>7</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>8</nextItemId>
                                        <Volume>1.152</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Component>
                                    </ComponentData>
                                  </Components>
                                </ComponentContainer>
                                <CustomName>VC SC Connector</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Inventory>
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>34</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>SteelPlate</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>2</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>Computer</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>1</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>12</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>SmallTube</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>2</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>6</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>Motor</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>3</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>42</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>Construction</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>4</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>2</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>LargeTube</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>5</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>1</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                        <SubtypeName>OxygenBottle</SubtypeName>
                                        <GasLevel>0</GasLevel>
                                        <OxygenLevel>0</OxygenLevel>
                                      </PhysicalContent>
                                      <ItemId>6</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>1</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                        <SubtypeName>HydrogenBottle</SubtypeName>
                                        <GasLevel>0</GasLevel>
                                      </PhysicalContent>
                                      <ItemId>7</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>8</nextItemId>
                                  <Volume>1.152</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Inventory>
                                <MasterToSlaveTransform xsi:nil="true" />
                                <MasterToSlaveGrid xsi:nil="true" />
                                <IsMaster>true</IsMaster>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                                <SubtypeName>TimerBlockSmall</SubtypeName>
                                <EntityId>95519143933491588</EntityId>
                                <Min x="2" y="14" z="9" />
                                <BlockOrientation Forward="Up" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Repair Projector Timer Block</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Toolbar>
                                  <ToolbarType>Character</ToolbarType>
                                  <SelectedSlot xsi:nil="true" />
                                  <Slots>
                                    <Slot>
                                      <Index>0</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>OnOff</Action>
                                        <BlockEntityId>72908132733296140</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>1</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>OnOff</Action>
                                        <BlockEntityId>108474635011797240</BlockEntityId>
                                      </Data>
                                    </Slot>
                                    <Slot>
                                      <Index>2</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                        <Action>OnOff</Action>
                                        <BlockEntityId>131265638075691233</BlockEntityId>
                                      </Data>
                                    </Slot>
                                  </Slots>
                                </Toolbar>
                                <Delay>1100</Delay>
                                <CurrentTime>0</CurrentTime>
                                <IsCountingDown>false</IsCountingDown>
                                <Silent>false</Silent>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                <Min x="3" y="14" z="8" />
                                <BlockOrientation Forward="Forward" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                <Min x="-3" y="14" z="10" />
                                <BlockOrientation Forward="Forward" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                                <SubtypeName>SmallCameraBlock</SubtypeName>
                                <EntityId>123677925820358715</EntityId>
                                <Min x="0" y="12" z="10" />
                                <BlockOrientation Forward="Backward" Up="Up" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Camera</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <IsActive>false</IsActive>
                                <Fov>1.04719758</Fov>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                                <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                                <EntityId>92978899993781970</EntityId>
                                <Min x="2" y="14" z="10" />
                                <BlockOrientation Forward="Left" Up="Up" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <ComponentContainer>
                                  <Components>
                                    <ComponentData>
                                      <TypeId>MyInventoryBase</TypeId>
                                      <Component xsi:type="MyObjectBuilder_Inventory">
                                        <Items>
                                          <MyObjectBuilder_InventoryItem>
                                            <Amount>2.549898</Amount>
                                            <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                              <SubtypeName>Uranium</SubtypeName>
                                            </PhysicalContent>
                                            <ItemId>0</ItemId>
                                          </MyObjectBuilder_InventoryItem>
                                        </Items>
                                        <nextItemId>1</nextItemId>
                                        <Volume>0.125</Volume>
                                        <Mass>9223372036854.775807</Mass>
                                        <MaxItemCount>2147483647</MaxItemCount>
                                        <Size xsi:nil="true" />
                                        <InventoryFlags>CanReceive</InventoryFlags>
                                        <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                      </Component>
                                    </ComponentData>
                                  </Components>
                                </ComponentContainer>
                                <CustomName>VC SC Small Reactor 3</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>false</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Inventory>
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>2.549898</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                        <SubtypeName>Uranium</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>1</nextItemId>
                                  <Volume>0.125</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Inventory>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                                <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                                <EntityId>114337212133667652</EntityId>
                                <Min x="-2" y="14" z="9" />
                                <BlockOrientation Forward="Up" Up="Left" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Antenna </CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <BroadcastRadius>500</BroadcastRadius>
                                <ShowShipName>true</ShowShipName>
                                <EnableBroadcasting>true</EnableBroadcasting>
                                <AttachedPB>0</AttachedPB>
                                <IgnoreAllied>false</IgnoreAllied>
                                <IgnoreOther>true</IgnoreOther>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <Min x="-3" y="15" z="8" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <Min x="3" y="15" z="8" />
                                <BlockOrientation Forward="Forward" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                <Min x="-2" y="15" z="8" />
                                <BlockOrientation Forward="Backward" Up="Right" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                                <Min x="2" y="15" z="8" />
                                <BlockOrientation Forward="Backward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <EntityId>80968841574048130</EntityId>
                                <Min x="-3" y="12" z="5" />
                                <IntegrityPercent>0.3600001</IntegrityPercent>
                                <BuildPercent>0.3600001</BuildPercent>
                                <BlockOrientation Forward="Right" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                                <EntityId>97770961589848721</EntityId>
                                <Min x="-2" y="12" z="5" />
                                <IntegrityPercent>0.399999946</IntegrityPercent>
                                <BuildPercent>0.399999946</BuildPercent>
                                <BlockOrientation Forward="Left" Up="Down" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="1" y="12" z="3" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                                <SubtypeName>ButtonPanelSmall</SubtypeName>
                                <EntityId>124911219827043438</EntityId>
                                <Min x="-3" y="13" z="4" />
                                <BlockOrientation Forward="Forward" Up="Left" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Button Panel</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                                <Toolbar>
                                  <ToolbarType>Character</ToolbarType>
                                  <SelectedSlot xsi:nil="true" />
                                  <Slots>
                                    <Slot>
                                      <Index>0</Index>
                                      <Item />
                                      <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                        <Action>OnOff</Action>
                                        <GridEntityId>0</GridEntityId>
                                        <BlockEntityId>124911219827043438</BlockEntityId>
                                        <GroupName>VC SC Lights</GroupName>
                                      </Data>
                                    </Slot>
                                  </Slots>
                                </Toolbar>
                                <AnyoneCanUse>false</AnyoneCanUse>
                                <CustomButtonNames>
                                  <dictionary>
                                    <item>
                                      <Key>0</Key>
                                      <Value>VC SC Lights</Value>
                                    </item>
                                  </dictionary>
                                </CustomButtonNames>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="-1" y="12" z="3" />
                                <BlockOrientation Forward="Forward" Up="Down" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="1" y="12" z="10" />
                                <BlockOrientation Forward="Up" Up="Backward" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                                <Min x="-1" y="12" z="10" />
                                <BlockOrientation Forward="Up" Up="Backward" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
                                <SubtypeName>SmallBlockGyro</SubtypeName>
                                <EntityId>80885718678810440</EntityId>
                                <Min x="2" y="14" z="8" />
                                <BlockOrientation Forward="Down" Up="Right" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                                <ShareMode>All</ShareMode>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>true</Enabled>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                <Min x="-2" y="14" z="6" />
                                <BlockOrientation Forward="Down" Up="Forward" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                                <Min x="-2" y="14" z="5" />
                                <BlockOrientation Forward="Down" Up="Backward" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <EntityId>138408980670867680</EntityId>
                                <Min x="-3" y="13" z="6" />
                                <IntegrityPercent>0.7333333</IntegrityPercent>
                                <BuildPercent>0.7333333</BuildPercent>
                                <BlockOrientation Forward="Right" Up="Up" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                                <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                                <EntityId>112874200373674853</EntityId>
                                <Min x="-3" y="13" z="5" />
                                <IntegrityPercent>0.7333333</IntegrityPercent>
                                <BuildPercent>0.7333333</BuildPercent>
                                <BlockOrientation Forward="Right" Up="Backward" />
                                <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                <EntityId>129170003754715473</EntityId>
                                <Min x="-1" y="16" z="7" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <CustomName>VC SC Spotlight </CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                                <Radius>5</Radius>
                                <ReflectorRadius>120</ReflectorRadius>
                                <Falloff>1</Falloff>
                                <Intensity>5</Intensity>
                                <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                <BlinkLenght>10</BlinkLenght>
                                <BlinkOffset>0</BlinkOffset>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                                <SubtypeName>SmallBlockFrontLight</SubtypeName>
                                <EntityId>119789676133558794</EntityId>
                                <Min x="0" y="16" z="7" />
                                <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                                <CustomName>VC SC Spotlight </CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                                <Radius>5</Radius>
                                <ReflectorRadius>120</ReflectorRadius>
                                <Falloff>1</Falloff>
                                <Intensity>5</Intensity>
                                <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                                <BlinkLenght>10</BlinkLenght>
                                <BlinkOffset>0</BlinkOffset>
                              </MyObjectBuilder_CubeBlock>
                              <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                                <SubtypeName>SmallTextPanel</SubtypeName>
                                <EntityId>131265638075691233</EntityId>
                                <Min x="0" y="14" z="1" />
                                <BlockOrientation Forward="Down" Up="Forward" />
                                <ShareMode>All</ShareMode>
                                <CustomName>VC SC Front Piston Jack Attach Point Sign</CustomName>
                                <ShowOnHUD>false</ShowOnHUD>
                                <ShowInTerminal>true</ShowInTerminal>
                                <ShowInToolbarConfig>true</ShowInToolbarConfig>
                                <ShowInInventory>true</ShowInInventory>
                                <Enabled>false</Enabled>
                                <Description />
                                <Title>Title</Title>
                                <AccessFlag>READ_AND_WRITE_ALL</AccessFlag>
                                <ChangeInterval>1</ChangeInterval>
                                <SelectedImages>
                                  <string>Arrow</string>
                                  <string>Construction</string>
                                </SelectedImages>
                                <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                                <FontSize>1</FontSize>
                                <PublicDescription />
                                <PublicTitle>Public title</PublicTitle>
                                <ShowText>NONE</ShowText>
                                <FontColor>
                                  <PackedValue>4294967295</PackedValue>
                                  <X>255</X>
                                  <Y>255</Y>
                                  <Z>255</Z>
                                  <R>255</R>
                                  <G>255</G>
                                  <B>255</B>
                                  <A>255</A>
                                </FontColor>
                                <BackgroundColor>
                                  <PackedValue>4278190080</PackedValue>
                                  <X>0</X>
                                  <Y>0</Y>
                                  <Z>0</Z>
                                  <R>0</R>
                                  <G>0</G>
                                  <B>0</B>
                                  <A>255</A>
                                </BackgroundColor>
                                <CurrentShownTexture>0</CurrentShownTexture>
                              </MyObjectBuilder_CubeBlock>
                            </CubeBlocks>
                            <LinearVelocity x="-0.0259233285" y="-0.008528186" z="0.0115605649" />
                            <AngularVelocity x="-0.000384103449" y="0.001313695" z="-0.00142002932" />
                            <XMirroxPlane x="0" y="14" z="1" />
                            <ConveyorLines>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="-1" y="14" z="6" />
                                <StartDirection>Backward</StartDirection>
                                <EndPosition x="-1" y="14" z="7" />
                                <EndDirection>Forward</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="1" y="14" z="6" />
                                <StartDirection>Backward</StartDirection>
                                <EndPosition x="1" y="14" z="7" />
                                <EndDirection>Forward</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="0" y="13" z="4" />
                                <StartDirection>Forward</StartDirection>
                                <EndPosition x="0" y="13" z="3" />
                                <EndDirection>Backward</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="0" y="13" z="2" />
                                <StartDirection>Backward</StartDirection>
                                <EndPosition x="0" y="13" z="3" />
                                <EndDirection>Forward</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="1" y="13" z="3" />
                                <StartDirection>Left</StartDirection>
                                <EndPosition x="0" y="13" z="3" />
                                <EndDirection>Right</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="-1" y="13" z="3" />
                                <StartDirection>Right</StartDirection>
                                <EndPosition x="0" y="13" z="3" />
                                <EndDirection>Left</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="0" y="14" z="9" />
                                <StartDirection>Backward</StartDirection>
                                <EndPosition x="0" y="14" z="10" />
                                <EndDirection>Forward</EndDirection>
                                <Sections />
                                <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="0" y="13" z="0" />
                                <StartDirection>Backward</StartDirection>
                                <EndPosition x="0" y="13" z="1" />
                                <EndDirection>Forward</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="0" y="13" z="2" />
                                <StartDirection>Forward</StartDirection>
                                <EndPosition x="0" y="13" z="1" />
                                <EndDirection>Backward</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                              <MyObjectBuilder_ConveyorLine>
                                <StartPosition x="1" y="14" z="10" />
                                <StartDirection>Right</StartDirection>
                                <EndPosition x="2" y="14" z="10" />
                                <EndDirection>Left</EndDirection>
                                <Sections />
                                <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                              </MyObjectBuilder_ConveyorLine>
                            </ConveyorLines>
                            <BlockGroups>
                              <MyObjectBuilder_BlockGroup>
                                <Name>VC SC Wheels</Name>
                                <Blocks>
                                  <Vector3I>
                                    <X>-1</X>
                                    <Y>12</Y>
                                    <Z>1</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>1</X>
                                    <Y>12</Y>
                                    <Z>1</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>-1</X>
                                    <Y>12</Y>
                                    <Z>9</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>1</X>
                                    <Y>12</Y>
                                    <Z>9</Z>
                                  </Vector3I>
                                </Blocks>
                              </MyObjectBuilder_BlockGroup>
                              <MyObjectBuilder_BlockGroup>
                                <Name>VC SC Thrusters</Name>
                                <Blocks>
                                  <Vector3I>
                                    <X>-2</X>
                                    <Y>14</Y>
                                    <Z>7</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>2</X>
                                    <Y>14</Y>
                                    <Z>7</Z>
                                  </Vector3I>
                                </Blocks>
                              </MyObjectBuilder_BlockGroup>
                              <MyObjectBuilder_BlockGroup>
                                <Name>VC SC Artificial Mass</Name>
                                <Blocks>
                                  <Vector3I>
                                    <X>-1</X>
                                    <Y>12</Y>
                                    <Z>8</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>1</X>
                                    <Y>12</Y>
                                    <Z>8</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>-1</X>
                                    <Y>12</Y>
                                    <Z>2</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>1</X>
                                    <Y>12</Y>
                                    <Z>2</Z>
                                  </Vector3I>
                                </Blocks>
                              </MyObjectBuilder_BlockGroup>
                              <MyObjectBuilder_BlockGroup>
                                <Name>VC SC Reactors</Name>
                                <Blocks>
                                  <Vector3I>
                                    <X>1</X>
                                    <Y>13</Y>
                                    <Z>3</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>-1</X>
                                    <Y>13</Y>
                                    <Z>3</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>2</X>
                                    <Y>14</Y>
                                    <Z>10</Z>
                                  </Vector3I>
                                </Blocks>
                              </MyObjectBuilder_BlockGroup>
                              <MyObjectBuilder_BlockGroup>
                                <Name>VC SC Forward Lights</Name>
                                <Blocks>
                                  <Vector3I>
                                    <X>-1</X>
                                    <Y>16</Y>
                                    <Z>7</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>1</X>
                                    <Y>16</Y>
                                    <Z>7</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>0</X>
                                    <Y>16</Y>
                                    <Z>7</Z>
                                  </Vector3I>
                                </Blocks>
                              </MyObjectBuilder_BlockGroup>
                              <MyObjectBuilder_BlockGroup>
                                <Name>VC SC Lights</Name>
                                <Blocks>
                                  <Vector3I>
                                    <X>-2</X>
                                    <Y>14</Y>
                                    <Z>10</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>-1</X>
                                    <Y>16</Y>
                                    <Z>7</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>1</X>
                                    <Y>16</Y>
                                    <Z>7</Z>
                                  </Vector3I>
                                  <Vector3I>
                                    <X>0</X>
                                    <Y>16</Y>
                                    <Z>7</Z>
                                  </Vector3I>
                                </Blocks>
                              </MyObjectBuilder_BlockGroup>
                            </BlockGroups>
                            <Handbrake>true</Handbrake>
                            <DisplayName>VC Scout Car</DisplayName>
                            <OxygenAmount>
                              <float>0</float>
                              <float>0</float>
                            </OxygenAmount>
                            <DestructibleBlocks>true</DestructibleBlocks>
                            <CreatePhysics>false</CreatePhysics>
                            <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                            <IsRespawnGrid>false</IsRespawnGrid>
                            <LocalCoordSys>0</LocalCoordSys>
                            <TargetingTargets />
                          </ProjectedGrid>
                          <ProjectionOffset>
                            <X>-2</X>
                            <Y>-13</Y>
                            <Z>-4</Z>
                          </ProjectionOffset>
                          <ProjectionRotation>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                          </ProjectionRotation>
                          <KeepProjection>true</KeepProjection>
                          <ShowOnlyBuildable>false</ShowOnlyBuildable>
                          <InstantBuildingEnabled>false</InstantBuildingEnabled>
                          <MaxNumberOfProjections>5</MaxNumberOfProjections>
                          <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                          <ProjectionsRemaining>0</ProjectionsRemaining>
                          <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                          <Min x="2" y="15" z="9" />
                          <BlockOrientation Forward="Left" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                          <SubtypeName>TimerBlockSmall</SubtypeName>
                          <EntityId>139910704258793894</EntityId>
                          <Min x="2" y="13" z="6" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC LCD Timer Block</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Toolbar>
                            <ToolbarType>Character</ToolbarType>
                            <SelectedSlot xsi:nil="true" />
                            <Slots>
                              <Slot>
                                <Index>0</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>Run</Action>
                                  <Parameters>
                                    <MyObjectBuilder_ToolbarItemActionParameter>
                                      <TypeCode>String</TypeCode>
                                      <Value />
                                    </MyObjectBuilder_ToolbarItemActionParameter>
                                  </Parameters>
                                  <BlockEntityId>78147539425379422</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>1</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>Start</Action>
                                  <BlockEntityId>139910704258793894</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>2</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>TriggerNow</Action>
                                  <BlockEntityId>139910704258793894</BlockEntityId>
                                </Data>
                              </Slot>
                            </Slots>
                          </Toolbar>
                          <JustTriggered>true</JustTriggered>
                          <Delay>1100</Delay>
                          <CurrentTime>0</CurrentTime>
                          <IsCountingDown>false</IsCountingDown>
                          <Silent>true</Silent>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                          <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                          <EntityId>122897188717397723</EntityId>
                          <Min x="-2" y="13" z="7" />
                          <BlockOrientation Forward="Up" Up="Backward" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                          <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                          <EntityId>113300305545995421</EntityId>
                          <Min x="2" y="13" z="7" />
                          <BlockOrientation Forward="Up" Up="Backward" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                          <Min x="3" y="14" z="7" />
                          <BlockOrientation Forward="Backward" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                          <Min x="2" y="15" z="10" />
                          <BlockOrientation Forward="Down" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                          <SubtypeName>SmallProgrammableBlock</SubtypeName>
                          <EntityId>78147539425379422</EntityId>
                          <Min x="-2" y="14" z="8" />
                          <BlockOrientation Forward="Right" Up="Up" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC LCD Programmable block</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                          <Storage />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <Min x="0" y="12" z="7" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="0" y="12" z="8" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                          <Min x="0" y="12" z="9" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                          <SubtypeName>SmallSuspension3x3</SubtypeName>
                          <EntityId>84791470834506137</EntityId>
                          <Min x="-2" y="12" z="9" />
                          <BlockOrientation Forward="Up" Up="Left" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <TopBlockId xsi:nil="true" />
                          <ShareInertiaTensor>false</ShareInertiaTensor>
                          <SafetyDetach xsi:nil="true" />
                          <RotorEntityId>122410150672636056</RotorEntityId>
                          <WeldedEntityId xsi:nil="true" />
                          <SteerAngle>0</SteerAngle>
                          <Damping>0.75</Damping>
                          <Strength>0.18</Strength>
                          <Propulsion>true</Propulsion>
                          <Friction>2.4</Friction>
                          <Power>0.5</Power>
                          <Height>-0.32</Height>
                          <MaxSteerAngle>0.32</MaxSteerAngle>
                          <InvertSteer>false</InvertSteer>
                          <InvertPropulsion>false</InvertPropulsion>
                          <SpeedLimit>100.000008</SpeedLimit>
                          <PowerNew>0.6</PowerNew>
                          <StrengthNew>0.1</StrengthNew>
                          <FrictionNew xsi:nil="true" />
                          <AirShockEnabled>true</AirShockEnabled>
                          <BrakingEnabled>true</BrakingEnabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                          <SubtypeName>SmallSuspension3x3</SubtypeName>
                          <EntityId>100234976301828117</EntityId>
                          <Min x="1" y="12" z="9" />
                          <BlockOrientation Forward="Up" Up="Right" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <TopBlockId xsi:nil="true" />
                          <ShareInertiaTensor>false</ShareInertiaTensor>
                          <SafetyDetach xsi:nil="true" />
                          <RotorEntityId>130569260248704268</RotorEntityId>
                          <WeldedEntityId xsi:nil="true" />
                          <SteerAngle>0</SteerAngle>
                          <Damping>0.75</Damping>
                          <Strength>0.18</Strength>
                          <Propulsion>true</Propulsion>
                          <Friction>2.4</Friction>
                          <Power>0.5</Power>
                          <Height>-0.32</Height>
                          <MaxSteerAngle>0.32</MaxSteerAngle>
                          <InvertSteer>false</InvertSteer>
                          <InvertPropulsion>false</InvertPropulsion>
                          <SpeedLimit>100.000008</SpeedLimit>
                          <PowerNew>0.6</PowerNew>
                          <StrengthNew>0.1</StrengthNew>
                          <FrictionNew xsi:nil="true" />
                          <AirShockEnabled>true</AirShockEnabled>
                          <BrakingEnabled>true</BrakingEnabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                          <SubtypeName>SmallBlockOreDetector</SubtypeName>
                          <EntityId>73846018089595826</EntityId>
                          <Min x="2" y="14" z="5" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Ore Detector </CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <DetectionRadius>50</DetectionRadius>
                          <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <EntityId>114430434635752665</EntityId>
                          <Min x="-2" y="12" z="6" />
                          <IntegrityPercent>0.399999946</IntegrityPercent>
                          <BuildPercent>0.399999946</BuildPercent>
                          <BlockOrientation Forward="Left" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="1" y="12" z="0" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                          <SubtypeName>SmallWheel3x3</SubtypeName>
                          <EntityId>117803860864310385</EntityId>
                          <Min x="3" y="12" z="4" />
                          <BlockOrientation Forward="Forward" Up="Right" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <YieldLastComponent>true</YieldLastComponent>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <EntityId>86770742165637748</EntityId>
                          <Min x="-3" y="12" z="6" />
                          <IntegrityPercent>0.3600001</IntegrityPercent>
                          <BuildPercent>0.3600001</BuildPercent>
                          <BlockOrientation Forward="Right" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                          <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                          <EntityId>133073435692230344</EntityId>
                          <Min x="-1" y="13" z="3" />
                          <BlockOrientation Forward="Right" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <ComponentContainer>
                            <Components>
                              <ComponentData>
                                <TypeId>MyInventoryBase</TypeId>
                                <Component xsi:type="MyObjectBuilder_Inventory">
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>3.058211</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                        <SubtypeName>Uranium</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>1</nextItemId>
                                  <Volume>0.125</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Component>
                              </ComponentData>
                            </Components>
                          </ComponentContainer>
                          <CustomName>VC SC Small Reactor 2</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Inventory>
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>3.058211</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                  <SubtypeName>Uranium</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>1</nextItemId>
                            <Volume>0.125</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Inventory>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                          <Min x="1" y="13" z="2" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                          <SubtypeName>SmallBlockFrontLight</SubtypeName>
                          <EntityId>83498175888092225</EntityId>
                          <Min x="-2" y="14" z="10" />
                          <BlockOrientation Forward="Backward" Up="Up" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <CustomName>VC SC Tail Light 1</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                          <Radius>1</Radius>
                          <ReflectorRadius>20</ReflectorRadius>
                          <ColorGreen>0.654902</ColorGreen>
                          <ColorBlue>0.4117647</ColorBlue>
                          <Falloff>1</Falloff>
                          <Intensity>3</Intensity>
                          <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                          <BlinkLenght>10</BlinkLenght>
                          <BlinkOffset>0</BlinkOffset>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                          <Min x="1" y="13" z="1" />
                          <BlockOrientation Forward="Backward" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <Min x="-1" y="12" z="4" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <Min x="1" y="12" z="4" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="1" y="12" z="7" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="-1" y="12" z="7" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <Min x="-1" y="12" z="6" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <Min x="1" y="12" z="6" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <Min x="3" y="15" z="7" />
                          <BlockOrientation Forward="Backward" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                          <SubtypeName>VirtualMassSmall</SubtypeName>
                          <EntityId>133999558433110798</EntityId>
                          <Min x="-1" y="12" z="8" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Artificial Mass</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                          <SubtypeName>VirtualMassSmall</SubtypeName>
                          <EntityId>78047374831308560</EntityId>
                          <Min x="1" y="12" z="8" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Artificial Mass</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <Min x="-3" y="15" z="7" />
                          <BlockOrientation Forward="Backward" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <Min x="3" y="13" z="7" />
                          <BlockOrientation Forward="Backward" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                          <SubtypeName>VirtualMassSmall</SubtypeName>
                          <EntityId>82726228275379696</EntityId>
                          <Min x="-1" y="12" z="2" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Artificial Mass</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                          <SubtypeName>VirtualMassSmall</SubtypeName>
                          <EntityId>96714494738055619</EntityId>
                          <Min x="1" y="12" z="2" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Artificial Mass</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                          <SubtypeName>OxygenTankSmall</SubtypeName>
                          <EntityId>91077590016549167</EntityId>
                          <Min x="-1" y="13" z="7" />
                          <BlockOrientation Forward="Backward" Up="Up" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <ComponentContainer>
                            <Components>
                              <ComponentData>
                                <TypeId>MyInventoryBase</TypeId>
                                <Component xsi:type="MyObjectBuilder_Inventory">
                                  <Items />
                                  <nextItemId>0</nextItemId>
                                  <Volume>4</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Component>
                              </ComponentData>
                            </Components>
                          </ComponentContainer>
                          <CustomName>VC SC Oxygen Tank</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <IsStockpiling>false</IsStockpiling>
                          <FilledRatio>1</FilledRatio>
                          <Inventory>
                            <Items />
                            <nextItemId>0</nextItemId>
                            <Volume>4</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Inventory>
                          <AutoRefill>false</AutoRefill>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                          <SubtypeName>SmallBlockFrontLight</SubtypeName>
                          <EntityId>131945585286589410</EntityId>
                          <Min x="1" y="16" z="7" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <CustomName>VC SC Spotlight</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                          <Radius>5</Radius>
                          <ReflectorRadius>120</ReflectorRadius>
                          <Falloff>1</Falloff>
                          <Intensity>5</Intensity>
                          <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                          <BlinkLenght>10</BlinkLenght>
                          <BlinkOffset>0</BlinkOffset>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                          <Min x="-2" y="15" z="10" />
                          <BlockOrientation Forward="Right" Up="Up" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                          <Min x="-3" y="14" z="7" />
                          <BlockOrientation Forward="Backward" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <Min x="-3" y="13" z="7" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                          <SubtypeName>ConnectorMedium</SubtypeName>
                          <EntityId>76089837204950025</EntityId>
                          <Min x="-1" y="13" z="10" />
                          <BlockOrientation Forward="Backward" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <DeformationRatio>0.5</DeformationRatio>
                          <ComponentContainer>
                            <Components>
                              <ComponentData>
                                <TypeId>MyInventoryBase</TypeId>
                                <Component xsi:type="MyObjectBuilder_Inventory">
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>34</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>SteelPlate</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>2</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>Computer</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>1</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>12</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>SmallTube</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>2</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>6</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>Motor</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>3</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>42</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>Construction</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>4</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>2</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                        <SubtypeName>LargeTube</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>5</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>1</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                        <SubtypeName>OxygenBottle</SubtypeName>
                                        <GasLevel>0</GasLevel>
                                        <OxygenLevel>0</OxygenLevel>
                                      </PhysicalContent>
                                      <ItemId>6</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>1</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                        <SubtypeName>HydrogenBottle</SubtypeName>
                                        <GasLevel>0</GasLevel>
                                      </PhysicalContent>
                                      <ItemId>7</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>8</nextItemId>
                                  <Volume>1.152</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive CanSend</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Component>
                              </ComponentData>
                            </Components>
                          </ComponentContainer>
                          <CustomName>VC SC Connector</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Inventory>
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>34</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>SteelPlate</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>2</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>Computer</SubtypeName>
                                </PhysicalContent>
                                <ItemId>1</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>12</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>SmallTube</SubtypeName>
                                </PhysicalContent>
                                <ItemId>2</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>6</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>Motor</SubtypeName>
                                </PhysicalContent>
                                <ItemId>3</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>42</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>Construction</SubtypeName>
                                </PhysicalContent>
                                <ItemId>4</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>2</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>LargeTube</SubtypeName>
                                </PhysicalContent>
                                <ItemId>5</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>1</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                  <SubtypeName>OxygenBottle</SubtypeName>
                                  <GasLevel>0</GasLevel>
                                  <OxygenLevel>0</OxygenLevel>
                                </PhysicalContent>
                                <ItemId>6</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>1</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                  <SubtypeName>HydrogenBottle</SubtypeName>
                                  <GasLevel>0</GasLevel>
                                </PhysicalContent>
                                <ItemId>7</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>8</nextItemId>
                            <Volume>1.152</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Inventory>
                          <MasterToSlaveTransform xsi:nil="true" />
                          <MasterToSlaveGrid xsi:nil="true" />
                          <IsMaster>true</IsMaster>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                          <SubtypeName>TimerBlockSmall</SubtypeName>
                          <EntityId>128274794419004336</EntityId>
                          <Min x="2" y="14" z="9" />
                          <BlockOrientation Forward="Up" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Repair Projector Timer Block</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Toolbar>
                            <ToolbarType>Character</ToolbarType>
                            <SelectedSlot xsi:nil="true" />
                            <Slots>
                              <Slot>
                                <Index>0</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>OnOff</Action>
                                  <BlockEntityId>116464660725762424</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>1</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>OnOff</Action>
                                  <BlockEntityId>104479648936140758</BlockEntityId>
                                </Data>
                              </Slot>
                              <Slot>
                                <Index>2</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                                  <Action>OnOff</Action>
                                  <BlockEntityId>133363689367325398</BlockEntityId>
                                </Data>
                              </Slot>
                            </Slots>
                          </Toolbar>
                          <Delay>1100</Delay>
                          <CurrentTime>0</CurrentTime>
                          <IsCountingDown>false</IsCountingDown>
                          <Silent>false</Silent>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                          <Min x="3" y="14" z="8" />
                          <BlockOrientation Forward="Forward" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                          <Min x="-3" y="14" z="10" />
                          <BlockOrientation Forward="Forward" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                          <SubtypeName>SmallCameraBlock</SubtypeName>
                          <EntityId>90251586578563012</EntityId>
                          <Min x="0" y="12" z="10" />
                          <BlockOrientation Forward="Backward" Up="Up" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Camera</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <IsActive>false</IsActive>
                          <Fov>1.04719758</Fov>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                          <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                          <EntityId>127377968969460088</EntityId>
                          <Min x="2" y="14" z="10" />
                          <BlockOrientation Forward="Left" Up="Up" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <ComponentContainer>
                            <Components>
                              <ComponentData>
                                <TypeId>MyInventoryBase</TypeId>
                                <Component xsi:type="MyObjectBuilder_Inventory">
                                  <Items>
                                    <MyObjectBuilder_InventoryItem>
                                      <Amount>3.058211</Amount>
                                      <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                        <SubtypeName>Uranium</SubtypeName>
                                      </PhysicalContent>
                                      <ItemId>0</ItemId>
                                    </MyObjectBuilder_InventoryItem>
                                  </Items>
                                  <nextItemId>1</nextItemId>
                                  <Volume>0.125</Volume>
                                  <Mass>9223372036854.775807</Mass>
                                  <MaxItemCount>2147483647</MaxItemCount>
                                  <Size xsi:nil="true" />
                                  <InventoryFlags>CanReceive</InventoryFlags>
                                  <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                                </Component>
                              </ComponentData>
                            </Components>
                          </ComponentContainer>
                          <CustomName>VC SC Small Reactor 3</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>false</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Inventory>
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>3.058211</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                  <SubtypeName>Uranium</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>1</nextItemId>
                            <Volume>0.125</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Inventory>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                          <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                          <EntityId>86984484400294539</EntityId>
                          <Min x="-2" y="14" z="9" />
                          <BlockOrientation Forward="Up" Up="Left" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Antenna </CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <BroadcastRadius>500</BroadcastRadius>
                          <ShowShipName>true</ShowShipName>
                          <EnableBroadcasting>true</EnableBroadcasting>
                          <AttachedPB>0</AttachedPB>
                          <IgnoreAllied>false</IgnoreAllied>
                          <IgnoreOther>true</IgnoreOther>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <Min x="-3" y="15" z="8" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <Min x="3" y="15" z="8" />
                          <BlockOrientation Forward="Forward" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                          <Min x="-2" y="15" z="8" />
                          <BlockOrientation Forward="Backward" Up="Right" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                          <Min x="2" y="15" z="8" />
                          <BlockOrientation Forward="Backward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <EntityId>98340632513166440</EntityId>
                          <Min x="-3" y="12" z="5" />
                          <IntegrityPercent>0.3600001</IntegrityPercent>
                          <BuildPercent>0.3600001</BuildPercent>
                          <BlockOrientation Forward="Right" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                          <EntityId>80904817340875827</EntityId>
                          <Min x="-2" y="12" z="5" />
                          <IntegrityPercent>0.399999946</IntegrityPercent>
                          <BuildPercent>0.399999946</BuildPercent>
                          <BlockOrientation Forward="Left" Up="Down" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="1" y="12" z="3" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                          <SubtypeName>ButtonPanelSmall</SubtypeName>
                          <EntityId>83371663256029368</EntityId>
                          <Min x="-3" y="13" z="4" />
                          <BlockOrientation Forward="Forward" Up="Left" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Button Panel</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                          <Toolbar>
                            <ToolbarType>Character</ToolbarType>
                            <SelectedSlot xsi:nil="true" />
                            <Slots>
                              <Slot>
                                <Index>0</Index>
                                <Item />
                                <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                                  <Action>OnOff</Action>
                                  <GridEntityId>0</GridEntityId>
                                  <BlockEntityId>83371663256029368</BlockEntityId>
                                  <GroupName>VC SC Lights</GroupName>
                                </Data>
                              </Slot>
                            </Slots>
                          </Toolbar>
                          <AnyoneCanUse>false</AnyoneCanUse>
                          <CustomButtonNames>
                            <dictionary>
                              <item>
                                <Key>0</Key>
                                <Value>VC SC Lights</Value>
                              </item>
                            </dictionary>
                          </CustomButtonNames>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="-1" y="12" z="3" />
                          <BlockOrientation Forward="Forward" Up="Down" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="1" y="12" z="10" />
                          <BlockOrientation Forward="Up" Up="Backward" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                          <Min x="-1" y="12" z="10" />
                          <BlockOrientation Forward="Up" Up="Backward" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
                          <SubtypeName>SmallBlockGyro</SubtypeName>
                          <EntityId>131532077763287004</EntityId>
                          <Min x="2" y="14" z="8" />
                          <BlockOrientation Forward="Down" Up="Right" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                          <ShareMode>All</ShareMode>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>true</Enabled>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                          <Min x="-2" y="14" z="6" />
                          <BlockOrientation Forward="Down" Up="Forward" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                          <Min x="-2" y="14" z="5" />
                          <BlockOrientation Forward="Down" Up="Backward" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <EntityId>100079406542562930</EntityId>
                          <Min x="-3" y="13" z="6" />
                          <IntegrityPercent>0.7333333</IntegrityPercent>
                          <BuildPercent>0.7333333</BuildPercent>
                          <BlockOrientation Forward="Right" Up="Up" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                          <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                          <EntityId>134737725906545627</EntityId>
                          <Min x="-3" y="13" z="5" />
                          <IntegrityPercent>0.7333333</IntegrityPercent>
                          <BuildPercent>0.7333333</BuildPercent>
                          <BlockOrientation Forward="Right" Up="Backward" />
                          <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                          <SubtypeName>SmallBlockFrontLight</SubtypeName>
                          <EntityId>141342855614315372</EntityId>
                          <Min x="-1" y="16" z="7" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <CustomName>VC SC Spotlight </CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                          <Radius>5</Radius>
                          <ReflectorRadius>120</ReflectorRadius>
                          <Falloff>1</Falloff>
                          <Intensity>5</Intensity>
                          <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                          <BlinkLenght>10</BlinkLenght>
                          <BlinkOffset>0</BlinkOffset>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                          <SubtypeName>SmallBlockFrontLight</SubtypeName>
                          <EntityId>78460956715839369</EntityId>
                          <Min x="0" y="16" z="7" />
                          <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                          <CustomName>VC SC Spotlight </CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                          <Radius>5</Radius>
                          <ReflectorRadius>120</ReflectorRadius>
                          <Falloff>1</Falloff>
                          <Intensity>5</Intensity>
                          <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                          <BlinkLenght>10</BlinkLenght>
                          <BlinkOffset>0</BlinkOffset>
                        </MyObjectBuilder_CubeBlock>
                        <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                          <SubtypeName>SmallTextPanel</SubtypeName>
                          <EntityId>133363689367325398</EntityId>
                          <Min x="0" y="14" z="1" />
                          <BlockOrientation Forward="Down" Up="Forward" />
                          <ShareMode>All</ShareMode>
                          <CustomName>VC SC Front Piston Jack Attach Point Sign</CustomName>
                          <ShowOnHUD>false</ShowOnHUD>
                          <ShowInTerminal>true</ShowInTerminal>
                          <ShowInToolbarConfig>true</ShowInToolbarConfig>
                          <ShowInInventory>true</ShowInInventory>
                          <Enabled>false</Enabled>
                          <Description />
                          <Title>Title</Title>
                          <AccessFlag>READ_AND_WRITE_ALL</AccessFlag>
                          <ChangeInterval>1</ChangeInterval>
                          <SelectedImages>
                            <string>Arrow</string>
                            <string>Construction</string>
                          </SelectedImages>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <PublicDescription />
                          <PublicTitle>Public title</PublicTitle>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                        </MyObjectBuilder_CubeBlock>
                      </CubeBlocks>
                      <XMirroxPlane x="0" y="14" z="1" />
                      <ConveyorLines>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="-1" y="14" z="6" />
                          <StartDirection>Backward</StartDirection>
                          <EndPosition x="-1" y="14" z="7" />
                          <EndDirection>Forward</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="1" y="14" z="6" />
                          <StartDirection>Backward</StartDirection>
                          <EndPosition x="1" y="14" z="7" />
                          <EndDirection>Forward</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="0" y="13" z="4" />
                          <StartDirection>Forward</StartDirection>
                          <EndPosition x="0" y="13" z="3" />
                          <EndDirection>Backward</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="0" y="13" z="2" />
                          <StartDirection>Backward</StartDirection>
                          <EndPosition x="0" y="13" z="3" />
                          <EndDirection>Forward</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="1" y="13" z="3" />
                          <StartDirection>Left</StartDirection>
                          <EndPosition x="0" y="13" z="3" />
                          <EndDirection>Right</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="-1" y="13" z="3" />
                          <StartDirection>Right</StartDirection>
                          <EndPosition x="0" y="13" z="3" />
                          <EndDirection>Left</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="0" y="14" z="9" />
                          <StartDirection>Backward</StartDirection>
                          <EndPosition x="0" y="14" z="10" />
                          <EndDirection>Forward</EndDirection>
                          <Sections />
                          <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="0" y="13" z="0" />
                          <StartDirection>Backward</StartDirection>
                          <EndPosition x="0" y="13" z="1" />
                          <EndDirection>Forward</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="0" y="13" z="2" />
                          <StartDirection>Forward</StartDirection>
                          <EndPosition x="0" y="13" z="1" />
                          <EndDirection>Backward</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                        <MyObjectBuilder_ConveyorLine>
                          <StartPosition x="1" y="14" z="10" />
                          <StartDirection>Right</StartDirection>
                          <EndPosition x="2" y="14" z="10" />
                          <EndDirection>Left</EndDirection>
                          <Sections />
                          <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                        </MyObjectBuilder_ConveyorLine>
                      </ConveyorLines>
                      <BlockGroups>
                        <MyObjectBuilder_BlockGroup>
                          <Name>VC SC Wheels</Name>
                          <Blocks>
                            <Vector3I>
                              <X>-1</X>
                              <Y>12</Y>
                              <Z>1</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>12</Y>
                              <Z>1</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>12</Y>
                              <Z>9</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>12</Y>
                              <Z>9</Z>
                            </Vector3I>
                          </Blocks>
                        </MyObjectBuilder_BlockGroup>
                        <MyObjectBuilder_BlockGroup>
                          <Name>VC SC Thrusters</Name>
                          <Blocks>
                            <Vector3I>
                              <X>-2</X>
                              <Y>14</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>14</Y>
                              <Z>7</Z>
                            </Vector3I>
                          </Blocks>
                        </MyObjectBuilder_BlockGroup>
                        <MyObjectBuilder_BlockGroup>
                          <Name>VC SC Artificial Mass</Name>
                          <Blocks>
                            <Vector3I>
                              <X>-1</X>
                              <Y>12</Y>
                              <Z>8</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>12</Y>
                              <Z>8</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>12</Y>
                              <Z>2</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>12</Y>
                              <Z>2</Z>
                            </Vector3I>
                          </Blocks>
                        </MyObjectBuilder_BlockGroup>
                        <MyObjectBuilder_BlockGroup>
                          <Name>VC SC Reactors</Name>
                          <Blocks>
                            <Vector3I>
                              <X>1</X>
                              <Y>13</Y>
                              <Z>3</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>13</Y>
                              <Z>3</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>14</Y>
                              <Z>10</Z>
                            </Vector3I>
                          </Blocks>
                        </MyObjectBuilder_BlockGroup>
                        <MyObjectBuilder_BlockGroup>
                          <Name>VC SC Forward Lights</Name>
                          <Blocks>
                            <Vector3I>
                              <X>-1</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>0</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                          </Blocks>
                        </MyObjectBuilder_BlockGroup>
                        <MyObjectBuilder_BlockGroup>
                          <Name>VC SC Lights</Name>
                          <Blocks>
                            <Vector3I>
                              <X>-2</X>
                              <Y>14</Y>
                              <Z>10</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>0</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                          </Blocks>
                        </MyObjectBuilder_BlockGroup>
                        <MyObjectBuilder_BlockGroup>
                          <Name>VC SC Systems</Name>
                          <Blocks>
                            <Vector3I>
                              <X>0</X>
                              <Y>13</Y>
                              <Z>0</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-2</X>
                              <Y>15</Y>
                              <Z>9</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>12</Y>
                              <Z>8</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>12</Y>
                              <Z>8</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>12</Y>
                              <Z>2</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>12</Y>
                              <Z>2</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-2</X>
                              <Y>13</Y>
                              <Z>5</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-3</X>
                              <Y>13</Y>
                              <Z>4</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>0</X>
                              <Y>12</Y>
                              <Z>10</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>0</X>
                              <Y>14</Y>
                              <Z>11</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>14</Y>
                              <Z>8</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>14</Y>
                              <Z>6</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>0</X>
                              <Y>14</Y>
                              <Z>8</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-2</X>
                              <Y>14</Y>
                              <Z>8</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>13</Y>
                              <Z>4</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-2</X>
                              <Y>14</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>14</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>13</Y>
                              <Z>3</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>13</Y>
                              <Z>3</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>14</Y>
                              <Z>10</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-2</X>
                              <Y>14</Y>
                              <Z>10</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>0</X>
                              <Y>16</Y>
                              <Z>7</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>14</Y>
                              <Z>3</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>14</Y>
                              <Z>3</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>0</X>
                              <Y>14</Y>
                              <Z>1</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>13</Y>
                              <Z>6</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>2</X>
                              <Y>14</Y>
                              <Z>9</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>12</Y>
                              <Z>1</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>12</Y>
                              <Z>1</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>-1</X>
                              <Y>12</Y>
                              <Z>9</Z>
                            </Vector3I>
                            <Vector3I>
                              <X>1</X>
                              <Y>12</Y>
                              <Z>9</Z>
                            </Vector3I>
                          </Blocks>
                        </MyObjectBuilder_BlockGroup>
                      </BlockGroups>
                      <Handbrake>true</Handbrake>
                      <DisplayName>VC Scout Car</DisplayName>
                      <OxygenAmount>
                        <float>0</float>
                        <float>0</float>
                      </OxygenAmount>
                      <DestructibleBlocks>true</DestructibleBlocks>
                      <CreatePhysics>false</CreatePhysics>
                      <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                      <IsRespawnGrid>false</IsRespawnGrid>
                      <LocalCoordSys>21</LocalCoordSys>
                      <TargetingTargets />
                    </ProjectedGrid>
                    <ProjectionOffset>
                      <X>-2</X>
                      <Y>-13</Y>
                      <Z>-4</Z>
                    </ProjectionOffset>
                    <ProjectionRotation>
                      <X>0</X>
                      <Y>0</Y>
                      <Z>0</Z>
                    </ProjectionRotation>
                    <KeepProjection>true</KeepProjection>
                    <ShowOnlyBuildable>false</ShowOnlyBuildable>
                    <InstantBuildingEnabled>false</InstantBuildingEnabled>
                    <MaxNumberOfProjections>5</MaxNumberOfProjections>
                    <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
                    <ProjectionsRemaining>0</ProjectionsRemaining>
                    <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                    <Min x="2" y="15" z="9" />
                    <BlockOrientation Forward="Left" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                    <SubtypeName>TimerBlockSmall</SubtypeName>
                    <EntityId>126304281397605140</EntityId>
                    <Min x="2" y="13" z="6" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC LCD Timer Block</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Toolbar>
                      <ToolbarType>Character</ToolbarType>
                      <SelectedSlot xsi:nil="true" />
                      <Slots>
                        <Slot>
                          <Index>0</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>Run</Action>
                            <Parameters>
                              <MyObjectBuilder_ToolbarItemActionParameter>
                                <TypeCode>String</TypeCode>
                                <Value />
                              </MyObjectBuilder_ToolbarItemActionParameter>
                            </Parameters>
                            <BlockEntityId>104618456587430689</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>1</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>Start</Action>
                            <BlockEntityId>126304281397605140</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>2</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>TriggerNow</Action>
                            <BlockEntityId>126304281397605140</BlockEntityId>
                          </Data>
                        </Slot>
                      </Slots>
                    </Toolbar>
                    <JustTriggered>true</JustTriggered>
                    <Delay>1100</Delay>
                    <CurrentTime>0</CurrentTime>
                    <IsCountingDown>false</IsCountingDown>
                    <Silent>true</Silent>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                    <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                    <EntityId>119094443148591018</EntityId>
                    <Min x="-2" y="13" z="7" />
                    <BlockOrientation Forward="Up" Up="Backward" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
                    <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
                    <EntityId>106210369744880432</EntityId>
                    <Min x="2" y="13" z="7" />
                    <BlockOrientation Forward="Up" Up="Backward" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                    <Min x="3" y="14" z="7" />
                    <BlockOrientation Forward="Backward" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                    <Min x="2" y="15" z="10" />
                    <BlockOrientation Forward="Down" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
                    <SubtypeName>SmallProgrammableBlock</SubtypeName>
                    <EntityId>104618456587430689</EntityId>
                    <Min x="-2" y="14" z="8" />
                    <BlockOrientation Forward="Right" Up="Up" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC LCD Programmable block</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
                    <Storage />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <Min x="0" y="12" z="7" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="0" y="12" z="8" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
                    <Min x="0" y="12" z="9" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                    <SubtypeName>SmallSuspension3x3</SubtypeName>
                    <EntityId>100130735278344917</EntityId>
                    <Min x="-2" y="12" z="9" />
                    <BlockOrientation Forward="Up" Up="Left" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <TopBlockId xsi:nil="true" />
                    <ShareInertiaTensor>false</ShareInertiaTensor>
                    <SafetyDetach xsi:nil="true" />
                    <RotorEntityId>79764413190228347</RotorEntityId>
                    <WeldedEntityId xsi:nil="true" />
                    <SteerAngle>0</SteerAngle>
                    <Damping>0.75</Damping>
                    <Strength>0.18</Strength>
                    <Propulsion>true</Propulsion>
                    <Friction>2.4</Friction>
                    <Power>0.5</Power>
                    <Height>-0.32</Height>
                    <MaxSteerAngle>0.32</MaxSteerAngle>
                    <InvertSteer>false</InvertSteer>
                    <InvertPropulsion>false</InvertPropulsion>
                    <SpeedLimit>100.000008</SpeedLimit>
                    <PowerNew>0.6</PowerNew>
                    <StrengthNew>0.1</StrengthNew>
                    <FrictionNew xsi:nil="true" />
                    <AirShockEnabled>true</AirShockEnabled>
                    <BrakingEnabled>true</BrakingEnabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
                    <SubtypeName>SmallSuspension3x3</SubtypeName>
                    <EntityId>104210782562271356</EntityId>
                    <Min x="1" y="12" z="9" />
                    <BlockOrientation Forward="Up" Up="Right" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <TopBlockId xsi:nil="true" />
                    <ShareInertiaTensor>false</ShareInertiaTensor>
                    <SafetyDetach xsi:nil="true" />
                    <RotorEntityId>135389042084742155</RotorEntityId>
                    <WeldedEntityId xsi:nil="true" />
                    <SteerAngle>0</SteerAngle>
                    <Damping>0.75</Damping>
                    <Strength>0.18</Strength>
                    <Propulsion>true</Propulsion>
                    <Friction>2.4</Friction>
                    <Power>0.5</Power>
                    <Height>-0.32</Height>
                    <MaxSteerAngle>0.32</MaxSteerAngle>
                    <InvertSteer>false</InvertSteer>
                    <InvertPropulsion>false</InvertPropulsion>
                    <SpeedLimit>100.000008</SpeedLimit>
                    <PowerNew>0.6</PowerNew>
                    <StrengthNew>0.1</StrengthNew>
                    <FrictionNew xsi:nil="true" />
                    <AirShockEnabled>true</AirShockEnabled>
                    <BrakingEnabled>true</BrakingEnabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
                    <SubtypeName>SmallBlockOreDetector</SubtypeName>
                    <EntityId>119881194337778545</EntityId>
                    <Min x="2" y="14" z="5" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Ore Detector </CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <DetectionRadius>50</DetectionRadius>
                    <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <EntityId>143268770186519772</EntityId>
                    <Min x="-2" y="12" z="6" />
                    <IntegrityPercent>0.399999946</IntegrityPercent>
                    <BuildPercent>0.399999946</BuildPercent>
                    <BlockOrientation Forward="Left" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="1" y="12" z="0" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
                    <SubtypeName>SmallWheel3x3</SubtypeName>
                    <EntityId>140989212165161000</EntityId>
                    <Min x="3" y="12" z="4" />
                    <BlockOrientation Forward="Forward" Up="Right" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <YieldLastComponent>true</YieldLastComponent>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <EntityId>78131065859826904</EntityId>
                    <Min x="-3" y="12" z="6" />
                    <IntegrityPercent>0.3600001</IntegrityPercent>
                    <BuildPercent>0.3600001</BuildPercent>
                    <BlockOrientation Forward="Right" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                    <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                    <EntityId>111314151644012520</EntityId>
                    <Min x="-1" y="13" z="3" />
                    <BlockOrientation Forward="Right" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <ComponentContainer>
                      <Components>
                        <ComponentData>
                          <TypeId>MyInventoryBase</TypeId>
                          <Component xsi:type="MyObjectBuilder_Inventory">
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>3.3332</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                  <SubtypeName>Uranium</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>1</nextItemId>
                            <Volume>0.125</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Component>
                        </ComponentData>
                      </Components>
                    </ComponentContainer>
                    <CustomName>VC SC Small Reactor 2</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Inventory>
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>3.3332</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                            <SubtypeName>Uranium</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Inventory>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                    <Min x="1" y="13" z="2" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                    <SubtypeName>SmallBlockFrontLight</SubtypeName>
                    <EntityId>128765852252665367</EntityId>
                    <Min x="-2" y="14" z="10" />
                    <BlockOrientation Forward="Backward" Up="Up" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <CustomName>VC SC Tail Light 1</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                    <Radius>1</Radius>
                    <ReflectorRadius>20</ReflectorRadius>
                    <ColorGreen>0.654902</ColorGreen>
                    <ColorBlue>0.4117647</ColorBlue>
                    <Falloff>1</Falloff>
                    <Intensity>3</Intensity>
                    <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                    <BlinkLenght>10</BlinkLenght>
                    <BlinkOffset>0</BlinkOffset>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
                    <Min x="1" y="13" z="1" />
                    <BlockOrientation Forward="Backward" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <Min x="-1" y="12" z="4" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <Min x="1" y="12" z="4" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="1" y="12" z="7" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="-1" y="12" z="7" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <Min x="-1" y="12" z="6" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <Min x="1" y="12" z="6" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <Min x="3" y="15" z="7" />
                    <BlockOrientation Forward="Backward" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                    <SubtypeName>VirtualMassSmall</SubtypeName>
                    <EntityId>133943311225791239</EntityId>
                    <Min x="-1" y="12" z="8" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Artificial Mass</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                    <SubtypeName>VirtualMassSmall</SubtypeName>
                    <EntityId>81713951490582214</EntityId>
                    <Min x="1" y="12" z="8" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Artificial Mass</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <Min x="-3" y="15" z="7" />
                    <BlockOrientation Forward="Backward" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <Min x="3" y="13" z="7" />
                    <BlockOrientation Forward="Backward" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                    <SubtypeName>VirtualMassSmall</SubtypeName>
                    <EntityId>84839167872393935</EntityId>
                    <Min x="-1" y="12" z="2" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Artificial Mass</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
                    <SubtypeName>VirtualMassSmall</SubtypeName>
                    <EntityId>125452268746878900</EntityId>
                    <Min x="1" y="12" z="2" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Artificial Mass</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
                    <SubtypeName>OxygenTankSmall</SubtypeName>
                    <EntityId>136984162930863360</EntityId>
                    <Min x="-1" y="13" z="7" />
                    <BlockOrientation Forward="Backward" Up="Up" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <ComponentContainer>
                      <Components>
                        <ComponentData>
                          <TypeId>MyInventoryBase</TypeId>
                          <Component xsi:type="MyObjectBuilder_Inventory">
                            <Items />
                            <nextItemId>0</nextItemId>
                            <Volume>4</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Component>
                        </ComponentData>
                      </Components>
                    </ComponentContainer>
                    <CustomName>VC SC Oxygen Tank</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <IsStockpiling>false</IsStockpiling>
                    <FilledRatio>1</FilledRatio>
                    <Inventory>
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>4</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Inventory>
                    <AutoRefill>false</AutoRefill>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                    <SubtypeName>SmallBlockFrontLight</SubtypeName>
                    <EntityId>126303016613802650</EntityId>
                    <Min x="1" y="16" z="7" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <CustomName>VC SC Spotlight</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                    <Radius>5</Radius>
                    <ReflectorRadius>120</ReflectorRadius>
                    <Falloff>1</Falloff>
                    <Intensity>5</Intensity>
                    <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                    <BlinkLenght>10</BlinkLenght>
                    <BlinkOffset>0</BlinkOffset>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
                    <Min x="-2" y="15" z="10" />
                    <BlockOrientation Forward="Right" Up="Up" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                    <Min x="-3" y="14" z="7" />
                    <BlockOrientation Forward="Backward" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <Min x="-3" y="13" z="7" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
                    <SubtypeName>ConnectorMedium</SubtypeName>
                    <EntityId>84899531150175043</EntityId>
                    <Min x="-1" y="13" z="10" />
                    <BlockOrientation Forward="Backward" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <DeformationRatio>0.5</DeformationRatio>
                    <ComponentContainer>
                      <Components>
                        <ComponentData>
                          <TypeId>MyInventoryBase</TypeId>
                          <Component xsi:type="MyObjectBuilder_Inventory">
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>34</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>SteelPlate</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>2</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>Computer</SubtypeName>
                                </PhysicalContent>
                                <ItemId>1</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>12</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>SmallTube</SubtypeName>
                                </PhysicalContent>
                                <ItemId>2</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>6</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>Motor</SubtypeName>
                                </PhysicalContent>
                                <ItemId>3</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>42</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>Construction</SubtypeName>
                                </PhysicalContent>
                                <ItemId>4</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>2</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Component">
                                  <SubtypeName>LargeTube</SubtypeName>
                                </PhysicalContent>
                                <ItemId>5</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>1</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                                  <SubtypeName>OxygenBottle</SubtypeName>
                                  <GasLevel>0</GasLevel>
                                  <OxygenLevel>0</OxygenLevel>
                                </PhysicalContent>
                                <ItemId>6</ItemId>
                              </MyObjectBuilder_InventoryItem>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>1</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                                  <SubtypeName>HydrogenBottle</SubtypeName>
                                  <GasLevel>0</GasLevel>
                                </PhysicalContent>
                                <ItemId>7</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>8</nextItemId>
                            <Volume>1.152</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive CanSend</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Component>
                        </ComponentData>
                      </Components>
                    </ComponentContainer>
                    <CustomName>VC SC Connector</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Inventory>
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>34</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>SteelPlate</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>2</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Computer</SubtypeName>
                          </PhysicalContent>
                          <ItemId>1</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>12</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>SmallTube</SubtypeName>
                          </PhysicalContent>
                          <ItemId>2</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>6</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Motor</SubtypeName>
                          </PhysicalContent>
                          <ItemId>3</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>42</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Construction</SubtypeName>
                          </PhysicalContent>
                          <ItemId>4</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>2</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>LargeTube</SubtypeName>
                          </PhysicalContent>
                          <ItemId>5</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                            <SubtypeName>OxygenBottle</SubtypeName>
                            <GasLevel>0</GasLevel>
                            <OxygenLevel>0</OxygenLevel>
                          </PhysicalContent>
                          <ItemId>6</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                            <SubtypeName>HydrogenBottle</SubtypeName>
                            <GasLevel>0</GasLevel>
                          </PhysicalContent>
                          <ItemId>7</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>8</nextItemId>
                      <Volume>1.152</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Inventory>
                    <MasterToSlaveTransform xsi:nil="true" />
                    <MasterToSlaveGrid xsi:nil="true" />
                    <IsMaster>true</IsMaster>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
                    <SubtypeName>TimerBlockSmall</SubtypeName>
                    <EntityId>77902433155569916</EntityId>
                    <Min x="2" y="14" z="9" />
                    <BlockOrientation Forward="Up" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Repair Projector Timer Block</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Toolbar>
                      <ToolbarType>Character</ToolbarType>
                      <SelectedSlot xsi:nil="true" />
                      <Slots>
                        <Slot>
                          <Index>0</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>OnOff</Action>
                            <BlockEntityId>89052748736145756</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>1</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>OnOff</Action>
                            <BlockEntityId>92245065500618579</BlockEntityId>
                          </Data>
                        </Slot>
                        <Slot>
                          <Index>2</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                            <Action>OnOff</Action>
                            <BlockEntityId>98904300946323190</BlockEntityId>
                          </Data>
                        </Slot>
                      </Slots>
                    </Toolbar>
                    <Delay>1100</Delay>
                    <CurrentTime>0</CurrentTime>
                    <IsCountingDown>false</IsCountingDown>
                    <Silent>false</Silent>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                    <Min x="3" y="14" z="8" />
                    <BlockOrientation Forward="Forward" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                    <Min x="-3" y="14" z="10" />
                    <BlockOrientation Forward="Forward" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
                    <SubtypeName>SmallCameraBlock</SubtypeName>
                    <EntityId>118494890799624401</EntityId>
                    <Min x="0" y="12" z="10" />
                    <BlockOrientation Forward="Backward" Up="Up" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Camera</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <IsActive>false</IsActive>
                    <Fov>1.04719758</Fov>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
                    <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
                    <EntityId>97808139001358953</EntityId>
                    <Min x="2" y="14" z="10" />
                    <BlockOrientation Forward="Left" Up="Up" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <ComponentContainer>
                      <Components>
                        <ComponentData>
                          <TypeId>MyInventoryBase</TypeId>
                          <Component xsi:type="MyObjectBuilder_Inventory">
                            <Items>
                              <MyObjectBuilder_InventoryItem>
                                <Amount>3.3332</Amount>
                                <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                                  <SubtypeName>Uranium</SubtypeName>
                                </PhysicalContent>
                                <ItemId>0</ItemId>
                              </MyObjectBuilder_InventoryItem>
                            </Items>
                            <nextItemId>1</nextItemId>
                            <Volume>0.125</Volume>
                            <Mass>9223372036854.775807</Mass>
                            <MaxItemCount>2147483647</MaxItemCount>
                            <Size xsi:nil="true" />
                            <InventoryFlags>CanReceive</InventoryFlags>
                            <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                          </Component>
                        </ComponentData>
                      </Components>
                    </ComponentContainer>
                    <CustomName>VC SC Small Reactor 3</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>false</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Inventory>
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>3.3332</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                            <SubtypeName>Uranium</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Inventory>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
                    <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
                    <EntityId>123497400575371776</EntityId>
                    <Min x="-2" y="14" z="9" />
                    <BlockOrientation Forward="Up" Up="Left" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Antenna </CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <BroadcastRadius>500</BroadcastRadius>
                    <ShowShipName>true</ShowShipName>
                    <EnableBroadcasting>true</EnableBroadcasting>
                    <AttachedPB>0</AttachedPB>
                    <IgnoreAllied>false</IgnoreAllied>
                    <IgnoreOther>true</IgnoreOther>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <Min x="-3" y="15" z="8" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <Min x="3" y="15" z="8" />
                    <BlockOrientation Forward="Forward" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                    <Min x="-2" y="15" z="8" />
                    <BlockOrientation Forward="Backward" Up="Right" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
                    <Min x="2" y="15" z="8" />
                    <BlockOrientation Forward="Backward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <EntityId>73098398224090658</EntityId>
                    <Min x="-3" y="12" z="5" />
                    <IntegrityPercent>0.3600001</IntegrityPercent>
                    <BuildPercent>0.3600001</BuildPercent>
                    <BlockOrientation Forward="Right" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
                    <EntityId>142641016722629505</EntityId>
                    <Min x="-2" y="12" z="5" />
                    <IntegrityPercent>0.399999946</IntegrityPercent>
                    <BuildPercent>0.399999946</BuildPercent>
                    <BlockOrientation Forward="Left" Up="Down" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="1" y="12" z="3" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
                    <SubtypeName>ButtonPanelSmall</SubtypeName>
                    <EntityId>79855394770498602</EntityId>
                    <Min x="-3" y="13" z="4" />
                    <BlockOrientation Forward="Forward" Up="Left" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Button Panel</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                    <Toolbar>
                      <ToolbarType>Character</ToolbarType>
                      <SelectedSlot xsi:nil="true" />
                      <Slots>
                        <Slot>
                          <Index>0</Index>
                          <Item />
                          <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                            <Action>OnOff</Action>
                            <GridEntityId>0</GridEntityId>
                            <BlockEntityId>79855394770498602</BlockEntityId>
                            <GroupName>VC SC Lights</GroupName>
                          </Data>
                        </Slot>
                      </Slots>
                    </Toolbar>
                    <AnyoneCanUse>false</AnyoneCanUse>
                    <CustomButtonNames>
                      <dictionary>
                        <item>
                          <Key>0</Key>
                          <Value>VC SC Lights</Value>
                        </item>
                      </dictionary>
                    </CustomButtonNames>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="-1" y="12" z="3" />
                    <BlockOrientation Forward="Forward" Up="Down" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="1" y="12" z="10" />
                    <BlockOrientation Forward="Up" Up="Backward" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
                    <Min x="-1" y="12" z="10" />
                    <BlockOrientation Forward="Up" Up="Backward" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
                    <SubtypeName>SmallBlockGyro</SubtypeName>
                    <EntityId>85243018391134245</EntityId>
                    <Min x="2" y="14" z="8" />
                    <BlockOrientation Forward="Down" Up="Right" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                    <ShareMode>All</ShareMode>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>true</Enabled>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                    <Min x="-2" y="14" z="6" />
                    <BlockOrientation Forward="Down" Up="Forward" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
                    <Min x="-2" y="14" z="5" />
                    <BlockOrientation Forward="Down" Up="Backward" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <EntityId>129821873030674763</EntityId>
                    <Min x="-3" y="13" z="6" />
                    <IntegrityPercent>0.7333333</IntegrityPercent>
                    <BuildPercent>0.7333333</BuildPercent>
                    <BlockOrientation Forward="Right" Up="Up" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                    <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
                    <EntityId>72951408388168468</EntityId>
                    <Min x="-3" y="13" z="5" />
                    <IntegrityPercent>0.7333333</IntegrityPercent>
                    <BuildPercent>0.7333333</BuildPercent>
                    <BlockOrientation Forward="Right" Up="Backward" />
                    <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                    <SubtypeName>SmallBlockFrontLight</SubtypeName>
                    <EntityId>131909757740684531</EntityId>
                    <Min x="-1" y="16" z="7" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <CustomName>VC SC Spotlight </CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                    <Radius>5</Radius>
                    <ReflectorRadius>120</ReflectorRadius>
                    <Falloff>1</Falloff>
                    <Intensity>5</Intensity>
                    <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                    <BlinkLenght>10</BlinkLenght>
                    <BlinkOffset>0</BlinkOffset>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
                    <SubtypeName>SmallBlockFrontLight</SubtypeName>
                    <EntityId>74702783978827631</EntityId>
                    <Min x="0" y="16" z="7" />
                    <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
                    <CustomName>VC SC Spotlight </CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                    <Radius>5</Radius>
                    <ReflectorRadius>120</ReflectorRadius>
                    <Falloff>1</Falloff>
                    <Intensity>5</Intensity>
                    <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
                    <BlinkLenght>10</BlinkLenght>
                    <BlinkOffset>0</BlinkOffset>
                  </MyObjectBuilder_CubeBlock>
                  <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
                    <SubtypeName>SmallTextPanel</SubtypeName>
                    <EntityId>98904300946323190</EntityId>
                    <Min x="0" y="14" z="1" />
                    <BlockOrientation Forward="Down" Up="Forward" />
                    <ShareMode>All</ShareMode>
                    <CustomName>VC SC Front Piston Jack Attach Point Sign</CustomName>
                    <ShowOnHUD>false</ShowOnHUD>
                    <ShowInTerminal>true</ShowInTerminal>
                    <ShowInToolbarConfig>true</ShowInToolbarConfig>
                    <ShowInInventory>true</ShowInInventory>
                    <Enabled>false</Enabled>
                    <Description />
                    <Title>Title</Title>
                    <AccessFlag>READ_AND_WRITE_ALL</AccessFlag>
                    <ChangeInterval>1</ChangeInterval>
                    <SelectedImages>
                      <string>Arrow</string>
                      <string>Construction</string>
                    </SelectedImages>
                    <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                    <FontSize>1</FontSize>
                    <PublicDescription />
                    <PublicTitle>Public title</PublicTitle>
                    <ShowText>NONE</ShowText>
                    <FontColor>
                      <PackedValue>4294967295</PackedValue>
                      <X>255</X>
                      <Y>255</Y>
                      <Z>255</Z>
                      <R>255</R>
                      <G>255</G>
                      <B>255</B>
                      <A>255</A>
                    </FontColor>
                    <BackgroundColor>
                      <PackedValue>4278190080</PackedValue>
                      <X>0</X>
                      <Y>0</Y>
                      <Z>0</Z>
                      <R>0</R>
                      <G>0</G>
                      <B>0</B>
                      <A>255</A>
                    </BackgroundColor>
                    <CurrentShownTexture>0</CurrentShownTexture>
                  </MyObjectBuilder_CubeBlock>
                </CubeBlocks>
                <XMirroxPlane x="0" y="14" z="1" />
                <ConveyorLines>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="-1" y="14" z="6" />
                    <StartDirection>Backward</StartDirection>
                    <EndPosition x="-1" y="14" z="7" />
                    <EndDirection>Forward</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="1" y="14" z="6" />
                    <StartDirection>Backward</StartDirection>
                    <EndPosition x="1" y="14" z="7" />
                    <EndDirection>Forward</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="0" y="13" z="4" />
                    <StartDirection>Forward</StartDirection>
                    <EndPosition x="0" y="13" z="3" />
                    <EndDirection>Backward</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="0" y="13" z="2" />
                    <StartDirection>Backward</StartDirection>
                    <EndPosition x="0" y="13" z="3" />
                    <EndDirection>Forward</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="1" y="13" z="3" />
                    <StartDirection>Left</StartDirection>
                    <EndPosition x="0" y="13" z="3" />
                    <EndDirection>Right</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="-1" y="13" z="3" />
                    <StartDirection>Right</StartDirection>
                    <EndPosition x="0" y="13" z="3" />
                    <EndDirection>Left</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="0" y="14" z="9" />
                    <StartDirection>Backward</StartDirection>
                    <EndPosition x="0" y="14" z="10" />
                    <EndDirection>Forward</EndDirection>
                    <Sections />
                    <ConveyorLineType>LARGE_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="0" y="13" z="0" />
                    <StartDirection>Backward</StartDirection>
                    <EndPosition x="0" y="13" z="1" />
                    <EndDirection>Forward</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="0" y="13" z="2" />
                    <StartDirection>Forward</StartDirection>
                    <EndPosition x="0" y="13" z="1" />
                    <EndDirection>Backward</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                  <MyObjectBuilder_ConveyorLine>
                    <StartPosition x="1" y="14" z="10" />
                    <StartDirection>Right</StartDirection>
                    <EndPosition x="2" y="14" z="10" />
                    <EndDirection>Left</EndDirection>
                    <Sections />
                    <ConveyorLineType>SMALL_LINE</ConveyorLineType>
                  </MyObjectBuilder_ConveyorLine>
                </ConveyorLines>
                <BlockGroups>
                  <MyObjectBuilder_BlockGroup>
                    <Name>VC SC Wheels</Name>
                    <Blocks>
                      <Vector3I>
                        <X>-1</X>
                        <Y>12</Y>
                        <Z>1</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>12</Y>
                        <Z>1</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>12</Y>
                        <Z>9</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>12</Y>
                        <Z>9</Z>
                      </Vector3I>
                    </Blocks>
                  </MyObjectBuilder_BlockGroup>
                  <MyObjectBuilder_BlockGroup>
                    <Name>VC SC Thrusters</Name>
                    <Blocks>
                      <Vector3I>
                        <X>-2</X>
                        <Y>14</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>14</Y>
                        <Z>7</Z>
                      </Vector3I>
                    </Blocks>
                  </MyObjectBuilder_BlockGroup>
                  <MyObjectBuilder_BlockGroup>
                    <Name>VC SC Artificial Mass</Name>
                    <Blocks>
                      <Vector3I>
                        <X>-1</X>
                        <Y>12</Y>
                        <Z>8</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>12</Y>
                        <Z>8</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>12</Y>
                        <Z>2</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>12</Y>
                        <Z>2</Z>
                      </Vector3I>
                    </Blocks>
                  </MyObjectBuilder_BlockGroup>
                  <MyObjectBuilder_BlockGroup>
                    <Name>VC SC Reactors</Name>
                    <Blocks>
                      <Vector3I>
                        <X>1</X>
                        <Y>13</Y>
                        <Z>3</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>13</Y>
                        <Z>3</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>14</Y>
                        <Z>10</Z>
                      </Vector3I>
                    </Blocks>
                  </MyObjectBuilder_BlockGroup>
                  <MyObjectBuilder_BlockGroup>
                    <Name>VC SC Forward Lights</Name>
                    <Blocks>
                      <Vector3I>
                        <X>-1</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>0</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                    </Blocks>
                  </MyObjectBuilder_BlockGroup>
                  <MyObjectBuilder_BlockGroup>
                    <Name>VC SC Lights</Name>
                    <Blocks>
                      <Vector3I>
                        <X>-2</X>
                        <Y>14</Y>
                        <Z>10</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>0</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                    </Blocks>
                  </MyObjectBuilder_BlockGroup>
                  <MyObjectBuilder_BlockGroup>
                    <Name>VC SC Systems</Name>
                    <Blocks>
                      <Vector3I>
                        <X>0</X>
                        <Y>13</Y>
                        <Z>0</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-2</X>
                        <Y>15</Y>
                        <Z>9</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>12</Y>
                        <Z>8</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>12</Y>
                        <Z>8</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>12</Y>
                        <Z>2</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>12</Y>
                        <Z>2</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-2</X>
                        <Y>13</Y>
                        <Z>5</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-3</X>
                        <Y>13</Y>
                        <Z>4</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>0</X>
                        <Y>12</Y>
                        <Z>10</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>0</X>
                        <Y>14</Y>
                        <Z>11</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>14</Y>
                        <Z>8</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>14</Y>
                        <Z>6</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>0</X>
                        <Y>14</Y>
                        <Z>8</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-2</X>
                        <Y>14</Y>
                        <Z>8</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>13</Y>
                        <Z>4</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-2</X>
                        <Y>14</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>14</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>13</Y>
                        <Z>3</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>13</Y>
                        <Z>3</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>14</Y>
                        <Z>10</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-2</X>
                        <Y>14</Y>
                        <Z>10</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>0</X>
                        <Y>16</Y>
                        <Z>7</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>14</Y>
                        <Z>3</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>14</Y>
                        <Z>3</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>0</X>
                        <Y>14</Y>
                        <Z>1</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>13</Y>
                        <Z>6</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>2</X>
                        <Y>14</Y>
                        <Z>9</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>12</Y>
                        <Z>1</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>12</Y>
                        <Z>1</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>-1</X>
                        <Y>12</Y>
                        <Z>9</Z>
                      </Vector3I>
                      <Vector3I>
                        <X>1</X>
                        <Y>12</Y>
                        <Z>9</Z>
                      </Vector3I>
                    </Blocks>
                  </MyObjectBuilder_BlockGroup>
                </BlockGroups>
                <Handbrake>true</Handbrake>
                <DisplayName>VC Scout Car</DisplayName>
                <OxygenAmount>
                  <float>0</float>
                  <float>0</float>
                </OxygenAmount>
                <DestructibleBlocks>true</DestructibleBlocks>
                <CreatePhysics>false</CreatePhysics>
                <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                <IsRespawnGrid>false</IsRespawnGrid>
                <LocalCoordSys>21</LocalCoordSys>
                <TargetingTargets />
              </ProjectedGrid>
              <ProjectionOffset>
                <X>-2</X>
                <Y>-13</Y>
                <Z>-4</Z>
              </ProjectionOffset>
              <ProjectionRotation>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </ProjectionRotation>
              <KeepProjection>true</KeepProjection>
              <ShowOnlyBuildable>false</ShowOnlyBuildable>
              <InstantBuildingEnabled>false</InstantBuildingEnabled>
              <MaxNumberOfProjections>5</MaxNumberOfProjections>
              <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
              <ProjectionsRemaining>0</ProjectionsRemaining>
              <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="15" z="9" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>128001436642437611</EntityId>
              <Min x="2" y="13" z="6" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC LCD Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value />
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>141471880059571797</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Start</Action>
                      <BlockEntityId>128001436642437611</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>128001436642437611</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <JustTriggered>true</JustTriggered>
              <Delay>1100</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>true</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>119994280109567408</EntityId>
              <Min x="-2" y="13" z="7" />
              <IntegrityPercent>0.6923077</IntegrityPercent>
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <CustomName>VC SC Small Atmospheric Thruster 1 (Down)  (Down) </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>76146054471576805</EntityId>
              <Min x="2" y="13" z="7" />
              <IntegrityPercent>0.7948718</IntegrityPercent>
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <CustomName>VC SC Small Atmospheric Thruster 2 (Down) </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="14" z="7" />
              <IntegrityPercent>0.4</IntegrityPercent>
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="2" y="15" z="10" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>141471880059571797</EntityId>
              <Min x="-2" y="14" z="8" />
              <IntegrityPercent>0.4379391</IntegrityPercent>
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC LCD Programmable block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>/* v:1.132 [01.126 compatibility, Right command, DetailsX &amp; Dampeners &amp; Occupied commands, Accel, More Power variants, PowerTime, Same grid filter]   
* In-game script by MMaster   
*   
* Last Update: Fix for modded items with space in SubtypeId not showing up
* 01.126 game update compatibility 
* Right command 
*   
* Previous updates: Look at Change notes tab on Steam workshop page.   
* Dampeners &amp; Occupied commands, DetailsX which skips "Type:" line  
* Performance optimizations when Trigger Now is used  
* Fixed \ adding space to command  
* Comments in Private text using //  
*    
* Customize these: (do not report problems with modified values!) */ 
 
// Use this tag to identify LCDs managed by this script   
// Name filtering rules can be used here so you can use even G:Group or T:[My LCD]   
public static string LCD_TAG = "T:[LCD]"; 
 
// How many panels to update per one step   
public static int PANELS_PER_STEP = 1; 
// How many lines to scroll per step   
public static int SCROLL_LINES_PER_STEP = 5; 
 
// Enable initial boot sequence (after compile / world load)   
public static bool ENABLE_BOOT = true; 
 
// Force redraw of panels? (default = true)   
// true - forces redraw of panels (should no longer be needed - its needed again!) 
public static bool FORCE_REDRAW = true; 
 
// (for developer) Enable debug to LCD marked with [DEBUG]   
public static bool EnableDebug = false; 
 
/*   
READ THIS FULL GUIDE   
http://steamcommunity.com/sharedfiles/filedetails/?id=407158161   
   
Basic video guide   
Please watch the video guide even if you don't understand my English. You can see how things are done there.   
   
http://www.youtube.com/watch?v=oopzyQ0t6Dk   
   
EXAMPLE WORLD   
http://steamcommunity.com/sharedfiles/filedetails/?id=412154340   
   
Read Change Notes (above screenshots) for latest updates and new features.   
I notify about updates on twitter so follow if interested.    
   
Please carefully read the FULL GUIDE before asking questions I had to remove guide from here to add more features :(   
Please DO NOT publish this script or its derivations without my permission! Feel free to use it in blueprints!   
   
Special Thanks   
bssespaceengineers.com - awesome server   
Rhedd - for his contribution to modded items entries   
Textor and CyberVic for their great script related contributions on Keen forums.   
   
Watch Twitter: https://twitter.com/MattsPlayCorner   
and Facebook: https://www.facebook.com/MattsPlayCorner1080p   
for more crazy stuff from me in the future :)   
*/ 
void InitBoot() 
{ 
if (LCDsProgram.bootFrames == null) 
LCDsProgram.bootFrames = new List&lt;string&gt;()   
{   
   
/* BOOT FRAMES    
* Each @"&lt;text&gt;" marks single frame, add as many as you want each will be displayed for one second   
* @"" is multiline string so you can write multiple lines   
*/   
@"   
Initializing systems"   
,   
@"   
Verifying connections"   
,   
@"   
Loading commands"   
/* END OF BOOT FRAMES */   
  
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
// DO NOT MODIFY ANYTHING BELOW THIS   
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   
}; 
} 
 
public static string SECONDARY_TAG = "T:!LCD!"; 
public static int step; 
void Main(string argument) 
{ 
MM.EnableDebug = EnableDebug; 
MM.Me = Me; 
MM.Echo = Echo; 
MM.ElapsedTime += ElapsedTime.TotalSeconds; 
InitBoot(); 
if (!MM.Init(GridTerminalSystem)) return; 
MMLCDMgr.forceRedraw = FORCE_REDRAW; 
MMLCDMgr.SCROLL_LINES = SCROLL_LINES_PER_STEP; 
LCDsProgram.SECONDARY_TAG = SECONDARY_TAG; 
LCDsProgram.PANELS_PER_STEP = PANELS_PER_STEP; 
if (!ENABLE_BOOT) 
LCDsProgram.bootStep = int.MaxValue; 
LCDsProgram.bootScreens = ENABLE_BOOT; 
 
LCDsProgram lcdProg = new LCDsProgram(LCD_TAG); 
lcdProg.Run(argument.ToLower(), step++); 
MM.ElapsedTime = 0; 
} 
} 
 
public static class MMItems 
{ 
public static Dictionary&lt;string, MMItem&gt; items = new Dictionary&lt;string, MMItem&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsBySubtype = new Dictionary&lt;string, MMItem&gt;(); 
public static List&lt;string&gt; keys = new List&lt;string&gt;(); 
public static Dictionary&lt;string, MMItem&gt; itemsByShort = new Dictionary&lt;string, MMItem&gt;(); 
 
public static void Init() 
{ 
if (items.Count &gt; 0) return; 
 
// **************************************************   
// OK MAYBE YOU CAN ADD MODDED ITEMS AND MODIFY QUOTAS    
//    IF THAT WARNING DIDN'T SCARE YOU   
// **************************************************   
// ITEMS AND QUOTAS LIST    
// (subType, mainType, quota, display name, short name)   
// ADD MODDED ITEMS TO THIS LIST   
// !! MAIN TYPES MUST GO TOGETHER FOR INV CATEGORIES !!   
// VANILLA ITEMS  
Add("Stone", "Ore"); 
Add("Iron", "Ore"); 
Add("Nickel", "Ore"); 
Add("Cobalt", "Ore"); 
Add("Magnesium", "Ore"); 
Add("Silicon", "Ore"); 
Add("Silver", "Ore"); 
Add("Gold", "Ore"); 
Add("Platinum", "Ore"); 
Add("Uranium", "Ore"); 
Add("Ice", "Ore"); 
Add("Stone", "Ingot", 40000, "Gravel", "gravel"); 
Add("Iron", "Ingot", 300000); 
Add("Nickel", "Ingot", 900000); 
Add("Cobalt", "Ingot", 120000); 
Add("Magnesium", "Ingot", 80000); 
Add("Silicon", "Ingot", 80000); 
Add("Silver", "Ingot", 800000); 
Add("Gold", "Ingot", 80000); 
Add("Platinum", "Ingot", 45000); 
Add("Uranium", "Ingot", 12000); 
Add("Scrap", "Ingot"); 
Add("AutomaticRifleItem", "Tool", 0, "Automatic Rifle"); 
Add("PreciseAutomaticRifleItem", "Tool", 0, "* Precise Rifle"); 
Add("RapidFireAutomaticRifleItem", "Tool", 0, "** Rapid-Fire Rifle"); 
Add("UltimateAutomaticRifleItem", "Tool", 0, "*** Elite Rifle"); 
Add("WelderItem", "Tool", 0, "Welder"); 
Add("Welder2Item", "Tool", 0, "* Enh. Welder"); 
Add("Welder3Item", "Tool", 0, "** Prof. Welder"); 
Add("Welder4Item", "Tool", 0, "*** Elite Welder"); 
Add("AngleGrinderItem", "Tool", 0, "Angle Grinder"); 
Add("AngleGrinder2Item", "Tool", 0, "* Enh. Grinder"); 
Add("AngleGrinder3Item", "Tool", 0, "** Prof. Grinder"); 
Add("AngleGrinder4Item", "Tool", 0, "*** Elite Grinder"); 
Add("HandDrillItem", "Tool", 0, "Hand Drill"); 
Add("HandDrill2Item", "Tool", 0, "* Enh. Drill"); 
Add("HandDrill3Item", "Tool", 0, "** Prof. Drill"); 
Add("HandDrill4Item", "Tool", 0, "*** Elite Drill"); 
Add("Construction", "Component", 50000); 
Add("MetalGrid", "Component", 15500, "Metal Grid"); 
Add("InteriorPlate", "Component", 55000, "Interior Plate"); 
Add("SteelPlate", "Component", 300000, "Steel Plate"); 
Add("Girder", "Component", 3500); 
Add("SmallTube", "Component", 26000, "Small Tube"); 
Add("LargeTube", "Component", 6000, "Large Tube"); 
Add("Motor", "Component", 16000); 
Add("Display", "Component", 500); 
Add("BulletproofGlass", "Component", 12000, "Bulletp. Glass", "bpglass"); 
Add("Computer", "Component", 6500); 
Add("Reactor", "Component", 10000); 
Add("Thrust", "Component", 16000, "Thruster", "thruster"); 
Add("GravityGenerator", "Component", 250, "GravGen", "gravgen"); 
Add("Medical", "Component", 120); 
Add("RadioCommunication", "Component", 250, "Radio-comm", "radio"); 
Add("Detector", "Component", 400); 
Add("Explosives", "Component", 500); 
Add("SolarCell", "Component", 2800, "Solar Cell"); 
Add("PowerCell", "Component", 2800, "Power Cell"); 
Add("Superconductor", "Component", 3000); 
Add("NATO_5p56x45mm", "Ammo", 8000, "5.56x45mm", "5.56x45mm"); 
Add("NATO_25x184mm", "Ammo", 2500, "25x184mm", "25x184mm"); 
Add("Missile200mm", "Ammo", 1600, "200mm Missile", "200mmmissile"); 
Add("OxygenBottle", "OxygenContainerObject", 5, "Oxygen Bottle"); 
Add("HydrogenBottle", "GasContainerObject", 5, "Hydrogen Bottle"); 
 
 
// MODDED ITEMS    
// (subType, mainType, quota, display name, short name, used)   
// * if used is true, item will be shown in inventory even for 0 items   
// * if used is false, item will be used only for display name and short name   
// AzimuthSupercharger    
Add("AzimuthSupercharger", "Component", 1600, "Supercharger", "supercharger", false); 
// OKI Ammo   
Add("OKI23mmAmmo", "Ammo", 500, "23x180mm", "23x180mm", false); 
Add("OKI50mmAmmo", "Ammo", 500, "50x450mm", "50x450mm", false); 
Add("OKI122mmAmmo", "Ammo", 200, "122x640mm", "122x640mm", false); 
Add("OKI230mmAmmo", "Ammo", 100, "230x920mm", "230x920mm", false); 
} 
 
/* REALLY REALLY REALLY   
* DO NOT MODIFY ANYTHING BELOW THIS   
*/ 
 
// displayName - how the item will be displayed   
// shortName - how the item can be called in arguments (eg: +supercharger)   
public static void Add(string subType, string mainType, int quota = 0, string displayName = "", string shortName = "", bool used = true) 
{ 
if (mainType == "Ammo") 
mainType = "AmmoMagazine"; 
else if (mainType == "Tool") 
mainType = "PhysicalGunObject"; 
string fullType = subType + ' ' + mainType; 
MMItem item = new MMItem(subType, mainType, quota, displayName, shortName, used); 
items.Add(fullType, item); 
if (!itemsBySubtype.ContainsKey(subType)) 
itemsBySubtype.Add(subType, item); 
if (shortName != "") 
itemsByShort.Add(shortName.ToLower(), item); 
keys.Add(fullType); 
} 
 
public static MMItem GetItemOfType(string subType = "", string mainType = "") 
{ 
if (items.ContainsKey(subType + " " + mainType)) 
return items[subType + " " + mainType]; 
 
if (mainType == "") { 
MMItem item = null; 
itemsBySubtype.TryGetValue(subType, out item); 
return item; 
} 
 
if (subType == "") 
for (int i = 0; i &lt; items.Count; i++) { 
MMItem item = items[keys[i]]; 
if (mainType == item.mainType) 
return item; 
} 
return null; 
} 
} 
 
public class LCDsProgram 
{ 
// for german clients   
public static string SECONDARY_TAG = ""; 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
// x position of inventory numbers   
public const float LCD_LINE_NUMERS_POS = LCD_LINE_WIDTH - 30; 
 
public const float LCD_LINE_INV_NUMBERS_POS = LCD_LINE_WIDTH - 130; 
public const float LCD_LINE_INGOT_NUMBERS_POS = 375; 
public const float LCD_LINE_DMG_NUMBERS_POS = LCD_LINE_WIDTH - 230; 
public const float LCD_LINE_WORK_STATE_POS = LCD_LINE_WIDTH - 30; 
public const float LCD_LINE_BLOCK_COUNT_POS = LCD_LINE_WIDTH - 30; 
 
public const float PERCENT_TEXT_SIZE = 110f; 
 
// number of component progress bar characters   
public const int INV_PROGRESS_CHARS = 38; 
// full line of progress bar   
public const int FULL_PROGRESS_CHARS = 116; 
 
public static int PANELS_PER_STEP = 1; 
 
public MMPanelDict panels = new MMPanelDict(); 
public double velocity = 0; 
public static double lastVel = 0; 
public double accel = 0; 
 
public static Dictionary&lt;string, int&gt; ptNLtoIdx = new Dictionary&lt;string, int&gt;(); 
public static List&lt;double&gt; ptElapsedL = new List&lt;double&gt;(); 
public static VRageMath.Vector3D lastPos; 
public static int bootStep = 0; 
public static bool bootScreens = true; 
public static List&lt;string&gt; bootFrames = null; 
public LCDsProgram(string nameLike) 
{ 
MMBlkCol lcds = new MMBlkCol(); 
lcds.AddBofT("textpanel", nameLike); 
if (nameLike == "T:[LCD]" &amp;&amp; SECONDARY_TAG != "") 
lcds.AddBofT("textpanel", SECONDARY_TAG); 
 
int i = 0; 
while (i &lt; lcds.Count()) { 
IMyTextPanel panel = (lcds.Blocks[i] as IMyTextPanel); 
if (!panel.IsWorking) { 
lcds.Blocks.RemoveAt(i); 
continue; 
} 
string text = panel.CustomName + " " + panel.NumberInGrid + " " + panel.GetPosition().ToString("F0"); 
MMPanel p = null; 
 
int joinpos = text.IndexOf("!LINK:"); 
 
if (joinpos &lt; 0 || text.Length == joinpos + 6) { 
p = new MMPanel(); 
p.panels.AddItem(text, panel); 
panels.AddItem(text, p); 
i++; 
continue; 
} 
 
text = text.Substring(joinpos + 6); 
 
string[] subs = text.Split(' '); 
string group = subs[0]; 
p = panels.GetItem(group); 
if (p == null) { 
p = new MMPanel(); 
panels.AddItem(group, p); 
} 
p.panels.AddItem(text, panel); 
i++; 
} 
} 
 
public void Run(string argument, int step) 
{ 
if (panels.CountAll() == 0) 
return; 
 
velocity = (MM.Me.GetPosition() - lastPos).Length() / MM.ElapsedTime; 
accel = (velocity - lastVel) / MM.ElapsedTime; 
 
for (int ei = 0; ei &lt; ptElapsedL.Count; ei++) 
ptElapsedL[ei] += MM.ElapsedTime; 
 
if (argument == "clear") { 
bootStep = (bootScreens ? 0 : int.MaxValue); 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
MMLCDMgr.UpdatePanel(p); 
} 
} 
else 
if (argument == "boot" || bootStep &lt;= bootFrames.Count) { 
if (bootStep &gt; bootFrames.Count) 
bootStep = 0; 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
MMPanel p = panels.GetItemAt(i); 
p.SortPanels(); 
MMLCDMgr.SetupLCDText(p); 
MMLCDMgr.ClearText(); 
// don't display on LCDs with really large font   
if (p.first.GetValueFloat("FontSize") &gt; 3f) 
continue; 
MMLCDMgr.AddCenterLn(M.T["B1"], LCD_LINE_WIDTH / 2); 
double perc = (double)bootStep / bootFrames.Count * 100; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
if (bootStep == bootFrames.Count) { 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddCenterLn("Configurable Automatic LCDs", LCD_LINE_WIDTH / 2); 
MMLCDMgr.AddCenterLn("by MMaster", LCD_LINE_WIDTH / 2); 
} 
else 
MMLCDMgr.AddMultiLn(bootFrames[bootStep]); 
MMLCDMgr.UpdatePanel(p); 
} 
bootStep++; 
} 
else { 
for (int i = 0; i &lt; PANELS_PER_STEP; i++) { 
RunSingle(panels.GetItemAt((step * PANELS_PER_STEP + i) % panels.CountAll())); 
} 
} 
 
lastPos = MM.Me.GetPosition(); 
lastVel = velocity; 
} 
 
public void RunSingle(MMPanel panel) 
{ 
 
bool useText = false; 
panel.SortPanels(); 
MMLCDMgr.SetupLCDText(panel); 
 
string pubText = panel.first.CustomName; 
pubText = (pubText.Contains("#") ? pubText.Substring(pubText.LastIndexOf('#') + 1) : ""); 
MMLCDMgr.ClearText(); 
 
if (pubText != "") 
MMLCDMgr.AddLn(pubText); 
 
string title = panel.first.GetPrivateTitle(); 
if (title == "Title" || title == "") 
title = panel.first.GetPublicTitle(); 
 
if (title.Trim() == "UseTextCommands") { 
useText = true; 
title = panel.first.GetPrivateText(); 
title = title.Replace("\\\n", ""); 
} 
 
if (title.StartsWith("Public") || title == "") { 
if (useText) 
MMLCDMgr.AddLn(M.T["H1"]); 
else 
MMLCDMgr.AddLn(M.T["H2"]); 
MMLCDMgr.UpdatePanel(panel); 
return; 
} 
 
char[] delim = { ';', '\n' }; 
string[] cmds = title.Split(delim); 
for (int i = 0; i &lt; cmds.Length; i++) { 
MM.Debug("Running command " + cmds[i]); 
if (cmds[i].Trim().StartsWith("//")) 
continue; 
 
MMCmd cmd = new MMCmd(cmds[i]); 
 
if (cmd.cmdstr.StartsWith("inventory") || 
cmd.cmdstr == "missing" || 
cmd.cmdstr.StartsWith("invlist")) 
RunInvListing(cmd); 
else 
if (cmd.cmdstr.StartsWith("cargo")) 
RunCargoStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("mass")) 
RunMass(cmd); 
else 
if (cmd.cmdstr == "oxygen") 
RunOxygenStatus(cmd); 
else 
if (cmd.cmdstr == "tanks") 
RunTankStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("powertime")) 
RunPowerTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("power")) 
RunPowerStatus(cmd); 
else 
if (cmd.cmdstr == "speed") 
RunVelocity(cmd); 
else 
if (cmd.cmdstr.StartsWith("accel")) 
RunAccel(cmd); 
else 
if (cmd.cmdstr.StartsWith("charge")) 
RunCharge(cmd); 
else 
if (cmd.cmdstr.StartsWith("time") || 
cmd.cmdstr.StartsWith("date")) 
RunCurrentTime(cmd); 
else 
if (cmd.cmdstr.StartsWith("countdown")) 
RunCountdown(cmd); 
else 
if (cmd.cmdstr == "echo" || 
cmd.cmdstr == "center" || 
cmd.cmdstr == "right") 
RunEcho(cmd); 
else 
if (cmd.cmdstr.StartsWith("text")) 
RunText(cmd); 
else 
if (cmd.cmdstr.EndsWith("count")) 
RunBlockCount(cmd); 
else 
if (cmd.cmdstr.StartsWith("dampeners") || cmd.cmdstr.StartsWith("occupied")) 
RunShipCtrlStatus(cmd); 
else 
if (cmd.cmdstr.StartsWith("working")) 
RunWorkingList(cmd); 
else 
if (cmd.cmdstr.StartsWith("damage")) 
RunDamage(cmd); 
else 
if (cmd.cmdstr.StartsWith("amount")) 
RunItemAmount(cmd); 
else 
if (cmd.cmdstr.StartsWith("pos")) 
RunPosition(cmd); 
else 
if (cmd.cmdstr.StartsWith("details")) 
RunDetails(cmd); 
else 
MMLCDMgr.AddLn(M.T["UC"] + ": " + cmd.cmdstr); 
 
MM.Debug("Done."); 
} 
 
MMLCDMgr.UpdatePanel(panel); 
 
} 
 
public void RunCharge(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.Contains("x"); 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("jumpdrive", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Charge: " + M.T["D2"]); 
return; 
} 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyJumpDrive jd = blocks.Blocks[i] as IMyJumpDrive; 
 
double cur, max, perc; 
perc = MMStatus.GetJDChargeVals(jd, out cur, out max); 
 
MMLCDMgr.Add(jd.CustomName); 
if (!simple) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(cur) + "Wh / " + MM.FormatLargeNumber(max) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
} 
 
public void RunVelocity(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["S1"] + " "); 
MMLCDMgr.AddRightLn(velocity.ToString("F1") + " m/s ", LCD_LINE_WIDTH); 
} 
 
public void RunAccel(MMCmd cmd) 
{ 
MMLCDMgr.Add(M.T["AC1"] + " "); 
MMLCDMgr.AddRightLn(accel.ToString("F1") + " m/s²", LCD_LINE_WIDTH); 
} 
 
public void RunText(MMCmd cmd) 
{ 
bool fromLCD = (cmd.cmdstr == "textlcd"); 
 
IMyTextPanel p = MMLCDMgr.curP.first; 
if (p == null) 
return; 
 
string text = p.GetPrivateText(); 
 
if (fromLCD) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
IMyTextPanel tp = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike) as IMyTextPanel; 
if (tp == null) { 
MMLCDMgr.AddLn("TextLCD: " + M.T["T1"] + cmd.nameLike); 
return; 
} 
 
text = tp.GetPublicText(); 
} 
else { 
MMLCDMgr.AddLn("TextLCD:" + M.T["T2"]); 
return; 
} 
} 
 
string[] lines = text.Split('\n'); 
if (lines.Length == 0) { 
if (!fromLCD) 
MMLCDMgr.AddLn("Text: " + M.T["T3"]); 
return; 
} 
 
for (int i = 0; i &lt; lines.Length; i++) 
MMLCDMgr.AddLn(lines[i]); 
} 
 
private void PrintDetails(IMyTerminalBlock block, int first = 0) 
{ 
string[] lines = block.DetailedInfo.Split('\n'); 
for (int j = first; j &lt; lines.Length; j++) 
if (lines[j] != "") 
MMLCDMgr.AddLn("  " + lines[j]); 
} 
 
public void RunDetails(MMCmd cmd) 
{ 
if (cmd.nameLike == "" || cmd.nameLike == "*") { 
MMLCDMgr.AddLn("Details: " + M.T["D1"]); 
return; 
} 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
MMLCDMgr.AddLn("Details: " + M.T["D2"]); 
return; 
} 
 
int si = (cmd.cmdstr.EndsWith("x") ? 1 : 0); 
IMyTerminalBlock block = blocks.Blocks[0]; 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
 
for (int i = 1; i &lt; blocks.Count(); i++) { 
block = blocks.Blocks[i]; 
MMLCDMgr.AddLn(""); 
MMLCDMgr.AddLn(block.CustomName); 
PrintDetails(block, si); 
} 
} 
 
public void RunPosition(MMCmd cmd) 
{ 
bool posxyz = (cmd.cmdstr == "posxyz"); 
bool gps = (cmd.cmdstr == "posgps"); 
 
IMyTerminalBlock block = MMLCDMgr.curP.first; 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") { 
block = MM._GridTerminalSystem.GetBlockWithName(cmd.nameLike); 
if (block == null) { 
MMLCDMgr.AddLn(M.T["P1"] + ": " + cmd.nameLike); 
return; 
} 
} 
 
if (gps) { 
VRageMath.Vector3D pos = block.GetPosition(); 
 
MMLCDMgr.AddLn("GPS:" + M.T["P2"] + ":" + 
pos.GetDim(0).ToString("F2") + ":" + 
pos.GetDim(1).ToString("F2") + ":" + 
pos.GetDim(2).ToString("F2") + ":"); 
return; 
} 
 
MMLCDMgr.Add(M.T["P2"] + ": "); 
if (!posxyz) { 
MMLCDMgr.AddRightLn(block.GetPosition().ToString("F0"), LCD_LINE_WORK_STATE_POS); 
return; 
} 
 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(" X: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(0).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Y: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(1).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.Add(" Z: "); 
MMLCDMgr.AddRightLn(block.GetPosition().GetDim(2).ToString("F0"), LCD_LINE_WORK_STATE_POS); 
} 
 
private void ShowBlkCntOfType(MMBlkCol blocks, string type, bool enabledCnt, bool producingCnt) 
{ 
string name; 
 
if (blocks.Count() == 0) { 
name = type.ToLower(); 
name = char.ToUpper(name[0]) + name.Substring(1).ToLower(); 
MMLCDMgr.Add(name + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? "0 / 0" : "0"); 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
else { 
Dictionary&lt;string, int&gt; typeCount = new Dictionary&lt;string, int&gt;(); 
Dictionary&lt;string, int&gt; typeWorkingCount = new Dictionary&lt;string, int&gt;(); 
List&lt;string&gt; blockTypes = new List&lt;string&gt;(); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyProductionBlock prod = blocks.Blocks[j] as IMyProductionBlock; 
name = blocks.Blocks[j].DefinitionDisplayNameText; 
if (blockTypes.Contains(name)) { 
typeCount[name]++; 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount[name]++; 
} 
else { 
typeCount.Add(name, 1); 
blockTypes.Add(name); 
if (enabledCnt || producingCnt) 
if ((enabledCnt &amp;&amp; blocks.Blocks[j].IsWorking) || 
(producingCnt &amp;&amp; prod != null &amp;&amp; prod.IsProducing)) 
typeWorkingCount.Add(name, 1); 
else 
typeWorkingCount.Add(name, 0); 
} 
} 
for (int j = 0; j &lt; typeCount.Count; j++) { 
MMLCDMgr.Add(blockTypes[j] + " " + M.T["C1"] + " "); 
string countstr = (enabledCnt || producingCnt ? 
typeWorkingCount[blockTypes[j]] + " / " : "") + 
typeCount[blockTypes[j]]; 
 
MMLCDMgr.AddRightLn(countstr, LCD_LINE_BLOCK_COUNT_POS); 
} 
} 
} 
 
public void RunBlockCount(MMCmd cmd) 
{ 
bool enabledCnt = (cmd.cmdstr == "enabledcount"); 
bool producingCnt = (cmd.cmdstr == "prodcount"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowBlkCntOfType(blocks, "blocks", enabledCnt, producingCnt); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT(arg.sub[subi], cmd.nameLike); 
ShowBlkCntOfType(blocks, arg.sub[subi], enabledCnt, producingCnt); 
} 
} 
} 
 
public string GetWorkingString(IMyTerminalBlock block) 
{ 
if (!block.IsWorking) 
return M.T["W1"]; 
 
IMyProductionBlock prod = block as IMyProductionBlock; 
if (prod != null) 
if (prod.IsProducing) 
return M.T["W2"]; 
else 
return M.T["W3"]; 
 
IMyAirVent vent = block as IMyAirVent; 
if (vent != null) { 
if (vent.CanPressurize) 
return (vent.GetOxygenLevel() * 100).ToString("F1") + "%"; 
else 
return M.T["W4"]; 
} 
 
IMyOxygenTank tank = block as IMyOxygenTank; 
if (tank != null) 
return (tank.GetOxygenLevel() * 100).ToString("F1") + "%"; 
 
IMyBatteryBlock battery = block as IMyBatteryBlock; 
if (battery != null) 
return MMStatus.GetBatWorkingStr(battery); 
 
IMyJumpDrive jd = block as IMyJumpDrive; 
if (jd != null) 
return MMStatus.GetJDCharge(jd).ToString("0.0") + "%"; 
 
IMyLandingGear gear = block as IMyLandingGear; 
if (gear != null) 
return MMStatus.GetLGStatus(gear); 
 
IMyDoor door = block as IMyDoor; 
if (door != null) { 
if (door.Open) 
return M.T["W5"]; 
return M.T["W6"]; 
} 
 
IMyShipConnector conn = block as IMyShipConnector; 
if (conn != null) 
if (conn.IsLocked) { 
if (conn.IsConnected) 
return M.T["W7"]; 
else 
return M.T["W10"]; 
} 
else 
return M.T["W8"]; 
 
IMyLaserAntenna lasant = block as IMyLaserAntenna; 
if (lasant != null) 
return MMStatus.GetLAStatus(lasant); 
 
IMyRadioAntenna ant = block as IMyRadioAntenna; 
if (ant != null) 
return MM.FormatLargeNumber(ant.Radius) + "m"; 
 
IMyBeacon beacon = block as IMyBeacon; 
if (beacon != null) 
return MM.FormatLargeNumber(beacon.Radius) + "m"; 
 
return M.T["W9"]; 
} 
 
private void ShowWorkingOfType(MMBlkCol blocks, bool enabledList, string state) 
{ 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
string onoff = (enabledList ? (block.IsWorking ? M.T["W9"] : M.T["W1"]) : GetWorkingString(block)); 
if (state != "" &amp;&amp; onoff.ToLower() != state) 
continue; 
if (enabledList) 
onoff = GetWorkingString(block); 
 
string blockName = block.CustomName; 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 100); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(onoff, LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunShipCtrlStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBofT("shipctrl", cmd.nameLike); 
 
if (blocks.Count() &lt;= 0) { 
if (cmd.nameLike != "" &amp;&amp; cmd.nameLike != "*") 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"] + " (" + cmd.nameLike + ")"); 
else 
MMLCDMgr.AddLn(cmd.cmdstr + ": " + M.T["SC1"]); 
return; 
} 
 
if (cmd.cmdstr.StartsWith("damp")) { 
bool s = (blocks.Blocks[0] as IMyShipController).DampenersOverride; 
MMLCDMgr.Add(M.T["SCD"]); 
MMLCDMgr.AddRightLn(s ? "ON" : "OFF", LCD_LINE_WORK_STATE_POS); 
} 
else { 
bool s = (blocks.Blocks[0] as IMyShipController).IsUnderControl; 
MMLCDMgr.Add(M.T["SCO"]); 
MMLCDMgr.AddRightLn(s ? "YES" : "NO", LCD_LINE_WORK_STATE_POS); 
} 
} 
public void RunWorkingList(MMCmd cmd) 
{ 
bool enabledList = (cmd.cmdstr == "workingx"); 
 
if (cmd.args.Count == 0) { 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
ShowWorkingOfType(blocks, enabledList, ""); 
return; 
} 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string[] subparts = arg.sub[subi].ToLower().Split(':'); 
string subargtype = subparts[0]; 
string subargstate = (subparts.Length &gt; 1 ? subparts[1] : ""); 
if (subargtype != "") 
blocks.AddBofT(subargtype, cmd.nameLike); 
else 
blocks.AddBOfName(cmd.nameLike); 
 
ShowWorkingOfType(blocks, enabledList, subargstate); 
} 
} 
} 
 
public void RunItemAmount(MMCmd cmd) 
{ 
bool progressbars = true; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
progressbars = false; 
} 
 
if (cmd.args.Count == 0) 
cmd.args.Add(new MMArg( 
"reactor,gatlingturret,missileturret,interiorturret,gatlinggun,launcherreload,launcher,oxygenerator")); 
 
for (int i = 0; i &lt; cmd.args.Count; i++) { 
MMArg arg = cmd.args[i]; 
arg.Parse(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
MMBlkCol blocks = new MMBlkCol(); 
if (arg.sub[subi] == "") 
continue; 
string subargtype = arg.sub[subi]; 
blocks.AddBofT(subargtype, cmd.nameLike); 
 
for (int j = 0; j &lt; blocks.Count(); j++) { 
IMyTerminalBlock block = blocks.Blocks[j]; 
IMyInventory inv = block.GetInventory(0); 
if (inv == null) 
continue; 
 
double amt = 0; 
double maxAmt = 0; 
double otherAmt = 0; 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
string itemType = (items.Count &gt; 0 ? items[0].Content.ToString() : ""); 
for (int idx = 0; idx &lt; items.Count; idx++) { 
IMyInventoryItem item = items[idx]; 
 
if (item.Content.ToString() != itemType) 
otherAmt += (double)item.Amount; 
else 
amt += (double)item.Amount; 
} 
string amountStr = M.T["A1"]; 
string blockName = block.CustomName; 
 
if (amt &gt; 0 &amp;&amp; (double)inv.CurrentVolume &gt; 0) { 
double otherVol = otherAmt * (double)inv.CurrentVolume / (amt + otherAmt); 
maxAmt = Math.Floor(amt * ((double)inv.MaxVolume - otherVol) / (double)inv.CurrentVolume - otherVol); 
 
amountStr = MM.FormatLargeNumber(amt) + " / " + (otherAmt &gt; 0 ? "~" : "") + MM.FormatLargeNumber(maxAmt); 
} 
 
blockName = MMStrFn.GetTrimmed(blockName, LCD_LINE_WORK_STATE_POS - 60); 
MMLCDMgr.Add(blockName); 
MMLCDMgr.AddRightLn(amountStr, LCD_LINE_WORK_STATE_POS); 
 
if (progressbars &amp;&amp; maxAmt &gt; 0) { 
double perc = 100 * amt / maxAmt; 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
} 
} 
} 
} 
 
public void RunEcho(MMCmd cmd) 
{ 
string type = (cmd.cmdstr == "center" ? "c" : (cmd.cmdstr == "right" ? "r" : "n")); 
int idx = cmd.cmdLine.IndexOf(' '); 
string msg = ""; 
if (idx &gt;= 0) 
msg = cmd.cmdLine.Substring(idx + 1); 
 
switch (type) { 
case "c": 
MMLCDMgr.AddCenterLn(msg, LCD_LINE_WIDTH / 2); 
break; 
case "r": 
MMLCDMgr.AddRightLn(msg, LCD_LINE_WIDTH); 
break; 
default: 
MMLCDMgr.AddLn(msg); 
break; 
} 
} 
 
public void RunDamage(MMCmd cmd) 
{ 
bool simple = cmd.cmdstr.StartsWith("damagex"); 
bool onlyDmg = cmd.cmdstr.EndsWith("noc"); // no construct   
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddBOfName(cmd.nameLike); 
bool found = false; 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyTerminalBlock block = blocks.Blocks[i]; 
IMySlimBlock slim = block.CubeGrid.GetCubeBlock(block.Position); 
float hull = (onlyDmg ? slim.MaxIntegrity : slim.BuildIntegrity) - slim.CurrentDamage; 
float perc = 100 * (hull / slim.MaxIntegrity); 
 
if (perc &gt;= 100) 
continue; 
 
found = true; 
 
MMLCDMgr.Add(MMStrFn.GetTrimmed(slim.FatBlock.DisplayNameText, 
LCD_LINE_DMG_NUMBERS_POS - 70) + " "); 
if (!simple) { 
MMLCDMgr.AddRight(MM.FormatLargeNumber(hull) + " / ", 
LCD_LINE_DMG_NUMBERS_POS); 
MMLCDMgr.Add(MM.FormatLargeNumber(slim.MaxIntegrity)); 
} 
MMLCDMgr.AddRightLn(' ' + perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
 
if (!found) 
MMLCDMgr.AddLn(M.T["D3"]); 
} 
 
public void RunTankStatus(MMCmd cmd) 
{ 
List&lt;MMArg&gt; args = cmd.args; 
string tankType; 
 
if (args.Count == 0) { 
MMLCDMgr.AddLn(M.T["T4"]); 
return; 
} 
 
tankType = args[0].arg.Trim().ToLower(); 
 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("oxytank", cmd.nameLike); 
 
double tankSum = 0; 
int cnt = blocks.Count(); 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if ((tankType == "oxygen" &amp;&amp; tank.BlockDefinition.SubtypeId == "") || 
tank.BlockDefinition.SubtypeId.ToLower().Contains(tankType)) // only selected tank type   
tankSum += tank.GetOxygenLevel() * 100; 
else 
cnt--; 
} 
 
if (cnt == 0) { 
MMLCDMgr.AddLn(String.Format(M.T["T5"], tankType)); 
return; 
} 
 
percent = tankSum / cnt; 
 
tankType = char.ToUpper(tankType[0]) + tankType.Substring(1); 
 
MMLCDMgr.Add(tankType + " " + M.T["T6"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunOxygenStatus(MMCmd cmd) 
{ 
double percent; 
MMBlkCol blocks = new MMBlkCol(); 
 
blocks.AddBofT("airvent", cmd.nameLike); 
bool found = (blocks.Count() &gt; 0); 
 
for (int i = 0; i &lt; blocks.Count(); i++) { 
IMyAirVent vent = blocks.Blocks[i] as IMyAirVent; 
percent = Math.Max(vent.GetOxygenLevel() * 100, 0f); 
 
MMLCDMgr.Add(vent.CustomName); 
 
if (vent.CanPressurize) 
MMLCDMgr.AddRightLn(percent.ToString("F1") + "%", LCD_LINE_WORK_STATE_POS); 
else 
MMLCDMgr.AddRightLn(M.T["O1"], LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxyfarm", cmd.nameLike); 
int cnt = blocks.Count(); 
if (cnt &gt; 0) { 
double farmSum = 0; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenFarm farm = blocks.Blocks[i] as IMyOxygenFarm; 
farmSum += farm.GetOutput() * 100; 
} 
 
percent = farmSum / cnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
 
found |= (cnt &gt; 0); 
 
MMLCDMgr.Add(M.T["O2"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
blocks.Clear(); 
blocks.AddBofT("oxytank", cmd.nameLike); 
cnt = blocks.Count(); 
 
if (cnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
double tankSum = 0; 
int tankCnt = cnt; 
for (int i = 0; i &lt; cnt; i++) { 
IMyOxygenTank tank = blocks.Blocks[i] as IMyOxygenTank; 
if (tank.BlockDefinition.SubtypeId == "" || 
tank.BlockDefinition.SubtypeId.Contains("Oxygen")) // only oxygen tanks   
tankSum += tank.GetOxygenLevel() * 100; 
else 
tankCnt--; 
} 
 
if (tankCnt == 0) { 
if (!found) 
MMLCDMgr.AddLn(M.T["O3"]); 
return; 
} 
 
percent = tankSum / tankCnt; 
 
if (found) 
MMLCDMgr.AddLn(""); 
MMLCDMgr.Add(M.T["O4"]); 
MMLCDMgr.AddRightLn(percent.ToString("F2") + "%", LCD_LINE_WORK_STATE_POS); 
MMLCDMgr.AddBarLn(percent, FULL_PROGRESS_CHARS); 
} 
 
public void RunMass(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
blocks.AddBOfName(cmd.nameLike); 
 
double used = blocks.GetMassSummary(); 
double total = 0; 
 
int argCnt = cmd.args.Count; 
if (argCnt &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0) 
double.TryParse(cmd.args[0].sub[0].Trim(), out total); 
if (argCnt &gt; 1) { 
cmd.args[1].Parse(); 
if (cmd.args[1].sub.Count &gt; 0) { 
string unit = cmd.args[1].sub[0].Trim().ToLower(); 
if (unit != "") 
total *= Math.Pow(1000.0, "kmgtpezy".IndexOf(unit[0])); 
} 
} 
total *= 1000.0; 
} 
 
MMLCDMgr.Add(M.T["M1"] + " "); 
if (total &lt;= 0) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used), LCD_LINE_WIDTH); 
return; 
} 
 
double perc = used / total * 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(used) + "g / " + MM.FormatLargeNumber(total) + "g", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
 
class PTD 
{ 
public TimeSpan t = new TimeSpan(-1); 
public double ct = -1; 
public double lastFuel = 0; 
} 
static Dictionary&lt;string, PTD&gt; savedPT = new Dictionary&lt;string, PTD&gt;(); 
 
private double GetPTElapsed(string nameLike) 
{ 
if (ptNLtoIdx.ContainsKey(nameLike)) 
return ptElapsedL[ptNLtoIdx[nameLike]]; 
ptElapsedL.Add(0); 
ptNLtoIdx.Add(nameLike, ptElapsedL.Count - 1); 
return 0; 
} 
private PTD GetSavedPT(string nameLike) 
{ 
if (!savedPT.ContainsKey(nameLike)) 
savedPT[nameLike] = new PTD(); 
return savedPT[nameLike]; 
} 
private TimeSpan GetPowerTime(string nameLike, out double chargeTime) 
{ 
double ptElapsed = GetPTElapsed(nameLike); 
PTD pt = GetSavedPT(nameLike); 
 
// at least few seconds to get somehow reliable values   
if (ptElapsed &lt;= 3) { 
chargeTime = pt.ct; 
return pt.t; 
} 
pt.ct = 0; 
 
MMBlkCol rbs = new MMBlkCol(); 
rbs.AddBofT("reactor", nameLike); 
 
double fuel = 0; 
double rcur = 0, rmax = 0; 
for (int bi = 0; bi &lt; rbs.Blocks.Count; bi++) { 
IMyReactor block = rbs.Blocks[bi] as IMyReactor; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 2) 
continue; 
rmax += vals[0] / 1000000; 
rcur += vals[1] / 1000000; 
IMyInventory inv = block.GetInventory(0); 
fuel += (double)inv.CurrentMass; 
} 
 
MMBlkCol bbs = new MMBlkCol(); 
bbs.AddBofT("battery", nameLike); 
double stored = 0; 
double bcur = 0, bmax = 0; 
for (int bi = 0; bi &lt; bbs.Blocks.Count; bi++) { 
IMyBatteryBlock block = bbs.Blocks[bi] as IMyBatteryBlock; 
if (block == null || !block.IsWorking) 
continue; 
List&lt;double&gt; vals = MMStatus.GetDetailVals(block); 
if (vals.Count &lt; 6) 
continue; 
double output = (vals[4] - vals[3]) / 1000000; 
double cTime = (output &lt; 0 ? (block.MaxStoredPower - block.CurrentStoredPower) / (-output / 3600) : 0); 
if (cTime &gt; pt.ct) pt.ct = cTime; 
if (block.GetValueBool("Recharge")) 
continue; 
bcur += output; 
bmax += vals[0] / 1000000; 
stored += block.CurrentStoredPower; 
} 
 
double usedPower = rcur + bcur; 
if (usedPower &lt;= 0) 
pt.t = TimeSpan.FromSeconds(-1); 
else { 
double tPT = pt.t.TotalSeconds; 
double sPT; 
double deltaF = (pt.lastFuel - fuel) / ptElapsed; 
if (rcur &lt;= 0) /* 1000MW per ingot .. better than nothing */ 
deltaF = Math.Min(usedPower, rmax) / 3600000; 
 
double deltaS = 0; 
if (bmax &gt; 0) 
deltaS = Math.Min(usedPower, bmax) / 3600; 
 
if (deltaF &lt;= 0 &amp;&amp; deltaS &lt;= 0) 
sPT = -1; 
else 
if (deltaF &lt;= 0) 
sPT = stored / deltaS; 
else 
if (deltaS &lt;= 0) 
sPT = fuel / deltaF; 
else { 
double adS = deltaS; 
double adF = (rcur &lt;= 0 ? usedPower / 3600 : deltaF * usedPower / rcur); 
sPT = stored / adS + fuel / adF; 
} 
if (tPT &lt;= 0 || sPT &lt; 0) 
tPT = sPT; 
else 
tPT = (tPT + sPT) / 2; 
pt.t = TimeSpan.FromSeconds(tPT); 
} 
ptElapsedL[ptNLtoIdx[nameLike]] = 0; 
pt.lastFuel = fuel; 
chargeTime = pt.ct; 
return pt.t; 
} 
private string GetRemTStr(TimeSpan remT) 
{ 
string text = ""; 
 
if (remT.Ticks &lt;= 0) 
return "-"; 
if ((int)remT.TotalDays &gt; 0) 
text += (long)remT.TotalDays + " " + M.T["C5"] + " "; 
if (remT.Hours &gt; 0 || text != "") 
text += remT.Hours + "h "; 
if (remT.Minutes &gt; 0 || text != "") 
text += remT.Minutes + "m "; 
return text + remT.Seconds + "s"; 
} 
public void RunPowerTime(MMCmd cmd) 
{ 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
int h = 0, m = 0, s = 0; 
int c = 0; 
if (cmd.args.Count &gt; 0) { 
for (int ai = 0; ai &lt; cmd.args.Count; ai++) { 
cmd.args[ai].Parse(); 
if (cmd.args[ai].sub.Count &lt;= 0) 
continue; 
string arg = cmd.args[ai].sub[0]; 
int.TryParse(arg, out c); 
if (ai == 0) 
h = c; 
else if (ai == 1) 
m = c; 
else if (ai == 2) 
s = c; 
} 
} 
 
double ct = 0, t = 0; 
TimeSpan remT = GetPowerTime(cmd.nameLike, out ct); 
TimeSpan totalT = new TimeSpan(h, m, s); 
 
string text; 
if (remT.TotalSeconds &gt; 0 || ct &lt;= 0) { 
MMLCDMgr.Add(M.T["PT1"] + " "); 
text = GetRemTStr(remT); 
t = remT.TotalSeconds; 
} 
else { 
MMLCDMgr.Add(M.T["PT2"] + " "); 
text = GetRemTStr(TimeSpan.FromSeconds(ct)); 
if (totalT.TotalSeconds &gt;= ct) 
t = totalT.TotalSeconds - ct; 
else 
t = 0; 
} 
 
if (totalT.Ticks &lt;= 0) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
return; 
} 
 
double perc = t / totalT.TotalSeconds * 100; 
if (perc &gt; 100) perc = 100; 
 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(perc, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + perc.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(perc, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(perc.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
public void RunCargoStatus(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool alltypes = cmd.cmdstr.Contains("all"); 
bool simple = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x'); 
bool progress = (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'p'); 
 
if (alltypes) 
blocks.AddBOfName(cmd.nameLike); 
else 
blocks.AddBofT("cargocontainer", cmd.nameLike); 
 
double usedCargo = 0; 
double totalCargo = 0; 
double percentCargo = blocks.GetCargoSummary( 
ref usedCargo, ref totalCargo); 
 
MMLCDMgr.Add(M.T["C2"] + " "); 
if (!simple &amp;&amp; !progress) { 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedCargo) + "L / " + MM.FormatLargeNumber(totalCargo) + "L", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentCargo, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddLn(' ' + percentCargo.ToString("0.0") + "%"); 
} 
else if (progress) { 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentCargo, FULL_PROGRESS_CHARS); 
} 
else 
MMLCDMgr.AddRightLn(percentCargo.ToString("0.0") + "%", LCD_LINE_WIDTH); 
} 
 
// type: simple, progress, normal   
public void ShowPowerOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
double percentPower = generators.GetPowerOutput(ref usedPower, ref totalPower); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowSolarOutput(MMBlkCol generators, string title, string type = "n") 
{ 
double usedPower = 0, totalPower = 0; 
generators.GetPowerOutput(ref usedPower, ref totalPower); 
double percentPower = (totalPower &gt; 0 ? (usedPower / totalPower) * 100 : 100); 
 
MMLCDMgr.Add(title + ": "); 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentPower, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(usedPower) + "W / " + MM.FormatLargeNumber(totalPower) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentPower, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentPower.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void ShowBatteriesInfo(MMBlkCol batteries, string title, string what = "a", string type = "n") 
{ 
double output = 0, maxOutput = 0, input = 0, maxInput = 0; 
double stored = 0, maxStored = 0; 
double percentStored = 
batteries.GetBatStats( 
ref output, ref maxOutput, 
ref input, ref maxInput, 
ref stored, ref maxStored); 
double percentOutput = (maxOutput &gt; 0 ? (output / maxOutput) * 100 : 100); 
double percentInput = (maxInput &gt; 0 ? (input / maxInput) * 100 : 100); 
bool showall = what == "a"; 
 
if (showall) { 
if (type != "p") { 
MMLCDMgr.Add(title + ": "); 
MMLCDMgr.AddRightLn("(IN " + MM.FormatLargeNumber(input) + "W / OUT " + MM.FormatLargeNumber(output) + "W)", LCD_LINE_WIDTH); 
} 
else 
MMLCDMgr.AddLn(title + ": "); 
 
MMLCDMgr.Add("  " + M.T["P3"] + ": "); 
} 
else 
MMLCDMgr.Add(title + ": "); 
 
if (showall || what == "s") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentStored, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(stored) + "Wh / " + MM.FormatLargeNumber(maxStored) + "Wh", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentStored, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentStored.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "s") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P4"] + ": "); 
 
if (showall || what == "o") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentOutput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(output) + "W / " + MM.FormatLargeNumber(maxOutput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentOutput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentOutput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
 
if (what == "o") 
return; 
 
if (showall) 
MMLCDMgr.Add("  " + M.T["P5"] + ": "); 
 
if (showall || what == "i") 
switch (type) { 
case "s": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
case "v": 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
break; 
case "p": 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(percentInput, FULL_PROGRESS_CHARS); 
break; 
default: 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(input) + "W / " + MM.FormatLargeNumber(maxInput) + "W", LCD_LINE_WIDTH); 
MMLCDMgr.AddBar(percentInput, FULL_PROGRESS_CHARS, PERCENT_TEXT_SIZE); 
MMLCDMgr.AddRightLn(' ' + percentInput.ToString("0.0") + "%", LCD_LINE_WIDTH); 
break; 
} 
} 
 
public void RunPowerStatus(MMCmd cmd) 
{ 
MMBlkCol reactors = new MMBlkCol(); 
MMBlkCol solars = new MMBlkCol(); 
MMBlkCol batteries = new MMBlkCol(); 
int got; 
string displayType = (cmd.cmdstr.EndsWith("x") ? "s" : (cmd.cmdstr.EndsWith("p") ? "p" : (cmd.cmdstr.EndsWith("v") ? "v" : "n"))); 
bool issummary = (cmd.cmdstr.StartsWith("powersummary")); 
string what = "a"; 
string titleOvrd = ""; 
 
if (cmd.cmdstr.Contains("stored")) 
what = "s"; 
else if (cmd.cmdstr.Contains("in")) 
what = "i"; 
else if (cmd.cmdstr.Contains("out")) 
what = "o"; 
 
if (what == "a") { 
reactors.AddBofT("reactor", cmd.nameLike); 
solars.AddBofT("solarpanel", cmd.nameLike); 
} 
batteries.AddBofT("battery", cmd.nameLike); 
 
got = 0; 
int reactCnt = reactors.Count(); 
int solarCnt = solars.Count(); 
int batteCnt = batteries.Count(); 
 
if (reactCnt &gt; 0) got++; 
if (solarCnt &gt; 0) got++; 
if (batteCnt &gt; 0) got++; 
 
if (got &lt; 1) { 
MMLCDMgr.AddLn(M.T["P6"]); 
return; 
} 
 
if (cmd.args.Count &gt; 0) { 
cmd.args[0].Parse(); 
if (cmd.args[0].sub.Count &gt; 0 &amp;&amp; cmd.args[0].sub[0].Length &gt; 0) 
titleOvrd = cmd.args[0].sub[0]; 
} 
 
if (what != "a") { 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
return; 
} 
 
string title = M.T["P8"]; 
 
if (!issummary) { 
if (reactCnt &gt; 0) 
ShowPowerOutput(reactors, (titleOvrd == "" ? M.T["P9"] : titleOvrd), displayType); 
if (solarCnt &gt; 0) 
ShowSolarOutput(solars, (titleOvrd == "" ? M.T["P10"] : titleOvrd), displayType); 
if (batteCnt &gt; 0) 
ShowBatteriesInfo(batteries, (titleOvrd == "" ? M.T["P7"] : titleOvrd), what, displayType); 
} 
else { 
title = M.T["P11"]; 
got = 10; // hack ;)   
} 
 
if (got == 1) 
return; 
 
MMBlkCol blocks = new MMBlkCol(); 
blocks.AddFromBC(reactors); 
blocks.AddFromBC(solars); 
blocks.AddFromBC(batteries); 
ShowPowerOutput(blocks, title, displayType); 
} 
 
public void RunCountdown(MMCmd cmd) 
{ 
bool center = cmd.cmdstr.EndsWith("c"); 
bool right = cmd.cmdstr.EndsWith("r"); 
 
string input = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
input = cmd.cmdLine.Substring(firstSpace + 1).Trim(); 
 
DateTime now = DateTime.Now; 
DateTime inputt; 
// 19:02 3.9.2015   
if (!DateTime.TryParseExact(input, "H:mm d.M.yyyy", System.Globalization.CultureInfo.InvariantCulture, 
System.Globalization.DateTimeStyles.None, out inputt)) { 
MMLCDMgr.AddLn(M.T["C3"]); 
MMLCDMgr.AddLn("  Countdown 19:02 28.2.2015"); 
return; 
} 
 
TimeSpan dt = inputt - now; 
string text = ""; 
 
if (dt.Ticks &lt;= 0) 
text = M.T["C4"]; 
else { 
if ((int)dt.TotalDays &gt; 0) 
text += (int)dt.TotalDays + " " + M.T["C5"] + " "; 
if (dt.Hours &gt; 0 || text != "") 
text += dt.Hours + "h "; 
if (dt.Minutes &gt; 0 || text != "") 
text += dt.Minutes + "m "; 
text += dt.Seconds + "s"; 
} 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else if (right) 
MMLCDMgr.AddRightLn(text, LCD_LINE_WIDTH); 
else 
MMLCDMgr.AddLn(text); 
} 
 
public void RunCurrentTime(MMCmd cmd) 
{ 
bool datetime = (cmd.cmdstr.StartsWith("datetime")); 
bool date = (cmd.cmdstr.StartsWith("date")); 
bool center = cmd.cmdstr.Contains("c"); 
int offsetIdx = cmd.cmdstr.IndexOf('+'); 
if (offsetIdx &lt; 0) 
offsetIdx = cmd.cmdstr.IndexOf('-'); 
float offset = 0; 
 
if (offsetIdx &gt;= 0) 
float.TryParse(cmd.cmdstr.Substring(offsetIdx), out offset); 
 
DateTime dt = DateTime.Now.AddHours(offset); 
 
string text = ""; 
int firstSpace = cmd.cmdLine.IndexOf(' '); 
if (firstSpace &gt;= 0) 
text = cmd.cmdLine.Substring(firstSpace + 1); 
if (!datetime) { 
if (!date) 
text += dt.ToShortTimeString(); 
else 
text += dt.ToShortDateString(); 
} 
else { 
if (text == "") 
text = String.Format("{0:d} {0:t}", dt); 
else { 
// try to prevent exceptions   
text = text.Replace("/", "\\/"); 
text = text.Replace(":", "\\:"); 
text = text.Replace("\"", "\\\""); 
text = text.Replace("'", "\\'"); 
text = dt.ToString(text + ' '); 
text = text.Substring(0, text.Length - 1); 
} 
} 
 
if (center) 
MMLCDMgr.AddCenterLn(text, LCD_LINE_WIDTH / 2); 
else 
MMLCDMgr.AddLn(text); 
} 
 
private void ShowInvLine(string msg, double num, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.AddBar(Math.Min(100, 100 * num / quota), INV_PROGRESS_CHARS); 
MMLCDMgr.Add(' ' + msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INV_NUMBERS_POS); 
MMLCDMgr.AddLn(" / " + MM.FormatLargeNumber(quota)); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRightLn(MM.FormatLargeNumber(num), LCD_LINE_NUMERS_POS); 
} 
} 
 
private void ShowInvIngotLine(string msg, double num, double numOres, int quota) 
{ 
if (quota &gt; 0) { 
MMLCDMgr.Add(msg + ' '); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.Add(" / " + MM.FormatLargeNumber(quota)); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
MMLCDMgr.AddBarLn(Math.Min(100, 100 * num / quota), FULL_PROGRESS_CHARS); 
} 
else { 
MMLCDMgr.Add(msg + ':'); 
MMLCDMgr.AddRight(MM.FormatLargeNumber(num), LCD_LINE_INGOT_NUMBERS_POS); 
MMLCDMgr.AddRightLn("+" + MM.FormatLargeNumber(numOres) + " " + M.T["I1"], LCD_LINE_WIDTH); 
} 
} 
 
public void PrintItems(MMItemAmounts amounts, bool missing, bool simple, string mainType, string displayType) 
{ 
List&lt;MMAmountSpec&gt; items = amounts.GetAmountsOfMain(mainType); 
if (items.Count &gt; 0) { 
if (!simple) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + displayType + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; items.Count; i++) { 
double num = items[i].current; 
 
if (missing &amp;&amp; num &gt;= items[i].min) 
continue; 
 
int quota = items[i].max; 
if (missing) 
quota = items[i].min; 
 
string msg = MM.ToDisplay(items[i].subType, items[i].mainType); 
 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
public void RunInvListing(MMCmd cmd) 
{ 
MMBlkCol blocks = new MMBlkCol(); 
bool noexpand = false; 
bool simple = false; 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 's') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
simple = true; 
} 
if (cmd.cmdstr[cmd.cmdstr.Length - 1] == 'x') { 
cmd.cmdstr = cmd.cmdstr.Substring(0, cmd.cmdstr.Length - 1); 
noexpand = true; 
} 
 
bool missing = (cmd.cmdstr == "missing"); 
bool nocats = (cmd.cmdstr == "invlist"); 
 
blocks.AddBOfName(cmd.nameLike); 
 
MMItemAmounts amounts = new MMItemAmounts(); 
List&lt;MMArg&gt; args = cmd.args; 
if (args.Count == 0) 
args.Add(new MMArg("all")); 
 
for (int i = 0; i &lt; args.Count; i++) { 
MMArg arg = args[i]; 
arg.Parse(); 
string mainType = arg.main.ToLower(); 
 
for (int subi = 0; subi &lt; arg.sub.Count; subi++) { 
string[] subs = arg.sub[subi].ToLower().Split(':'); 
double number; 
 
if (subs[0] == "all") 
subs[0] = ""; 
 
int min = 1; 
int max = -1; 
if (subs.Length &gt; 1) { 
if (Double.TryParse(subs[1], out number)) { 
if (missing) 
min = (int)Math.Ceiling(number); 
else 
max = (int)Math.Ceiling(number); 
} 
} 
 
string subfulltype = subs[0]; 
if (mainType != "") 
subfulltype += ' ' + mainType; 
amounts.AddSpec(subfulltype, (arg.op == "-"), min, max); 
} 
} 
 
if (!noexpand) { 
amounts.ExpandSpecs(); 
} 
amounts.ProcessItemsFromBC(blocks); 
 
PrintItems(amounts, missing, nocats, "Ore", M.T["I3"]); 
 
if (simple) 
PrintItems(amounts, missing, nocats, "Ingot", M.T["I4"]); 
else { 
List&lt;MMAmountSpec&gt; ingots = amounts.GetAmountsOfMain("Ingot"); 
if (ingots.Count &gt; 0) { 
if (!nocats) { 
if (MMLCDMgr.curLcd.curLine &gt; 0 &amp;&amp; MMLCDMgr.curLcd.lines[0] != "") 
MMLCDMgr.AddLn("");  // add empty line   
MMLCDMgr.AddCenterLn("&lt;&lt; " + M.T["I4"] + " " + M.T["I2"] + " &gt;&gt;", LCD_LINE_WIDTH / 2); 
} 
 
for (int i = 0; i &lt; ingots.Count; i++) { 
double num = ingots[i].current; 
 
if (missing &amp;&amp; num &gt;= ingots[i].min) 
continue; 
 
int quota = ingots[i].max; 
if (missing) 
quota = ingots[i].min; 
 
string msg = MM.ToDisplay(ingots[i].subType, ingots[i].mainType); 
if (ingots[i].subType != "Scrap") { 
double numOres = amounts.GetAmountSpec(ingots[i].subType + " Ore", ingots[i].subType, "Ore").current; 
ShowInvIngotLine(msg, num, numOres, quota); 
} 
else 
ShowInvLine(msg, num, quota); 
} 
} 
} 
 
PrintItems(amounts, missing, nocats, "Component", M.T["I5"]); 
PrintItems(amounts, missing, nocats, "OxygenContainerObject", M.T["I6"]); 
PrintItems(amounts, missing, true, "GasContainerObject", ""); 
PrintItems(amounts, missing, nocats, "AmmoMagazine", M.T["I7"]); 
PrintItems(amounts, missing, nocats, "PhysicalGunObject", M.T["I8"]); 
} 
} 
 
public class MMCmd 
{ 
public string cmdstr = ""; 
public string nameLike = ""; 
public string cmdLine; 
public string cmdLineAfterName = ""; 
 
public List&lt;MMArg&gt; args = new List&lt;MMArg&gt;(); 
 
public MMCmd(string _cmdLine) 
{ 
cmdLine = _cmdLine.TrimStart(' '); 
if (cmdLine == "") 
return; 
 
string[] targs = cmdLine.Split(' '); 
string fullArg = ""; 
bool multiWord = false; 
 
cmdstr = targs[0].ToLower(); 
 
for (int i = 1; i &lt; targs.Length; i++) { 
string arg = targs[i]; 
if (arg == "") 
continue; 
 
if (arg[0] == '{' &amp;&amp; arg[arg.Length - 1] == '}') { 
arg = arg.Substring(1, arg.Length - 2); 
if (arg == "") 
continue; 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
continue; 
} 
if (arg[0] == '{') { 
multiWord = true; 
fullArg = arg.Substring(1); 
continue; 
} 
if (arg[arg.Length - 1] == '}') { 
multiWord = false; 
fullArg += ' ' + arg.Substring(0, arg.Length - 1); 
if (nameLike == "") 
nameLike = fullArg; 
else 
args.Add(new MMArg(fullArg)); 
continue; 
} 
 
if (multiWord) { 
if (fullArg.Length != 0) 
fullArg += ' '; 
fullArg += arg; 
continue; 
} 
 
if (nameLike == "") 
nameLike = arg; 
else 
args.Add(new MMArg(arg)); 
} 
} 
} 
 
public class MMArg 
{ 
public string op = ""; 
public string main = ""; 
public string arg = ""; 
public List&lt;string&gt; sub = new List&lt;string&gt;(); 
 
public MMArg(string _arg) 
{ 
arg = _arg; 
} 
 
public void Parse() 
{ 
string cur = arg.Trim(); 
if (cur[0] == '+' || cur[0] == '-') { 
op += cur[0]; 
cur = arg.Substring(1); 
} 
 
string[] parts = cur.Split('/'); 
string subargs = parts[0]; 
 
if (parts.Length &gt; 1) { 
main = parts[0]; 
subargs = parts[1]; 
} 
else 
main = ""; 
 
if (subargs.Length &gt; 0) { 
string[] subs = subargs.Split(','); 
for (int i = 0; i &lt; subs.Length; i++) 
if (subs[i] != "") 
sub.Add(subs[i]); 
} 
} 
} 
 
public class MMBlkCol 
{ 
public List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
public double GetCargoSummary(ref double usedAmount, ref double totalAmount) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyInventory inv = Blocks[i].GetInventory(0); 
if (inv == null) 
continue; 
 
usedAmount += (double)inv.CurrentVolume; 
totalAmount += (double)inv.MaxVolume; 
} 
usedAmount *= 1000; 
totalAmount *= 1000; 
return MM.GetPercent(usedAmount, totalAmount); 
} 
 
public double GetMassSummary() 
{ 
double used = 0; 
for (int i = 0; i &lt; Blocks.Count; i++) { 
for (int invId = 0; invId &lt; 2; invId++) { 
IMyInventory inv = Blocks[i].GetInventory(invId); 
if (inv == null) 
continue; 
 
used += (double)inv.CurrentMass; 
} 
} 
return used * 1000; 
} 
 
public double GetPowerOutput(ref double current, ref double max) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
IMyBatteryBlock bat = (Blocks[i] as IMyBatteryBlock); 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if ((bat != null &amp;&amp; vals.Count &lt; 6) || 
(bat == null &amp;&amp; vals.Count &lt; 2)) 
continue; 
 
max += vals[0]; 
 
if (bat != null) 
current += vals[4]; 
else 
current += vals[1]; 
} 
return MM.GetPercent(current, max); 
} 
 
 
// returns percent stored   
public double GetBatStats(ref double output, ref double max_output, 
ref double input, ref double max_input, 
ref double stored, ref double max_stored) 
{ 
for (int i = 0; i &lt; Blocks.Count; i++) { 
List&lt;double&gt; vals = MMStatus.GetDetailVals(Blocks[i]); 
if (vals.Count &lt; 6) 
continue; 
 
max_output += vals[0]; 
max_input += vals[1]; 
max_stored += vals[2]; 
input += vals[3]; 
output += vals[4]; 
stored += vals[5]; 
} 
return MM.GetPercent(stored, max_stored); 
} 
 
private void RemoveDiffGrid() 
{ 
int i = 0; 
while (i &lt; Blocks.Count) { 
if (Blocks[i].CubeGrid != MM.Me.CubeGrid) { 
Blocks.RemoveAt(i); 
continue; 
} 
i++; 
} 
} 
 
public void AddBOfName(string nameLike) 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
if (nameLike == "" || nameLike == "*") { 
List&lt;IMyTerminalBlock&gt; lBlocks = new List&lt;IMyTerminalBlock&gt;(); 
MM._GridTerminalSystem.GetBlocks(lBlocks); 
Blocks.AddList(lBlocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
Blocks.AddList(g.Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
} 
return; 
} 
MM._GridTerminalSystem.SearchBlocksOfName(nameLike, Blocks); 
if (thisgrid) 
RemoveDiffGrid(); 
} 
 
public void AddBofT(string type, string nameLike = "") 
{ 
int sep = nameLike.IndexOf(':'); 
string modstr = (sep &gt;= 1 &amp;&amp; sep &lt;= 2 ? nameLike.Substring(0, sep) : ""); 
bool thisgrid = modstr.Contains("T"); 
if (modstr != "") 
nameLike = nameLike.Substring(sep + 1); 
 
List&lt;IMyTerminalBlock&gt; blocksOfType = new List&lt;IMyTerminalBlock&gt;(); 
if (nameLike == "" || nameLike == "*") { 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
Blocks.AddList(blocksOfType); 
if (thisgrid) 
RemoveDiffGrid(); 
return; 
} 
string group = (modstr.Contains("G") ? nameLike.Trim().ToLower() : ""); 
if (group != "") { 
List&lt;IMyBlockGroup&gt; BlockGroups = new List&lt;IMyBlockGroup&gt;(); 
MM._GridTerminalSystem.GetBlockGroups(BlockGroups); 
for (int i = 0; i &lt; BlockGroups.Count; i++) { 
IMyBlockGroup g = BlockGroups[i]; 
if (g.Name.ToLower() == group) { 
for (int j = 0; j &lt; g.Blocks.Count; j++) { 
if (thisgrid &amp;&amp; g.Blocks[j].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (MMBlkMgr.IsBlockOfType(g.Blocks[j], type)) 
Blocks.Add(g.Blocks[j]); 
} 
return; 
} 
} 
return; 
} 
MMBlkMgr.GetBlocksOfType(ref blocksOfType, type); 
for (int i = 0; i &lt; blocksOfType.Count; i++) { 
if (thisgrid &amp;&amp; blocksOfType[i].CubeGrid != MM.Me.CubeGrid) 
continue; 
if (blocksOfType[i].CustomName.Contains(nameLike)) 
Blocks.Add(blocksOfType[i]); 
} 
} 
 
// add all Blocks from collection col to this collection     
public void AddFromBC(MMBlkCol col) 
{ 
Blocks.AddList(col.Blocks); 
} 
 
// clear all reactors from this collection     
public void Clear() 
{ 
Blocks.Clear(); 
} 
 
// number of reactors in collection     
public int Count() 
{ 
return Blocks.Count; 
} 
} 
 
public class MMAmountSpec 
{ 
public int min; 
public int max; 
public string subType = ""; 
public string mainType = ""; 
public bool ignore; 
public double current; 
 
public MMAmountSpec(bool _ignore = false, int _min = 1, int _max = -1) 
{ 
min = _min; 
ignore = _ignore; 
max = _max; 
} 
} 
 
// Item amounts class   
public class MMItemAmounts 
{ 
private static Dictionary&lt;string, string&gt; mainTypeMap = new Dictionary&lt;string, string&gt;() {  
{ "ingot", "ingot" },  
{ "ore", "ore" },  
{ "component", "component" },  
{ "tool", "physicalgunobject" },  
{ "ammo", "ammomagazine"},  
{ "oxygen", "oxygencontainerobject" },  
{ "gas", "gascontainerobject" }  
}; 
 
public MMAmountSpecDict specBySubLower; 
public MMAmountSpecDict specByMainLower; 
public MMAmountSpecDict specByFullLower; 
public bool specAll; 
 
public MMAmountSpecDict amountByFullType; 
 
public MMItemAmounts(int size = 20) 
{ 
specBySubLower = new MMAmountSpecDict(); 
specByMainLower = new MMAmountSpecDict(); 
specByFullLower = new MMAmountSpecDict(); 
specAll = false; 
amountByFullType = new MMAmountSpecDict(); 
} 
 
public void AddSpec(string subfulltype, bool ignore = false, int min = 1, int max = -1) 
{ 
if (subfulltype == "") { 
specAll = true; 
return; 
} 
 
string[] parts = subfulltype.Split(' '); 
 
string mainType = ""; 
MMAmountSpec spec = new MMAmountSpec(ignore, min, max); 
 
if (parts.Length == 2) { 
if (!mainTypeMap.TryGetValue(parts[1], out mainType)) 
mainType = parts[1]; 
} 
 
string subType = parts[0]; 
 
if (mainTypeMap.TryGetValue(subType, out spec.mainType)) { 
specByMainLower.AddItem(spec.mainType, spec); 
return; 
} 
 
MM.ToInternal(ref subType, ref mainType); 
if (mainType == "") { 
spec.subType = subType.ToLower(); 
specBySubLower.AddItem(spec.subType, spec); 
return; 
} 
 
spec.subType = subType; 
spec.mainType = mainType; 
specByFullLower.AddItem(subType.ToLower() + ' ' + mainType.ToLower(), spec); 
} 
 
public MMAmountSpec GetSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
 
fullType = fullType.ToLower(); 
spec = specByFullLower.GetItem(fullType); 
if (spec != null) 
return spec; 
 
subType = subType.ToLower(); 
spec = specBySubLower.GetItem(subType); 
if (spec != null) 
return spec; 
 
mainType = mainType.ToLower(); 
spec = specByMainLower.GetItem(mainType); 
if (spec != null) 
return spec; 
 
return null; 
} 
 
public bool IsIgnored(string fullType, string subType, string mainType) 
{ 
MMAmountSpec spec; 
bool found = false; 
 
spec = specByMainLower.GetItem(mainType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specBySubLower.GetItem(subType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
spec = specByFullLower.GetItem(fullType.ToLower()); 
if (spec != null) { 
if (spec.ignore) 
return true; 
found = true; 
} 
 
return !(specAll || found); 
} 
 
public MMAmountSpec CreateAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = new MMAmountSpec(); 
 
fullType = fullType.ToLower(); 
MMAmountSpec spec = GetSpec(fullType, subType.ToLower(), mainType.ToLower()); 
if (spec != null) { 
amount.min = spec.min; 
amount.max = spec.max; 
} 
amount.subType = subType; 
amount.mainType = mainType; 
 
amountByFullType.AddItem(fullType, amount); 
 
return amount; 
} 
 
public MMAmountSpec GetAmountSpec(string fullType, string subType, string mainType) 
{ 
MMAmountSpec amount = amountByFullType.GetItem(fullType.ToLower()); 
if (amount == null) 
amount = CreateAmountSpec(fullType, subType, mainType); 
return amount; 
} 
 
public List&lt;MMAmountSpec&gt; GetAmountsOfMain(string mainType) 
{ 
List&lt;MMAmountSpec&gt; result = new List&lt;MMAmountSpec&gt;(); 
 
for (int i = 0; i &lt; amountByFullType.CountAll(); i++) { 
MMAmountSpec spec = amountByFullType.GetItemAt(i); 
if (IsIgnored((spec.subType + ' ' + spec.mainType).ToLower(), 
spec.subType, spec.mainType)) 
continue; 
if (spec.mainType == mainType) 
result.Add(spec); 
} 
 
return result; 
} 
 
public void ExpandSpecs() 
{ 
for (int i = 0; i &lt; MMItems.keys.Count; i++) { 
MMItem item = MMItems.items[MMItems.keys[i]]; 
if (!item.used) 
continue; 
string fullType = item.subType + ' ' + item.mainType; 
 
if (IsIgnored(fullType, item.subType, item.mainType)) 
continue; 
 
MMAmountSpec amount = GetAmountSpec(fullType, item.subType, item.mainType); 
if (amount.max == -1) 
amount.max = item.defQt; 
} 
} 
 
public void ProcessItemsFromBC(MMBlkCol col) 
{ 
for (int i = 0; i &lt; col.Count(); i++) { 
for (int invId = 0; invId &lt; col.Blocks[i].GetInventoryCount(); invId++) { 
IMyInventory inv = col.Blocks[i].GetInventory(invId); 
 
List&lt;IMyInventoryItem&gt; items = inv.GetItems(); 
for (int j = 0; j &lt; items.Count; j++) { 
IMyInventoryItem item = items[j]; 
string fullType = MM.GetItemFullType(item); 
string fullTypeL = fullType.ToLower(); 
string subType, mainType; 
MM.ParseFullType(fullTypeL, out subType, out mainType); 
 
if (mainType == "ore") { 
if (IsIgnored(subType.ToLower() + " ingot", subType, "Ingot") &amp;&amp; 
IsIgnored(fullType, subType, mainType)) 
continue; 
} 
else { 
if (IsIgnored(fullType, subType, mainType)) 
continue; 
} 
 
MM.ParseFullType(fullType, out subType, out mainType); 
MMAmountSpec amount = GetAmountSpec(fullTypeL, subType, mainType); 
amount.current += (double)item.Amount; 
} 
} 
} 
} 
} 
 
// MMAPI Helper functions    
public static class MMBlkMgr 
{ 
public static IMyGridTerminalSystem _GridTerminalSystem; 
 
private static Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt; BofT = null; 
 
public static void InitBlocksOfExactType() 
{ 
if (BofT != null &amp;&amp; _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; == BofT["CargoContainer"]) 
return; 
 
BofT = new Dictionary&lt;string, Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt;&gt;() {  
{ "CargoContainer", _GridTerminalSystem.GetBlocksOfType&lt;IMyCargoContainer&gt; },  
{ "TextPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyTextPanel&gt; },  
{ "Assembler", _GridTerminalSystem.GetBlocksOfType&lt;IMyAssembler&gt; },  
{ "Refinery", _GridTerminalSystem.GetBlocksOfType&lt;IMyRefinery&gt; },  
{ "Reactor", _GridTerminalSystem.GetBlocksOfType&lt;IMyReactor&gt; },  
{ "SolarPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMySolarPanel&gt; },  
{ "BatteryBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyBatteryBlock&gt; },  
{ "Beacon", _GridTerminalSystem.GetBlocksOfType&lt;IMyBeacon&gt; },  
{ "RadioAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyRadioAntenna&gt; },  
{ "AirVent", _GridTerminalSystem.GetBlocksOfType&lt;IMyAirVent&gt; },  
{ "ConveyorSorter", _GridTerminalSystem.GetBlocksOfType&lt;IMyConveyorSorter&gt; },  
{ "OxygenTank", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenTank&gt; },  
{ "OxygenGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenGenerator&gt; },  
{ "OxygenFarm", _GridTerminalSystem.GetBlocksOfType&lt;IMyOxygenFarm&gt; },  
{ "LaserAntenna", _GridTerminalSystem.GetBlocksOfType&lt;IMyLaserAntenna&gt; },  
{ "Thrust", _GridTerminalSystem.GetBlocksOfType&lt;IMyThrust&gt; },  
{ "Gyro", _GridTerminalSystem.GetBlocksOfType&lt;IMyGyro&gt; },  
{ "SensorBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySensorBlock&gt; },  
{ "ShipConnector", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipConnector&gt; },  
{ "ReflectorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyReflectorLight&gt; },  
{ "InteriorLight", _GridTerminalSystem.GetBlocksOfType&lt;IMyInteriorLight&gt; },  
{ "LandingGear", _GridTerminalSystem.GetBlocksOfType&lt;IMyLandingGear&gt; },  
{ "ProgrammableBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyProgrammableBlock&gt; },  
{ "TimerBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyTimerBlock&gt; },  
{ "MotorStator", _GridTerminalSystem.GetBlocksOfType&lt;IMyMotorStator&gt; },  
{ "PistonBase", _GridTerminalSystem.GetBlocksOfType&lt;IMyPistonBase&gt; },  
{ "Projector", _GridTerminalSystem.GetBlocksOfType&lt;IMyProjector&gt; },  
{ "ShipMergeBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipMergeBlock&gt; },  
{ "SoundBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMySoundBlock&gt; },  
{ "Collector", _GridTerminalSystem.GetBlocksOfType&lt;IMyCollector&gt; },  
{ "JumpDrive", _GridTerminalSystem.GetBlocksOfType&lt;IMyJumpDrive&gt; },  
{ "Door", _GridTerminalSystem.GetBlocksOfType&lt;IMyDoor&gt; },  
{ "GravityGeneratorSphere", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGeneratorSphere&gt; },  
{ "GravityGenerator", _GridTerminalSystem.GetBlocksOfType&lt;IMyGravityGenerator&gt; },  
{ "ShipDrill", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipDrill&gt; },  
{ "ShipGrinder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipGrinder&gt; },  
{ "ShipWelder", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipWelder&gt; },  
{ "LargeGatlingTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeGatlingTurret&gt; },  
{ "LargeInteriorTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeInteriorTurret&gt; },  
{ "LargeMissileTurret", _GridTerminalSystem.GetBlocksOfType&lt;IMyLargeMissileTurret&gt; },  
{ "SmallGatlingGun", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallGatlingGun&gt; },  
{ "SmallMissileLauncherReload", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncherReload&gt; },  
{ "SmallMissileLauncher", _GridTerminalSystem.GetBlocksOfType&lt;IMySmallMissileLauncher&gt; },  
{ "VirtualMass", _GridTerminalSystem.GetBlocksOfType&lt;IMyVirtualMass&gt; },  
{ "Warhead", _GridTerminalSystem.GetBlocksOfType&lt;IMyWarhead&gt; },  
{ "FunctionalBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyFunctionalBlock&gt; },  
{ "LightingBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyLightingBlock&gt; },  
{ "ControlPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyControlPanel&gt; },  
{ "Cockpit", _GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt; },  
{ "MedicalRoom", _GridTerminalSystem.GetBlocksOfType&lt;IMyMedicalRoom&gt; },  
{ "RemoteControl", _GridTerminalSystem.GetBlocksOfType&lt;IMyRemoteControl&gt; },  
{ "ButtonPanel", _GridTerminalSystem.GetBlocksOfType&lt;IMyButtonPanel&gt; },  
{ "CameraBlock", _GridTerminalSystem.GetBlocksOfType&lt;IMyCameraBlock&gt; },  
{ "OreDetector", _GridTerminalSystem.GetBlocksOfType&lt;IMyOreDetector&gt; },  
{ "ShipController", _GridTerminalSystem.GetBlocksOfType&lt;IMyShipController&gt; }  
}; 
} 
 
private static bool IsCryoChamber(IMyTerminalBlock block) 
{ 
return block.BlockDefinition.ToString().Contains("Cryo"); 
} 
 
public static void GetBlocksOfExactType(ref List&lt;IMyTerminalBlock&gt; blocks, string exact) 
{ 
Action&lt;List&lt;IMyTerminalBlock&gt;, Func&lt;IMyTerminalBlock, bool&gt;&gt; fn = null; 
if (BofT.TryGetValue(exact, out fn)) 
fn(blocks, null); 
else { 
if (exact == "CryoChamber") { 
_GridTerminalSystem.GetBlocksOfType&lt;IMyCockpit&gt;(blocks, IsCryoChamber); 
return; 
} 
} 
} 
 
public static void GetBlocksOfType(ref List&lt;IMyTerminalBlock&gt; blocks, string typestr) 
{ 
GetBlocksOfExactType(ref blocks, ToExactBlockType(typestr.Trim())); 
} 
 
public static bool IsBlockOfType(IMyTerminalBlock block, string typestr) 
{ 
string et = ToExactBlockType(typestr); 
switch (et) { 
case "FunctionalBlock": 
return true; 
case "ShipController": 
return (block as IMyShipController != null); 
default: 
return block.BlockDefinition.ToString().Contains(ToExactBlockType(typestr)); 
} 
} 
 
public static string ToExactBlockType(string typeInStr) 
{ 
typeInStr = typeInStr.ToLower(); 
 
if (typeInStr.StartsWith("carg") 
|| typeInStr.StartsWith("conta")) return "CargoContainer"; 
if (typeInStr.StartsWith("text") 
|| typeInStr.StartsWith("lcd")) return "TextPanel"; 
if (typeInStr.StartsWith("ass")) return "Assembler"; 
if (typeInStr.StartsWith("refi")) return "Refinery"; 
if (typeInStr.StartsWith("reac")) return "Reactor"; 
if (typeInStr.StartsWith("solar")) return "SolarPanel"; 
if (typeInStr.StartsWith("bat")) return "BatteryBlock"; 
if (typeInStr.StartsWith("bea")) return "Beacon"; 
if (typeInStr.Contains("vent")) return "AirVent"; 
if (typeInStr.Contains("sorter")) return "ConveyorSorter"; 
if (typeInStr.Contains("tank")) return "OxygenTank"; 
if (typeInStr.Contains("farm") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenFarm"; 
if (typeInStr.Contains("gene") 
&amp;&amp; typeInStr.Contains("oxy")) return "OxygenGenerator"; 
if (typeInStr.Contains("cryo")) return "CryoChamber"; 
if (typeInStr == "laserantenna") return "LaserAntenna"; 
if (typeInStr.Contains("antenna")) return "RadioAntenna"; 
if (typeInStr.StartsWith("thrust")) return "Thrust"; 
if (typeInStr.StartsWith("gyro")) return "Gyro"; 
if (typeInStr.StartsWith("sensor")) return "SensorBlock"; 
if (typeInStr.Contains("connector")) return "ShipConnector"; 
if (typeInStr.StartsWith("reflector")) return "ReflectorLight"; 
if ((typeInStr.StartsWith("inter") 
&amp;&amp; typeInStr.EndsWith("light"))) return "InteriorLight"; 
if (typeInStr.StartsWith("land")) return "LandingGear"; 
if (typeInStr.StartsWith("program")) return "ProgrammableBlock"; 
if (typeInStr.StartsWith("timer")) return "TimerBlock"; 
if (typeInStr.StartsWith("motor")) return "MotorStator"; 
if (typeInStr.StartsWith("piston")) return "PistonBase"; 
if (typeInStr.StartsWith("proj")) return "Projector"; 
if (typeInStr.Contains("merge")) return "ShipMergeBlock"; 
if (typeInStr.StartsWith("sound")) return "SoundBlock"; 
if (typeInStr.StartsWith("col")) return "Collector"; 
if (typeInStr.Contains("jump")) return "JumpDrive"; 
if (typeInStr == "door") return "Door"; 
if ((typeInStr.Contains("grav") 
&amp;&amp; typeInStr.Contains("sphe"))) return "GravityGeneratorSphere"; 
if (typeInStr.Contains("grav")) return "GravityGenerator"; 
if (typeInStr.EndsWith("drill")) return "ShipDrill"; 
if (typeInStr.Contains("grind")) return "ShipGrinder"; 
if (typeInStr.EndsWith("welder")) return "ShipWelder"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("gatl"))) return "LargeGatlingTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("inter"))) return "LargeInteriorTurret"; 
if ((typeInStr.Contains("turret") 
&amp;&amp; typeInStr.Contains("miss"))) return "LargeMissileTurret"; 
if (typeInStr.Contains("gatl")) return "SmallGatlingGun"; 
if ((typeInStr.Contains("launcher") 
&amp;&amp; typeInStr.Contains("reload"))) return "SmallMissileLauncherReload"; 
if ((typeInStr.Contains("launcher"))) return "SmallMissileLauncher"; 
if (typeInStr.Contains("mass")) return "VirtualMass"; 
if (typeInStr == "warhead") return "Warhead"; 
if (typeInStr.StartsWith("func")) return "FunctionalBlock"; 
if (typeInStr == "shipctrl") return "ShipController"; 
if (typeInStr.StartsWith("light")) return "LightingBlock"; 
if (typeInStr.StartsWith("contr")) return "ControlPanel"; 
if (typeInStr.StartsWith("coc")) return "Cockpit"; 
if (typeInStr.StartsWith("medi")) return "MedicalRoom"; 
if (typeInStr.StartsWith("remote")) return "RemoteControl"; 
if (typeInStr.StartsWith("but")) return "ButtonPanel"; 
if (typeInStr.StartsWith("cam")) return "CameraBlock"; 
if (typeInStr.Contains("detect")) return "OreDetector"; 
return "Unknown"; 
} 
} 
 
public static class MMStatus 
{ 
public static List&lt;double&gt; GetDetailVals(IMyTerminalBlock block, int lines = -1) 
{ 
List&lt;double&gt; result = new List&lt;double&gt;(); 
 
string[] attrLines = block.DetailedInfo.Split('\n'); 
int max = Math.Min(attrLines.Length, (lines &gt; 0 ? lines : attrLines.Length)); 
 
for (int i = 0; i &lt; max; i++) { 
string[] parts = attrLines[i].Split(':'); 
// broken line? (try German)   
if (parts.Length &lt; 2) { 
parts = attrLines[i].Split('r'); 
// still broken line? (try Portuguese)   
if (parts.Length &lt; 2) 
parts = attrLines[i].Split('x'); 
} 
 
string valStr = (parts.Length &lt; 2 ? parts[0] : parts[1]); 
string[] valParts = valStr.Trim().Split(' '); 
string strVal = valParts[0].Trim(); 
char strUnit = (valParts.Length &gt; 1 &amp;&amp; valParts[1].Length &gt; 1 ? valParts[1][0] : '.'); 
 
double val; 
if (Double.TryParse(strVal, out val)) { 
double finalVal = val * Math.Pow(1000.0, ".kMGTPEZY".IndexOf(strUnit)); 
result.Add(finalVal); 
} 
} 
return result; 
} 
 
public static string GetBatWorkingStr(IMyBatteryBlock battery) 
{ 
string prefix = ""; 
if (battery.GetValueBool("Recharge")) 
prefix = "(+) "; 
else 
if (battery.GetValueBool("Discharge")) 
prefix = "(-) "; 
else 
prefix = "(±) "; 
return prefix + ((battery.CurrentStoredPower / battery.MaxStoredPower) * 100.0f).ToString("0.0") + "%"; 
} 
 
// Get laser antenna status   
public static string GetLAStatus(IMyLaserAntenna gear) 
{ 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
return infoLines[infoLines.Length - 1].Split(' ')[0].ToUpper(); 
} 
 
public static double GetJDChargeVals(IMyJumpDrive jd, out double cur, out double max) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
if (vals.Count &lt; 4) { 
max = 0; 
cur = 0; 
return 0; 
} 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
public static double GetJDCharge(IMyJumpDrive jd) 
{ 
List&lt;double&gt; vals = GetDetailVals(jd, 5); 
double max = 0, cur = 0; 
if (vals.Count &lt; 4) 
return 0; 
 
max = vals[1]; 
cur = vals[3]; 
 
return MM.GetPercent(cur, max); 
} 
 
// Get landing gear status   
public static string GetLGStatus(IMyLandingGear gear) 
{ 
string unlockchars = "udoesnp"; 
 
string[] infoLines = gear.DetailedInfo.Split('\n'); 
string attrLine = infoLines[infoLines.Length - 1]; 
 
string[] attr = attrLine.Split(':'); 
 
string state; 
if (attr.Length &lt; 2) { 
state = attr[0].Trim().ToLower(); 
// Nederlands language (broken)   
if (state.StartsWith("slot status")) 
state = state.Substring(11); 
} 
else 
state = attr[1].Trim().ToLower(); 
 
if (state == "") 
return M.T["W8"]; 
 
// hope it will be more words in other langs too   
if (state.Split(' ').Length &gt; 1) 
return M.T["W10"]; 
 
if ((unlockchars.IndexOf(state[0]) &lt; 0) &amp;&amp; !state.StartsWith("au")) 
return M.T["W7"]; 
 
return M.T["W8"]; 
} 
} 
 
public static class MM 
{ 
public static bool EnableDebug; 
public static IMyGridTerminalSystem _GridTerminalSystem; 
public static MMBlkCol _DebugTextPanels; 
public static IMyProgrammableBlock Me; 
public static Action&lt;string&gt; Echo; 
public static double ElapsedTime = 0; 
 
public static bool Init(IMyGridTerminalSystem gridSystem) 
{ 
_GridTerminalSystem = gridSystem; 
MMBlkMgr._GridTerminalSystem = gridSystem; 
if (MM.ElapsedTime &lt; 0.2f) return false; 
_DebugTextPanels = new MMBlkCol(); 
MMBlkMgr.InitBlocksOfExactType(); 
MMStrFn.InitCharSizes(); 
if (MM.EnableDebug) { 
_DebugTextPanels.AddBofT("textpanel", "[DEBUG]"); 
Debug("DEBUG Panel started.", false, "DEBUG PANEL"); 
} 
 
MMItems.Init(); 
return true; 
} 
 
public static double GetPercent(double current, double max) 
{ 
return (max &gt; 0 ? (current / max) * 100 : 100); 
} 
 
// return full type of item     
public static string GetItemFullType(IMyInventoryItem item) 
{ 
string typeid = item.Content.TypeId.ToString(); 
typeid = typeid.Substring(typeid.LastIndexOf('_') + 1); 
return item.Content.SubtypeName + " " + typeid; 
} 
 
// parse full type into subType and mainType     
public static void ParseFullType(string fullType, out string subType, out string mainType) 
{ 
int idx = fullType.LastIndexOf(' '); 
 
if (idx &gt;= 0) { 
subType = fullType.Substring(0, idx); 
mainType = fullType.Substring(idx + 1); 
return; 
} 
subType = fullType; 
mainType = "";
} 
 
public static string ToDisplay(string fullType) 
{ 
string subType, mainType; 
ParseFullType(fullType, out subType, out mainType); 
 
return ToDisplay(subType, mainType); 
} 
 
public static string ToDisplay(string subType, string mainType) 
{ 
MMItem item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
if (item.dName != "") 
return item.dName; 
 
return item.subType; 
} 
 
return System.Text.RegularExpressions.Regex.Replace( 
subType, "([a-z])([A-Z])", "$1 $2"); 
} 
 
public static void ToInternal(ref string subType, ref string mainType) 
{ 
string shortName = subType.ToLower(); 
MMItem item; 
 
if (MMItems.itemsByShort.TryGetValue(shortName, out item)) { 
subType = item.subType; 
mainType = item.mainType; 
return; 
} 
 
item = MMItems.GetItemOfType(subType, mainType); 
if (item != null) { 
subType = item.subType; 
if (mainType == "Ore" || mainType == "Ingot") 
return; 
mainType = item.mainType; 
} 
} 
 
public static string FormatLargeNumber(double number, bool compress = true) 
{ 
if (!compress) 
return number.ToString( 
"#,###,###,###,###,###,###,###,###,###"); 
 
string ordinals = " kMGTPEZY"; 
double compressed = number; 
 
var ordinal = 0; 
 
while (compressed &gt;= 1000) { 
compressed /= 1000; 
ordinal++; 
} 
 
string res = Math.Round(compressed, 1, MidpointRounding.AwayFromZero).ToString(); 
 
if (ordinal &gt; 0) 
res += " " + ordinals[ordinal]; 
 
return res; 
} 
 
public static void WriteLine(IMyTextPanel textpanel, string message, bool append = true, string title = "") 
{ 
textpanel.WritePublicText(message + "\n", append); 
if (title != "") 
textpanel.WritePublicTitle(title); 
textpanel.ShowTextureOnScreen(); 
textpanel.ShowPublicTextOnScreen(); 
} 
 
public static void Debug(string message, bool append = true, string title = "") 
{ 
if (EnableDebug &amp;&amp; _DebugTextPanels != null &amp;&amp; _DebugTextPanels.Count() != 0) 
DebugTextPanel(message, append, title); 
} 
 
public static void DebugTextPanel(string message, bool append = true, string title = "") 
{ 
for (int i = 0; i &lt; _DebugTextPanels.Count(); i++) { 
IMyTextPanel debugpanel = _DebugTextPanels.Blocks[i] as IMyTextPanel; 
debugpanel.SetCustomName("[DEBUG] Prog: " + message); 
WriteLine(debugpanel, message, append, title); 
} 
} 
} 
 
public class MMPanel 
{ 
// approximate width of LCD panel line   
public const float LCD_LINE_WIDTH = 730; 
 
public MMTextPanelDict panels = new MMTextPanelDict(); 
public MMLCDMgr.MMLCDText text; 
public IMyTextPanel first; 
 
public void SetFontSize(float size) 
{ 
for (int i = 0; i &lt; panels.CountAll(); i++) 
panels.GetItemAt(i).SetValueFloat("FontSize", size); 
} 
 
public void SortPanels() 
{ 
panels.SortAll(); 
first = panels.GetItemAt(0); 
} 
 
public bool IsWide() 
{ 
return (first.BlockDefinition.SubtypeId.Contains("Wide") 
|| first.DefinitionDisplayNameText == "Computer Monitor"); 
} 
 
public void Update() 
{ 
if (text == null || first == null) 
return; 
 
float size = first.GetValueFloat("FontSize"); 
 
for (int i = 0; i &lt; panels.CountAll(); i++) { 
IMyTextPanel panel = panels.GetItemAt(i); 
if (i &gt; 0) 
panel.SetValueFloat("FontSize", size); 
panel.WritePublicText(text.GetDisplayString(i)); 
if (MMLCDMgr.forceRedraw) { 
panel.ShowTextureOnScreen(); 
} 
panel.ShowPublicTextOnScreen(); 
} 
} 
} 
 
public static class MMLCDMgr 
{ 
private static Dictionary&lt;IMyTextPanel, MMLCDText&gt; texts = new Dictionary&lt;IMyTextPanel, MMLCDText&gt;(); 
public static bool forceRedraw = true; 
public static int SCROLL_LINES = 5; 
public static MMLCDText curLcd = null; 
public static MMPanel curP = null; 
 
public static void SetupLCDText(MMPanel p) 
{ 
MMLCDText lcdText = GetLCDText(p); 
lcdText.SetFontSize(p.first.GetValueFloat("FontSize")); 
lcdText.SetNrScreens(p.panels.CountAll()); 
lcdText.widthMod = (p.IsWide() ? 2.0f : 1.0f) * (0.8f / lcdText.fontSize); 
curLcd = lcdText; 
curP = p; 
} 
 
public static MMLCDText GetLCDText(MMPanel p) 
{ 
MMLCDText lcdText; 
IMyTextPanel panel = p.first; 
 
if (!texts.TryGetValue(panel, out lcdText)) { 
lcdText = new MMLCDText(); 
p.text = lcdText; 
texts.Add(panel, lcdText); 
} 
else 
p.text = lcdText; 
return lcdText; 
} 
 
public static void AddLn(string line) 
{ 
curLcd.AddLine(line); 
} 
 
public static void AddMultiLn(string multiline) 
{ 
curLcd.AddMultiLine(multiline); 
} 
 
public static void Add(string text) 
{ 
curLcd.AddFast(text); 
curLcd.curWidth += MMStrFn.GetSize(text); 
} 
 
public static void AddRightLn(string text, float endScreenX) 
{ 
AddRight(text, endScreenX); 
AddLn(""); 
} 
 
public static void AddRight(string text, float endScreenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
endScreenX = endScreenX * curLcd.widthMod - curLcd.curWidth; 
 
if (endScreenX &lt; textWidth) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
endScreenX -= textWidth; 
int fillchars = (int)Math.Round(endScreenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddCenterLn(string text, float screenX) 
{ 
AddCenter(text, screenX); 
AddLn(""); 
} 
 
public static void AddCenter(string text, float screenX) 
{ 
float textWidth = MMStrFn.GetSize(text); 
screenX = screenX * curLcd.widthMod - curLcd.curWidth; 
 
if (screenX &lt; textWidth / 2) { 
curLcd.AddFast(text); 
curLcd.curWidth += textWidth; 
return; 
} 
 
screenX -= textWidth / 2; 
int fillchars = (int)Math.Round(screenX / MMStrFn.WHITESPACE_WIDTH, MidpointRounding.AwayFromZero); 
float fillWidth = fillchars * MMStrFn.WHITESPACE_WIDTH; 
 
curLcd.AddFast(new String(' ', fillchars) + text); 
curLcd.curWidth += fillWidth + textWidth; 
} 
 
public static void AddBarLn(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddLine("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
} 
 
public static void AddBar(double percent, int width = 22, float leaveSpaceX = 0f) 
{ 
if (Double.IsNaN(percent)) percent = 0; 
int totalBars = (int)(width * curLcd.widthMod) - 2 - (int)(leaveSpaceX / MMStrFn.PROGRESSCHAR_WIDTH); 
int fill = Math.Min((int)(percent * totalBars) / 100, totalBars); 
curLcd.AddFast("[" + new String('|', fill) + new String('\'', totalBars - fill) + "]"); 
curLcd.curWidth += MMStrFn.PROGRESSCHAR_WIDTH * totalBars + 18f; 
} 
 
public static void ClearText() 
{ 
curLcd.ClearText(); 
} 
 
public static void UpdatePanel(MMPanel panel) 
{ 
panel.Update(); 
curLcd.Scroll(); 
} 
 
public class MMLCDText 
{ 
public float fontSize = 0.8f; 
public float widthMod = 1.0f; 
public int scrollPos; 
public int scrollDir = 1; 
public int DisplayLines = 22; // 22 for font size 0.8   
public int screens = 1; 
 
public List&lt;string&gt; lines = new List&lt;string&gt;(); 
public int curLine; 
public float curWidth; 
 
public MMLCDText(float fontSize = 0.8f) 
{ 
SetFontSize(fontSize); 
lines.Add(""); 
} 
 
public void SetFontSize(float size) 
{ 
fontSize = size; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void SetNrScreens(int cnt) 
{ 
screens = cnt; 
DisplayLines = (int)Math.Round(22 * (0.8 / fontSize) * screens); 
} 
 
public void AddFast(string text) 
{ 
lines[curLine] += text; 
} 
 
public void AddMultiLine(string multiline) 
{ 
string[] lines = multiline.Split('\n'); 
 
for (int i = 0; i &lt; lines.Length; i++) 
AddLine(lines[i]); 
} 
 
public void AddLine(string line) 
{ 
lines[curLine] += line; 
lines.Add(""); 
curLine++; 
curWidth = 0; 
} 
 
public void ClearText() 
{ 
lines.Clear(); 
lines.Add(""); 
curWidth = 0; 
curLine = 0; 
} 
 
public string GetFullString() 
{ 
return String.Join("\n", lines); 
} 
 
// Display only X lines from scrollPos   
public string GetDisplayString(int screenidx = 0) 
{ 
if (lines.Count &lt; DisplayLines / screens) { 
if (screenidx != 0) return ""; 
scrollPos = 0; 
scrollDir = 1; 
return GetFullString(); 
} 
 
int pos = scrollPos + screenidx * (DisplayLines / screens); 
if (pos &gt; lines.Count) 
pos = lines.Count; 
 
List&lt;string&gt; display = 
lines.GetRange(pos, 
Math.Min(lines.Count - pos, DisplayLines / screens)); 
 
return String.Join("\n", display); 
} 
 
public void Scroll() 
{ 
int linesCnt = lines.Count - 1; 
if (linesCnt &lt;= DisplayLines) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
if (scrollDir &gt; 0) { 
if (scrollPos + SCROLL_LINES + DisplayLines &gt; linesCnt) { 
scrollDir = -1; 
scrollPos = Math.Max(linesCnt - DisplayLines, 0); 
return; 
} 
 
scrollPos += SCROLL_LINES; 
} 
else { 
if (scrollPos - SCROLL_LINES &lt; 0) { 
scrollPos = 0; 
scrollDir = 1; 
return; 
} 
 
scrollPos -= SCROLL_LINES; 
} 
} 
} 
} 
 
public static class MMStrFn 
{ 
private static Dictionary&lt;char, float&gt; charSize = new Dictionary&lt;char, float&gt;(); 
 
public const float WHITESPACE_WIDTH = 8f; 
public const float PROGRESSCHAR_WIDTH = 6.4f; 
 
public static void InitCharSizes() 
{ 
if (charSize.Count &gt; 0) 
return; 
 
AddCharsSize("3FKTabdeghknopqsuy£µÝàáâãäåèéêëðñòóôõöøùúûüýþÿāăąďđēĕėęěĝğġģĥħĶķńņňŉōŏőśŝşšŢŤŦũūŭůűųŶŷŸșȚЎЗКЛбдекруцяёђћўџ", 17f); 
AddCharsSize("#0245689CXZ¤¥ÇßĆĈĊČŹŻŽƒЁЌАБВДИЙПРСТУХЬ€", 19f); 
AddCharsSize("$&amp;GHPUVY§ÙÚÛÜÞĀĜĞĠĢĤĦŨŪŬŮŰŲОФЦЪЯжы†‡", 20f); 
AddCharsSize("ABDNOQRSÀÁÂÃÄÅÐÑÒÓÔÕÖØĂĄĎĐŃŅŇŌŎŐŔŖŘŚŜŞŠȘЅЊЖф□", 21f); 
AddCharsSize("(),.1:;[]ft{}·ţťŧț", 9f); 
AddCharsSize("+&lt;=&gt;E^~¬±¶ÈÉÊË×÷ĒĔĖĘĚЄЏЕНЭ−", 18f); 
AddCharsSize(" !I`ijl ¡¨¯´¸ÌÍÎÏìíîïĨĩĪīĮįİıĵĺļľłˆˇ˘˙˚˛˜˝ІЇії‹›∙", 8f); 
AddCharsSize("7?Jcz¢¿çćĉċčĴźżžЃЈЧавийнопсъьѓѕќ", 16f); 
AddCharsSize("L_vx«»ĹĻĽĿŁГгзлхчҐ–•", 15f); 
AddCharsSize("\"-rª­ºŀŕŗř", 10f); 
AddCharsSize("mw¼ŵЮщ", 27f); 
AddCharsSize("MМШ", 26f); 
AddCharsSize("WÆŒŴ—…‰", 31f); 
AddCharsSize("'|¦ˉ‘’‚", 6f); 
AddCharsSize("*²³¹", 11f); 
AddCharsSize("\\°“”„", 12f); 
AddCharsSize("/ĳтэє", 14f); 
AddCharsSize("%ĲЫ", 24f); 
AddCharsSize("@©®мшњ", 25f); 
AddCharsSize("\n", 0f); 
AddCharsSize("¾æœЉ", 28f); 
AddCharsSize("½Щ", 29f); 
AddCharsSize("ј", 7f); 
AddCharsSize("љ", 22f); 
AddCharsSize("ґ", 13f); 
AddCharsSize("ю", 23f); 
AddCharsSize("™", 30f); 
AddCharsSize("", 34f); 
AddCharsSize("", 32f); 
AddCharsSize("", 41f); 
} 
 
private static void AddCharsSize(string chars, float size) 
{ 
for (int i = 0; i &lt; chars.Length; i++) 
charSize.Add(chars[i], size); 
} 
 
public static float GetCharSize(char c) 
{ 
float width = 40; 
charSize.TryGetValue(c, out width); 
 
return width; 
} 
 
public static float GetSize(string str) 
{ 
float sum = 0; 
for (int i = 0; i &lt; str.Length; i++) 
sum += GetCharSize(str[i]); 
 
return sum; 
} 
 
public static string GetTrimmed(string text, float pixelWidth) 
{ 
int trimlen = Math.Min((int)pixelWidth / 14, text.Length - 2); 
float stringSize = GetSize(text); 
if (stringSize &lt;= pixelWidth) 
return text; 
 
while (stringSize &gt; pixelWidth - 20) { 
text = text.Substring(0, trimlen); 
stringSize = GetSize(text); 
trimlen -= 2; 
} 
return text + ".."; 
} 
} 
 
 
public class MMItem 
{ 
public string subType; 
public string mainType; 
 
public int defQt; 
public string dName; 
public string sName; 
 
public bool used; 
 
public MMItem(string _subType, string _mainType, int _defaultQuota = 0, string _displayName = "", string _shortName = "", bool _used = true) 
{ 
subType = _subType; 
mainType = _mainType; 
defQt = _defaultQuota; 
dName = _displayName; 
sName = _shortName; 
used = _used; 
} 
} 
public class MMPanelDict 
{ 
public Dictionary&lt;string, MMPanel&gt; dict = new Dictionary&lt;string, MMPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMTextPanelDict 
{ 
public Dictionary&lt;string, IMyTextPanel&gt; dict = new Dictionary&lt;string, IMyTextPanel&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, IMyTextPanel item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public IMyTextPanel GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public IMyTextPanel GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
public class MMAmountSpecDict 
{ 
public Dictionary&lt;string, MMAmountSpec&gt; dict = new Dictionary&lt;string, MMAmountSpec&gt;(); 
public List&lt;string&gt; keys = new List&lt;string&gt;(); 
 
public void AddItem(string key, MMAmountSpec item) { if (!dict.ContainsKey(key)) { keys.Add(key); dict.Add(key, item); } } 
public int CountAll() { return dict.Count; } 
public MMAmountSpec GetItem(string key) { if (dict.ContainsKey(key)) return dict[key]; return null; } 
public MMAmountSpec GetItemAt(int index) { return dict[keys[index]]; } 
public void ClearAll() { keys.Clear(); dict.Clear(); } 
public void SortAll() { keys.Sort(); } 
} 
 
public static class M 
{ 
public static readonly Dictionary&lt;string, string&gt; T = new Dictionary&lt;string, string&gt;   
{   
// TRANSLATION STRINGS   
// msg id, text   
{ "AC1", "Acceleration:" },  
{ "A1", "EMPTY" }, // amount   
{ "B1", "Booting up..." },   
{ "C1", "count:" },  
{ "C2", "Cargo Used:" },  
{ "C3", "Invalid countdown format, use:" },   
{ "C4", "EXPIRED" },   
{ "C5", "days" },   
{ "D1", "You need to enter name." },   
{ "D2", "No blocks found." },   
{ "D3", "No damaged blocks found." },   
{ "H1", "Write commands to Private Text." },   
{ "H2", "Write commands to Public or Private Title." },   
// inventory   
{ "I1", "ore" },   
{ "I2", "summary" },   
{ "I3", "Ores" },   
{ "I4", "Ingots" },   
{ "I5", "Components" },   
{ "I6", "Gas" },   
{ "I7", "Ammo" },   
{ "I8", "Tools" },   
{ "M1", "Cargo Mass:" },  
// oxygen   
{ "O1", "Leaking" },   
{ "O2", "Oxygen Farms" },   
{ "O3", "No oxygen blocks found." },   
{ "O4", "Oxygen Tanks" },   
// position   
{ "P1", "Block not found" },   
{ "P2", "Location" },   
// power   
{ "P3", "Stored" },    
{ "P4", "Output" },   
{ "P5", "Input" },   
{ "P6", "No power source found!" },   
{ "P7", "Batteries" },   
{ "P8", "Total Output" },   
{ "P9", "Reactors" },   
{ "P10", "Solars" },   
{ "P11", "Power" },   
{ "PT1", "Power Time:" },  
{ "PT2", "Charge Time:" },   
{ "S1", "Speed:" },  
// text   
{ "T1", "Source LCD not found: " },   
{ "T2", "Missing source LCD name" },   
{ "T3", "LCD Private Text is empty" },   
// tanks   
{ "T4", "Missing tank type. eg: 'Tanks * Hydrogen'" },   
{ "T5", "No {0} tanks found." }, // {0} is tank type   
{ "T6", "Tanks" },   
{ "UC", "Unknown command" },   
// occupied &amp; dampeners  
{ "SC1", "Cannot find control block." }, // NEW  
{ "SCD", "Dampeners: " }, // NEW  
{ "SCO", "Occupied: " }, // NEW  
// working   
{ "W1", "OFF" },   
{ "W2", "WORK" },   
{ "W3", "IDLE" },   
{ "W4", "LEAK" },   
{ "W5", "OPEN" },   
{ "W6", "CLOSED" },   
{ "W7", "LOCK" },   
{ "W8", "UNLOCK" },   
{ "W9", "ON" },   
{ "W10", "READY" }   
};  
</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="0" y="12" z="7" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="0" y="12" z="8" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="12" z="9" />
              <IntegrityPercent>0.785714269</IntegrityPercent>
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>117974694303590738</EntityId>
              <Min x="-2" y="12" z="9" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <CustomName>VC SC Wheel Suspension 3x3 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>124112850707169742</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>0.6</PowerNew>
              <StrengthNew>0.1</StrengthNew>
              <FrictionNew>0.5</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>91355545077205880</EntityId>
              <Min x="1" y="12" z="9" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <CustomName>VC SC Wheel Suspension 3x3 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>133673045414651710</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0.32</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>0.6</PowerNew>
              <StrengthNew>0.1</StrengthNew>
              <FrictionNew>0.5</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
              <SubtypeName>SmallBlockOreDetector</SubtypeName>
              <EntityId>117923895596743232</EntityId>
              <Min x="2" y="14" z="5" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Ore Detector </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <DetectionRadius>50</DetectionRadius>
              <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <EntityId>120963699034542282</EntityId>
              <Min x="-2" y="12" z="6" />
              <IntegrityPercent>0.399999946</IntegrityPercent>
              <BuildPercent>0.399999946</BuildPercent>
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="12" z="0" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallWheel3x3</SubtypeName>
              <EntityId>93364963877716148</EntityId>
              <Min x="3" y="12" z="4" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <EntityId>91602672532313636</EntityId>
              <Min x="-3" y="12" z="6" />
              <IntegrityPercent>0.3600001</IntegrityPercent>
              <BuildPercent>0.3600001</BuildPercent>
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
              <EntityId>119965914126526566</EntityId>
              <Min x="-1" y="13" z="3" />
              <IntegrityPercent>0.7108434</IntegrityPercent>
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>3.3332</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                            <SubtypeName>Uranium</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>VC SC Small Reactor 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Inventory>
                <Items>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>3.3332</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                      <SubtypeName>Uranium</SubtypeName>
                    </PhysicalContent>
                    <ItemId>0</ItemId>
                  </MyObjectBuilder_InventoryItem>
                </Items>
                <nextItemId>1</nextItemId>
                <Volume>0.125</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
              <Min x="1" y="13" z="2" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>127611396447929896</EntityId>
              <Min x="-2" y="14" z="10" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <CustomName>VC SC Tail Light 1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>1.66666675</Radius>
              <ReflectorRadius>20</ReflectorRadius>
              <ColorGreen>0.654902</ColorGreen>
              <ColorBlue>0.4117647</ColorBlue>
              <Falloff>0.3</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorInvCorner2Base</SubtypeName>
              <Min x="1" y="13" z="1" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="12" z="4" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="12" z="4" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="12" z="7" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="12" z="7" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="12" z="6" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="12" z="6" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="3" y="15" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
              <SubtypeName>VirtualMassSmall</SubtypeName>
              <EntityId>134325685987509882</EntityId>
              <Min x="-1" y="12" z="8" />
              <IntegrityPercent>0.724770665</IntegrityPercent>
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Artificial Mass</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
              <SubtypeName>VirtualMassSmall</SubtypeName>
              <EntityId>101733616117010094</EntityId>
              <Min x="1" y="12" z="8" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Artificial Mass</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="3" y="13" z="7" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
              <SubtypeName>VirtualMassSmall</SubtypeName>
              <EntityId>115032097000833931</EntityId>
              <Min x="-1" y="12" z="2" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Artificial Mass</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_VirtualMass">
              <SubtypeName>VirtualMassSmall</SubtypeName>
              <EntityId>135030064868352341</EntityId>
              <Min x="1" y="12" z="2" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Artificial Mass</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>OxygenTankSmall</SubtypeName>
              <EntityId>122851673498006899</EntityId>
              <Min x="-1" y="13" z="7" />
              <IntegrityPercent>0.8479473</IntegrityPercent>
              <BuildPercent>0.99999994</BuildPercent>
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>4</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>VC SC Oxygen Tank</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>1</FilledRatio>
              <Inventory>
                <Items />
                <nextItemId>0</nextItemId>
                <Volume>4</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>101428779946689552</EntityId>
              <Min x="1" y="16" z="7" />
              <IntegrityPercent>0.1724138</IntegrityPercent>
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <CustomName>VC SC Spotlight</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <Falloff>0.3</Falloff>
              <Intensity>5</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="-2" y="15" z="10" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
              <SubtypeName>ConnectorMedium</SubtypeName>
              <EntityId>96080645592259786</EntityId>
              <Min x="-1" y="13" z="10" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <DeformationRatio>0.5</DeformationRatio>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>34</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>SteelPlate</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>2</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Computer</SubtypeName>
                          </PhysicalContent>
                          <ItemId>1</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>12</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>SmallTube</SubtypeName>
                          </PhysicalContent>
                          <ItemId>2</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>6</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Motor</SubtypeName>
                          </PhysicalContent>
                          <ItemId>3</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>42</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>Construction</SubtypeName>
                          </PhysicalContent>
                          <ItemId>4</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>2</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Component">
                            <SubtypeName>LargeTube</SubtypeName>
                          </PhysicalContent>
                          <ItemId>5</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                            <SubtypeName>OxygenBottle</SubtypeName>
                            <GasLevel>0</GasLevel>
                            <OxygenLevel>0</OxygenLevel>
                          </PhysicalContent>
                          <ItemId>6</ItemId>
                        </MyObjectBuilder_InventoryItem>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>1</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                            <SubtypeName>HydrogenBottle</SubtypeName>
                            <GasLevel>0</GasLevel>
                          </PhysicalContent>
                          <ItemId>7</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>8</nextItemId>
                      <Volume>1.152</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>VC SC Connector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Inventory>
                <Items>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>34</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Component">
                      <SubtypeName>SteelPlate</SubtypeName>
                    </PhysicalContent>
                    <ItemId>0</ItemId>
                  </MyObjectBuilder_InventoryItem>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>2</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Component">
                      <SubtypeName>Computer</SubtypeName>
                    </PhysicalContent>
                    <ItemId>1</ItemId>
                  </MyObjectBuilder_InventoryItem>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>12</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Component">
                      <SubtypeName>SmallTube</SubtypeName>
                    </PhysicalContent>
                    <ItemId>2</ItemId>
                  </MyObjectBuilder_InventoryItem>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>6</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Component">
                      <SubtypeName>Motor</SubtypeName>
                    </PhysicalContent>
                    <ItemId>3</ItemId>
                  </MyObjectBuilder_InventoryItem>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>42</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Component">
                      <SubtypeName>Construction</SubtypeName>
                    </PhysicalContent>
                    <ItemId>4</ItemId>
                  </MyObjectBuilder_InventoryItem>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>2</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Component">
                      <SubtypeName>LargeTube</SubtypeName>
                    </PhysicalContent>
                    <ItemId>5</ItemId>
                  </MyObjectBuilder_InventoryItem>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>1</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_OxygenContainerObject">
                      <SubtypeName>OxygenBottle</SubtypeName>
                      <GasLevel>0</GasLevel>
                      <OxygenLevel>0</OxygenLevel>
                    </PhysicalContent>
                    <ItemId>6</ItemId>
                  </MyObjectBuilder_InventoryItem>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>1</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_GasContainerObject">
                      <SubtypeName>HydrogenBottle</SubtypeName>
                      <GasLevel>0</GasLevel>
                    </PhysicalContent>
                    <ItemId>7</ItemId>
                  </MyObjectBuilder_InventoryItem>
                </Items>
                <nextItemId>8</nextItemId>
                <Volume>1.152</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive CanSend</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
              <MasterToSlaveTransform xsi:nil="true" />
              <MasterToSlaveGrid xsi:nil="true" />
              <IsMaster>true</IsMaster>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>123298669580000273</EntityId>
              <Min x="2" y="14" z="9" />
              <IntegrityPercent>0.008264462</IntegrityPercent>
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Repair Projector Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>107678154548851754</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>101778338750085276</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>103006366529486702</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <Delay>1100</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="14" z="8" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-3" y="14" z="10" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>102185830791045122</EntityId>
              <Min x="0" y="12" z="10" />
              <IntegrityPercent>0.408867</IntegrityPercent>
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Camera</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04719758</Fov>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
              <EntityId>101695706988910575</EntityId>
              <Min x="2" y="14" z="10" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>3.3332</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                            <SubtypeName>Uranium</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>VC SC Small Reactor 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Inventory>
                <Items>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>3.3332</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                      <SubtypeName>Uranium</SubtypeName>
                    </PhysicalContent>
                    <ItemId>0</ItemId>
                  </MyObjectBuilder_InventoryItem>
                </Items>
                <nextItemId>1</nextItemId>
                <Volume>0.125</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
              <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
              <EntityId>122025771275547084</EntityId>
              <Min x="-2" y="14" z="9" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Antenna </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <BroadcastRadius>6093.243</BroadcastRadius>
              <ShowShipName>true</ShowShipName>
              <EnableBroadcasting>true</EnableBroadcasting>
              <AttachedPB>0</AttachedPB>
              <IgnoreAllied>false</IgnoreAllied>
              <IgnoreOther>true</IgnoreOther>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="3" y="15" z="8" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <EntityId>119637160010994011</EntityId>
              <Min x="-3" y="12" z="5" />
              <IntegrityPercent>0.3600001</IntegrityPercent>
              <BuildPercent>0.3600001</BuildPercent>
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <EntityId>138414984392458123</EntityId>
              <Min x="-2" y="12" z="5" />
              <IntegrityPercent>0.399999946</IntegrityPercent>
              <BuildPercent>0.399999946</BuildPercent>
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="12" z="3" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
              <SubtypeName>ButtonPanelSmall</SubtypeName>
              <EntityId>103804621955263707</EntityId>
              <Min x="-3" y="13" z="4" />
              <IntegrityPercent>0.444444448</IntegrityPercent>
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Button Panel</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>103804621955263707</BlockEntityId>
                      <GroupName>VC SC Lights</GroupName>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <AnyoneCanUse>false</AnyoneCanUse>
              <CustomButtonNames>
                <dictionary>
                  <item>
                    <Key>0</Key>
                    <Value>VC SC Lights</Value>
                  </item>
                </dictionary>
              </CustomButtonNames>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="12" z="3" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="12" z="10" />
              <IntegrityPercent>0.441860467</IntegrityPercent>
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="12" z="10" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>136750512336658876</EntityId>
              <Min x="2" y="14" z="8" />
              <IntegrityPercent>0.9570354</IntegrityPercent>
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <ShareMode>All</ShareMode>
              <CustomName>Gyroscope</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="14" z="6" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="14" z="5" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <EntityId>73863087687424943</EntityId>
              <Min x="-3" y="13" z="6" />
              <IntegrityPercent>0.7333333</IntegrityPercent>
              <BuildPercent>0.7333333</BuildPercent>
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <EntityId>103707249025012686</EntityId>
              <Min x="-3" y="13" z="5" />
              <IntegrityPercent>0.7333333</IntegrityPercent>
              <BuildPercent>0.7333333</BuildPercent>
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>91063369751304790</EntityId>
              <Min x="0" y="16" z="7" />
              <IntegrityPercent>0.1724138</IntegrityPercent>
              <ColorMaskHSV x="0.05277778" y="0.24" z="1" />
              <CustomName>VC SC Spotlight </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <Falloff>0.3</Falloff>
              <Intensity>5</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallTextPanel</SubtypeName>
              <EntityId>103006366529486702</EntityId>
              <Min x="0" y="14" z="1" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ShareMode>All</ShareMode>
              <CustomName>VC SC Front Piston Jack Attach Point Sign</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>1</ChangeInterval>
              <SelectedImages>
                <string>Arrow</string>
                <string>Construction</string>
              </SelectedImages>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <Skeleton>
            <BoneInfo>
              <BonePosition x="-3" y="31" z="16" />
              <BoneOffset x="127" y="127" z="82" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="33" z="16" />
              <BoneOffset x="127" y="127" z="110" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="25" z="0" />
              <BoneOffset x="127" y="127" z="139" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="31" z="15" />
              <BoneOffset x="137" y="125" z="104" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="33" z="14" />
              <BoneOffset x="127" y="127" z="160" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="31" z="14" />
              <BoneOffset x="140" y="125" z="89" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="32" z="19" />
              <BoneOffset x="125" y="119" z="130" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="32" z="18" />
              <BoneOffset x="125" y="116" z="108" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="32" z="17" />
              <BoneOffset x="127" y="112" z="84" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="32" z="16" />
              <BoneOffset x="129" y="116" z="103" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="32" z="15" />
              <BoneOffset x="126" y="115" z="123" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="31" z="17" />
              <BoneOffset x="139" y="127" z="104" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="31" z="16" />
              <BoneOffset x="137" y="127" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="32" z="15" />
              <BoneOffset x="127" y="117" z="133" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="32" z="16" />
              <BoneOffset x="154" y="79" z="189" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="32" z="17" />
              <BoneOffset x="118" y="77" z="118" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="25" z="20" />
              <BoneOffset x="125" y="123" z="115" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="31" z="16" />
              <BoneOffset x="127" y="127" z="143" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="32" z="18" />
              <BoneOffset x="176" y="66" z="75" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="32" z="19" />
              <BoneOffset x="128" y="111" z="170" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="7" y="30" z="16" />
              <BoneOffset x="49" y="118" z="113" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="24" z="20" />
              <BoneOffset x="114" y="100" z="50" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="24" z="21" />
              <BoneOffset x="122" y="115" z="95" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="26" z="0" />
              <BoneOffset x="127" y="127" z="138" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="29" z="16" />
              <BoneOffset x="127" y="127" z="112" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="27" z="16" />
              <BoneOffset x="127" y="127" z="161" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="29" z="15" />
              <BoneOffset x="154" y="130" z="141" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="29" z="14" />
              <BoneOffset x="127" y="127" z="185" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="31" z="14" />
              <BoneOffset x="127" y="127" z="137" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="27" z="14" />
              <BoneOffset x="127" y="127" z="186" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="30" z="18" />
              <BoneOffset x="127" y="159" z="95" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="30" z="17" />
              <BoneOffset x="111" y="126" z="125" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="30" z="16" />
              <BoneOffset x="127" y="159" z="159" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="30" z="16" />
              <BoneOffset x="63" y="191" z="191" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="30" z="17" />
              <BoneOffset x="63" y="155" z="118" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="30" z="18" />
              <BoneOffset x="63" y="187" z="86" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="26" z="2" />
              <BoneOffset x="157" y="158" z="91" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="26" z="3" />
              <BoneOffset x="134" y="127" z="132" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="34" z="15" />
              <BoneOffset x="127" y="119" z="108" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="34" z="16" />
              <BoneOffset x="125" y="120" z="116" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-6" y="27" z="13" />
              <BoneOffset x="140" y="128" z="160" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-6" y="27" z="14" />
              <BoneOffset x="142" y="128" z="102" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="27" z="2" />
              <BoneOffset x="95" y="127" z="95" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="27" z="1" />
              <BoneOffset x="124" y="119" z="174" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="27" z="0" />
              <BoneOffset x="121" y="112" z="182" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="28" z="3" />
              <BoneOffset x="126" y="110" z="183" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="28" z="2" />
              <BoneOffset x="127" y="119" z="85" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="25" z="22" />
              <BoneOffset x="131" y="107" z="73" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="25" z="21" />
              <BoneOffset x="130" y="107" z="71" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="28" z="16" />
              <BoneOffset x="127" y="127" z="128" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="29" z="16" />
              <BoneOffset x="109" y="125" z="124" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="25" z="1" />
              <BoneOffset x="138" y="127" z="138" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="25" z="0" />
              <BoneOffset x="132" y="128" z="92" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="26" z="2" />
              <BoneOffset x="127" y="159" z="95" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="32" z="16" />
              <BoneOffset x="127" y="127" z="82" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-5" y="27" z="14" />
              <BoneOffset x="127" y="127" z="148" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="27" z="0" />
              <BoneOffset x="127" y="127" z="175" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="28" z="16" />
              <BoneOffset x="95" y="159" z="122" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="27" z="14" />
              <BoneOffset x="127" y="127" z="131" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="31" z="16" />
              <BoneOffset x="127" y="127" z="80" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="27" z="16" />
              <BoneOffset x="127" y="127" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="31" z="14" />
              <BoneOffset x="127" y="127" z="152" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="28" z="14" />
              <BoneOffset x="95" y="159" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="28" z="15" />
              <BoneOffset x="95" y="159" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="29" z="3" />
              <BoneOffset x="143" y="128" z="137" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="29" z="2" />
              <BoneOffset x="132" y="127" z="146" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="31" z="18" />
              <BoneOffset x="159" y="127" z="95" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="31" z="16" />
              <BoneOffset x="159" y="127" z="159" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="31" z="18" />
              <BoneOffset x="94" y="125" z="123" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="7" y="32" z="18" />
              <BoneOffset x="127" y="119" z="123" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="7" y="32" z="17" />
              <BoneOffset x="126" y="120" z="98" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="33" z="14" />
              <BoneOffset x="127" y="127" z="146" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="7" y="32" z="16" />
              <BoneOffset x="126" y="120" z="151" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="7" y="32" z="15" />
              <BoneOffset x="124" y="113" z="132" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="31" z="14" />
              <BoneOffset x="127" y="127" z="145" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="31" z="16" />
              <BoneOffset x="127" y="127" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="29" z="16" />
              <BoneOffset x="127" y="127" z="145" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="26" z="2" />
              <BoneOffset x="63" y="191" z="63" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="26" z="0" />
              <BoneOffset x="95" y="159" z="163" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="26" z="1" />
              <BoneOffset x="95" y="159" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="32" z="19" />
              <BoneOffset x="129" y="114" z="132" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="32" z="16" />
              <BoneOffset x="92" y="78" z="187" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="25" z="22" />
              <BoneOffset x="129" y="96" z="41" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="25" z="21" />
              <BoneOffset x="128" y="103" z="62" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="31" z="16" />
              <BoneOffset x="127" y="127" z="110" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="31" z="14" />
              <BoneOffset x="127" y="127" z="136" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="29" z="14" />
              <BoneOffset x="127" y="127" z="145" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="32" z="15" />
              <BoneOffset x="123" y="114" z="99" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="28" z="3" />
              <BoneOffset x="128" y="116" z="113" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="28" z="2" />
              <BoneOffset x="125" y="92" z="131" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="32" z="15" />
              <BoneOffset x="127" y="120" z="125" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-1" y="32" z="16" />
              <BoneOffset x="127" y="127" z="72" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="32" z="16" />
              <BoneOffset x="130" y="95" z="114" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="24" z="20" />
              <BoneOffset x="122" y="114" z="92" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="32" z="19" />
              <BoneOffset x="128" y="117" z="83" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-5" y="28" z="14" />
              <BoneOffset x="127" y="127" z="171" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="32" z="15" />
              <BoneOffset x="163" y="116" z="94" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="30" z="16" />
              <BoneOffset x="127" y="127" z="99" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="30" z="14" />
              <BoneOffset x="127" y="127" z="110" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="32" z="16" />
              <BoneOffset x="162" y="123" z="73" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="32" z="17" />
              <BoneOffset x="137" y="124" z="90" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="7" y="29" z="15" />
              <BoneOffset x="96" y="124" z="121" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="28" z="2" />
              <BoneOffset x="160" y="108" z="179" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="28" z="3" />
              <BoneOffset x="143" y="111" z="153" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="30" z="18" />
              <BoneOffset x="191" y="191" z="63" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="30" z="16" />
              <BoneOffset x="191" y="191" z="191" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="30" z="17" />
              <BoneOffset x="159" y="159" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="32" z="14" />
              <BoneOffset x="127" y="127" z="143" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="7" y="29" z="16" />
              <BoneOffset x="44" y="118" z="112" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="24" z="22" />
              <BoneOffset x="128" y="111" z="82" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="24" z="21" />
              <BoneOffset x="127" y="115" z="95" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="32" z="16" />
              <BoneOffset x="127" y="127" z="162" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="28" z="1" />
              <BoneOffset x="125" y="111" z="164" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="28" z="3" />
              <BoneOffset x="125" y="121" z="132" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="28" z="2" />
              <BoneOffset x="125" y="115" z="87" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="25" z="0" />
              <BoneOffset x="127" y="127" z="120" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="30" z="14" />
              <BoneOffset x="95" y="95" z="184" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="30" z="15" />
              <BoneOffset x="133" y="99" z="147" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="32" z="14" />
              <BoneOffset x="95" y="159" z="156" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="32" z="15" />
              <BoneOffset x="95" y="159" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="32" z="16" />
              <BoneOffset x="95" y="159" z="88" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="25" z="21" />
              <BoneOffset x="117" y="105" z="64" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="25" z="20" />
              <BoneOffset x="115" y="101" z="54" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-4" y="30" z="16" />
              <BoneOffset x="110" y="97" z="110" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="31" z="17" />
              <BoneOffset x="46" y="123" z="117" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="31" z="16" />
              <BoneOffset x="95" y="127" z="159" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="31" z="18" />
              <BoneOffset x="59" y="123" z="119" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="27" z="3" />
              <BoneOffset x="139" y="125" z="143" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="27" z="2" />
              <BoneOffset x="171" y="127" z="70" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="8" y="29" z="16" />
              <BoneOffset x="90" y="123" z="120" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="25" z="0" />
              <BoneOffset x="127" y="127" z="109" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-3" y="31" z="14" />
              <BoneOffset x="127" y="127" z="159" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="28" z="0" />
              <BoneOffset x="125" y="122" z="156" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="28" z="1" />
              <BoneOffset x="126" y="124" z="142" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="28" z="2" />
              <BoneOffset x="108" y="73" z="72" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="24" z="22" />
              <BoneOffset x="129" y="115" z="95" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="28" z="3" />
              <BoneOffset x="128" y="121" z="150" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="24" z="21" />
              <BoneOffset x="130" y="114" z="91" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="25" z="20" />
              <BoneOffset x="118" y="108" z="74" />
            </BoneInfo>
          </Skeleton>
          <LinearVelocity x="0.0567344651" y="-0.0260893889" z="0.013201464" />
          <AngularVelocity x="-0.00373004377" y="0.00711084763" z="-0.0052766297" />
          <XMirroxPlane x="0" y="14" z="1" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="14" z="6" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="-1" y="14" z="7" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="1" y="14" z="6" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="1" y="14" z="7" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="13" z="4" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="13" z="3" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="13" z="2" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="13" z="3" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="1" y="13" z="3" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="0" y="13" z="3" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-1" y="13" z="3" />
              <StartDirection>Right</StartDirection>
              <EndPosition x="0" y="13" z="3" />
              <EndDirection>Left</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="14" z="9" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="14" z="10" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="13" z="0" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="13" z="1" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="13" z="2" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="13" z="1" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="1" y="14" z="10" />
              <StartDirection>Right</StartDirection>
              <EndPosition x="2" y="14" z="10" />
              <EndDirection>Left</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>VC SC Wheels</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>12</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>12</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>12</Y>
                  <Z>9</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>12</Y>
                  <Z>9</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>VC SC Thrusters</Name>
              <Blocks>
                <Vector3I>
                  <X>-2</X>
                  <Y>14</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>14</Y>
                  <Z>7</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>VC SC Artificial Mass</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>12</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>12</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>12</Y>
                  <Z>2</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>12</Y>
                  <Z>2</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>VC SC Reactors</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>13</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>13</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>14</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>VC SC Forward Lights</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>VC SC Lights</Name>
              <Blocks>
                <Vector3I>
                  <X>-2</X>
                  <Y>14</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>VC SC Systems</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>13</Y>
                  <Z>0</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>14</Y>
                  <Z>9</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>12</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>12</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>12</Y>
                  <Z>2</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>12</Y>
                  <Z>2</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>13</Y>
                  <Z>5</Z>
                </Vector3I>
                <Vector3I>
                  <X>-3</X>
                  <Y>13</Y>
                  <Z>4</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>12</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>14</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>14</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>14</Y>
                  <Z>5</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>14</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>14</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>13</Y>
                  <Z>4</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>14</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>14</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>13</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>13</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>14</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>14</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>16</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>14</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>14</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>14</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>13</Y>
                  <Z>6</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>14</Y>
                  <Z>9</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>12</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>12</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>12</Y>
                  <Z>9</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>12</Y>
                  <Z>9</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <Handbrake>true</Handbrake>
          <DisplayName>VC Scout Car</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>21</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>104277252326279083</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="5.36376953125" y="-2.4794921875" z="2.83447265625" />
            <Forward x="-0.269789934" y="-0.96271193" z="0.0199692529" />
            <Up x="-0.219518423" y="0.0816837251" z="0.972182631" />
            <Orientation>
              <X>0.0134393238</X>
              <Y>0.7140056</Y>
              <Z>0.6774789</Z>
              <W>0.176175281</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>130364558303498688</EntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="0.00329757342" y="0.000954546034" z="-0.009455383" />
          <AngularVelocity x="-0.00240095239" y="0.0162259489" z="0.0008210883" />
          <DisplayName>Small Grid 5869</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>136632362913599201</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="4.1707763671875" y="-6.2998046875" z="2.88623046875" />
            <Forward x="-0.269227117" y="-0.962866068" z="0.02013728" />
            <Up x="-0.21961531" y="0.08173832" z="0.9721563" />
            <Orientation>
              <X>0.0131965838</X>
              <Y>0.714068949</Y>
              <Z>0.6774634</Z>
              <W>0.175996125</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>124112850707169742</EntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <Skeleton>
            <BoneInfo>
              <BonePosition x="3" y="2" z="1" />
              <BoneOffset x="106" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="0" />
              <BoneOffset x="113" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="3" />
              <BoneOffset x="94" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="2" />
              <BoneOffset x="99" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="5" />
              <BoneOffset x="108" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="4" />
              <BoneOffset x="101" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="0" />
              <BoneOffset x="119" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="1" />
              <BoneOffset x="114" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="2" />
              <BoneOffset x="109" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="3" />
              <BoneOffset x="107" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="4" />
              <BoneOffset x="111" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="5" />
              <BoneOffset x="115" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="3" z="3" />
              <BoneOffset x="90" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="3" z="2" />
              <BoneOffset x="93" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="3" z="1" />
              <BoneOffset x="101" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="3" z="0" />
              <BoneOffset x="110" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="3" z="5" />
              <BoneOffset x="103" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="3" z="4" />
              <BoneOffset x="95" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="3" z="2" />
              <BoneOffset x="84" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="3" z="3" />
              <BoneOffset x="80" y="124" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="3" z="0" />
              <BoneOffset x="105" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="3" z="1" />
              <BoneOffset x="94" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="1" z="1" />
              <BoneOffset x="101" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="3" z="4" />
              <BoneOffset x="86" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="1" z="0" />
              <BoneOffset x="110" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="3" z="5" />
              <BoneOffset x="97" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="1" z="3" />
              <BoneOffset x="90" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="1" z="2" />
              <BoneOffset x="93" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="1" z="5" />
              <BoneOffset x="103" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="5" />
              <BoneOffset x="116" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="1" z="4" />
              <BoneOffset x="95" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="4" />
              <BoneOffset x="112" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="3" />
              <BoneOffset x="110" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="2" />
              <BoneOffset x="111" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="1" />
              <BoneOffset x="115" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="0" />
              <BoneOffset x="119" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="1" z="0" />
              <BoneOffset x="105" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="1" z="1" />
              <BoneOffset x="94" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="1" z="2" />
              <BoneOffset x="84" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="1" z="3" />
              <BoneOffset x="80" y="124" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="1" z="4" />
              <BoneOffset x="86" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="4" />
              <BoneOffset x="104" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="1" z="5" />
              <BoneOffset x="97" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="5" />
              <BoneOffset x="110" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="2" />
              <BoneOffset x="102" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="5" />
              <BoneOffset x="116" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="3" />
              <BoneOffset x="99" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="4" />
              <BoneOffset x="113" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="0" />
              <BoneOffset x="114" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="1" />
              <BoneOffset x="108" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="1" />
              <BoneOffset x="115" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="0" />
              <BoneOffset x="119" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="3" />
              <BoneOffset x="111" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="2" />
              <BoneOffset x="112" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="4" />
              <BoneOffset x="104" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="5" />
              <BoneOffset x="110" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="0" />
              <BoneOffset x="115" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="1" />
              <BoneOffset x="108" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="2" />
              <BoneOffset x="103" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="3" />
              <BoneOffset x="101" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="2" z="5" />
              <BoneOffset x="94" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="2" z="4" />
              <BoneOffset x="81" y="124" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="2" z="3" />
              <BoneOffset x="69" y="124" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="2" z="2" />
              <BoneOffset x="78" y="124" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="2" z="1" />
              <BoneOffset x="91" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="2" z="4" />
              <BoneOffset x="91" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="2" z="0" />
              <BoneOffset x="103" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="2" z="5" />
              <BoneOffset x="101" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="2" z="2" />
              <BoneOffset x="88" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="2" z="3" />
              <BoneOffset x="82" y="124" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="2" z="0" />
              <BoneOffset x="108" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="2" z="1" />
              <BoneOffset x="98" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="0" z="5" />
              <BoneOffset x="104" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="0" z="4" />
              <BoneOffset x="96" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="0" z="1" />
              <BoneOffset x="102" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="0" z="4" />
              <BoneOffset x="103" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="0" z="0" />
              <BoneOffset x="111" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="0" z="5" />
              <BoneOffset x="109" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="0" z="3" />
              <BoneOffset x="93" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="5" y="0" z="2" />
              <BoneOffset x="95" y="125" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="0" z="0" />
              <BoneOffset x="114" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="0" z="1" />
              <BoneOffset x="107" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="3" />
              <BoneOffset x="107" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="0" z="2" />
              <BoneOffset x="101" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="2" />
              <BoneOffset x="108" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="4" y="0" z="3" />
              <BoneOffset x="100" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="1" />
              <BoneOffset x="112" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="0" />
              <BoneOffset x="118" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="2" />
              <BoneOffset x="115" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="3" />
              <BoneOffset x="115" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="5" />
              <BoneOffset x="114" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="0" />
              <BoneOffset x="121" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="4" />
              <BoneOffset x="109" y="126" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="1" />
              <BoneOffset x="118" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="4" />
              <BoneOffset x="116" y="127" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="5" />
              <BoneOffset x="119" y="127" z="127" />
            </BoneInfo>
          </Skeleton>
          <LinearVelocity x="-0.001708325" y="0.00587809458" z="0.0110469982" />
          <AngularVelocity x="-0.0045389086" y="0.0035346956" z="-0.004806265" />
          <DisplayName>Small Grid 5404</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>46</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>92430427240397753</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="5.2073974609375" y="-5.6064453125" z="0.2333984375" />
            <Forward x="0.269360572" y="0.9628294" z="-0.020097442" />
            <Up x="0.219571471" y="-0.08171909" z="-0.972167552" />
            <Orientation>
              <X>-0.176031023</X>
              <Y>-0.6774691</Y>
              <Z>0.7140538</Z>
              <W>0.013262134</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>133673045414651710</EntityId>
              <ColorMaskHSV x="0" y="-0.96" z="-0.22" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <Skeleton>
            <BoneInfo>
              <BonePosition x="1" y="0" z="4" />
              <BoneOffset x="174" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="0" z="0" />
              <BoneOffset x="160" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="0" z="1" />
              <BoneOffset x="170" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="0" z="2" />
              <BoneOffset x="177" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="0" z="3" />
              <BoneOffset x="180" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="0" z="4" />
              <BoneOffset x="176" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="0" z="5" />
              <BoneOffset x="167" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="1" />
              <BoneOffset x="164" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="0" />
              <BoneOffset x="157" y="143" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="3" />
              <BoneOffset x="175" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="2" />
              <BoneOffset x="171" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="5" />
              <BoneOffset x="162" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="2" z="4" />
              <BoneOffset x="169" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="0" />
              <BoneOffset x="162" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="1" />
              <BoneOffset x="172" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="2" />
              <BoneOffset x="182" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="3" />
              <BoneOffset x="188" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="4" />
              <BoneOffset x="179" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="2" z="5" />
              <BoneOffset x="169" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="3" z="5" />
              <BoneOffset x="176" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="3" z="4" />
              <BoneOffset x="187" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="3" z="3" />
              <BoneOffset x="194" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="3" z="2" />
              <BoneOffset x="190" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="3" z="1" />
              <BoneOffset x="179" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="3" z="0" />
              <BoneOffset x="167" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="5" />
              <BoneOffset x="167" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="4" />
              <BoneOffset x="175" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="3" />
              <BoneOffset x="180" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="2" />
              <BoneOffset x="177" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="1" />
              <BoneOffset x="169" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="1" z="0" />
              <BoneOffset x="160" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="3" z="4" />
              <BoneOffset x="184" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="3" z="5" />
              <BoneOffset x="173" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="3" z="2" />
              <BoneOffset x="186" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="1" z="5" />
              <BoneOffset x="175" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="3" z="3" />
              <BoneOffset x="190" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="1" z="4" />
              <BoneOffset x="186" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="3" z="0" />
              <BoneOffset x="164" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="3" z="1" />
              <BoneOffset x="176" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="1" z="1" />
              <BoneOffset x="179" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="1" z="0" />
              <BoneOffset x="166" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="1" z="3" />
              <BoneOffset x="193" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="1" z="2" />
              <BoneOffset x="189" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="4" />
              <BoneOffset x="166" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="5" />
              <BoneOffset x="160" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="2" />
              <BoneOffset x="167" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="5" />
              <BoneOffset x="167" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="3" />
              <BoneOffset x="169" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="4" />
              <BoneOffset x="175" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="0" />
              <BoneOffset x="155" y="143" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="1" z="1" />
              <BoneOffset x="162" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="1" />
              <BoneOffset x="169" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="0" />
              <BoneOffset x="160" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="1" z="4" />
              <BoneOffset x="184" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="3" />
              <BoneOffset x="180" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="1" z="5" />
              <BoneOffset x="174" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="3" z="2" />
              <BoneOffset x="177" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="1" z="0" />
              <BoneOffset x="165" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="1" z="1" />
              <BoneOffset x="176" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="1" z="2" />
              <BoneOffset x="186" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="1" z="3" />
              <BoneOffset x="190" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="4" />
              <BoneOffset x="166" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="5" />
              <BoneOffset x="160" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="0" />
              <BoneOffset x="155" y="143" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="1" />
              <BoneOffset x="162" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="2" />
              <BoneOffset x="168" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="3" z="3" />
              <BoneOffset x="171" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="2" z="3" />
              <BoneOffset x="201" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="2" z="2" />
              <BoneOffset x="192" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="2" z="1" />
              <BoneOffset x="179" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="2" z="0" />
              <BoneOffset x="167" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="2" z="2" />
              <BoneOffset x="196" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="2" z="3" />
              <BoneOffset x="206" y="147" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="2" z="5" />
              <BoneOffset x="176" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="2" z="0" />
              <BoneOffset x="169" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="2" z="4" />
              <BoneOffset x="189" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="2" z="1" />
              <BoneOffset x="182" y="145" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="2" z="4" />
              <BoneOffset x="192" y="146" z="126" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="0" y="2" z="5" />
              <BoneOffset x="178" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="3" />
              <BoneOffset x="162" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="2" />
              <BoneOffset x="161" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="1" />
              <BoneOffset x="157" y="143" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="0" />
              <BoneOffset x="152" y="143" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="2" />
              <BoneOffset x="168" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="5" />
              <BoneOffset x="156" y="143" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="3" />
              <BoneOffset x="170" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="3" y="0" z="4" />
              <BoneOffset x="160" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="0" />
              <BoneOffset x="155" y="143" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="1" />
              <BoneOffset x="163" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="0" z="1" />
              <BoneOffset x="169" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="4" />
              <BoneOffset x="167" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="0" z="0" />
              <BoneOffset x="159" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="2" y="0" z="5" />
              <BoneOffset x="161" y="144" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="0" z="3" />
              <BoneOffset x="178" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="0" z="2" />
              <BoneOffset x="176" y="145" z="127" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="0" z="5" />
              <BoneOffset x="167" y="144" z="127" />
            </BoneInfo>
          </Skeleton>
          <LinearVelocity x="-0.007002875" y="-0.0156731158" z="0.006512165" />
          <AngularVelocity x="-0.007589171" y="-0.00464633061" z="-0.004040187" />
          <DisplayName>Small Grid 835</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
      </CubeGrids>
    </Prefab>
  </Prefabs>
</Definitions>
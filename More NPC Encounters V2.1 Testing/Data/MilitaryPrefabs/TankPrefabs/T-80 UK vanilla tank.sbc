<?xml version="1.0"?>
<Definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Prefabs>
    <Prefab xsi:type="MyObjectBuilder_PrefabDefinition">
      <Id Type="MyObjectBuilder_PrefabDefinition" Subtype="T-80 UK vanilla tank" />
      <CubeGrids>
        <CubeGrid>
          <SubtypeName />
          <EntityId>120263666416947497</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="0" y="0" z="0" />
            <Forward x="-0.5206449" y="0.7905349" z="-0.322464466" />
            <Up x="0.671468437" y="0.612416565" z="0.417224228" />
            <Orientation>
              <X>0.384848028</X>
              <Y>0.436646074</Y>
              <Z>-0.2137376</Z>
              <W>0.784568965</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
              <EntityId>73798704697666123</EntityId>
              <Min x="45" y="-1" z="-3" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>50</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                            <SubtypeName>Uranium</SubtypeName>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Reactor</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Inventory>
                <Items>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>50</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_Ingot">
                      <SubtypeName>Uranium</SubtypeName>
                    </PhysicalContent>
                    <ItemId>0</ItemId>
                  </MyObjectBuilder_InventoryItem>
                </Items>
                <nextItemId>1</nextItemId>
                <Volume>0.125</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="51" y="0" z="-4" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="48" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="47" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
              <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
              <EntityId>108934167349038992</EntityId>
              <Min x="55" y="-1" z="-4" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>T-80 UK</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <BroadcastRadius>8500</BroadcastRadius>
              <ShowShipName>false</ShowShipName>
              <EnableBroadcasting>true</EnableBroadcasting>
              <AttachedPB>0</AttachedPB>
              <IgnoreAllied>false</IgnoreAllied>
              <IgnoreOther>true</IgnoreOther>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3mirrored</SubtypeName>
              <EntityId>91957288987174086</EntityId>
              <Min x="49" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <CustomName>Wheel Suspension 3x3 Left 5</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>80704173249374633</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>0.306018829</Strength>
              <Propulsion>false</Propulsion>
              <Friction>0.219650835</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0</MaxSteerAngle>
              <SteerSpeed>0</SteerSpeed>
              <SteerReturnSpeed>0</SteerReturnSpeed>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SuspensionTravel>0.402135044</SuspensionTravel>
              <SpeedLimit>250.092712</SpeedLimit>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3mirrored</SubtypeName>
              <EntityId>85270627907054157</EntityId>
              <Min x="45" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
              <CustomName>Wheel Suspension 3x3 Left 6</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>124416938539352175</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>0.306018829</Strength>
              <Propulsion>false</Propulsion>
              <Friction>0.219650835</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0</MaxSteerAngle>
              <SteerSpeed>0</SteerSpeed>
              <SteerReturnSpeed>0</SteerReturnSpeed>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SuspensionTravel>0.402135044</SuspensionTravel>
              <SpeedLimit>250.092712</SpeedLimit>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3mirrored</SubtypeName>
              <EntityId>82722502594628749</EntityId>
              <Min x="53" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <CustomName>Wheel Suspension 3x3 Left 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>76679686935020835</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>0.306018829</Strength>
              <Propulsion>false</Propulsion>
              <Friction>0.219650835</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0</MaxSteerAngle>
              <SteerSpeed>0</SteerSpeed>
              <SteerReturnSpeed>0</SteerReturnSpeed>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SuspensionTravel>0.402135044</SuspensionTravel>
              <SpeedLimit>250.092712</SpeedLimit>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>103394600491645425</EntityId>
              <Min x="55" y="-1" z="-2" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>TBmain</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>RunWithDefaultArgument</Action>
                      <BlockEntityId>130995835371078773</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>RunWithDefaultArgument</Action>
                      <BlockEntityId>114727043854058991</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>RunWithDefaultArgument</Action>
                      <BlockEntityId>112115762575610756</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>RunWithDefaultArgument</Action>
                      <BlockEntityId>94390896013924080</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>RunWithDefaultArgument</Action>
                      <BlockEntityId>114133199966191645</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>RunWithDefaultArgument</Action>
                      <BlockEntityId>86861820172540723</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Start</Action>
                      <BlockEntityId>103394600491645425</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>103394600491645425</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <JustTriggered>false</JustTriggered>
              <Delay>1100</Delay>
              <CurrentTime>50</CurrentTime>
              <IsCountingDown>true</IsCountingDown>
              <Silent>true</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>81985399196259809</EntityId>
              <Min x="49" y="-1" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <CustomName>Wheel Suspensions 8</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>117304096015930550</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>0.306018829</Strength>
              <Propulsion>false</Propulsion>
              <Friction>0.219650835</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0</MaxSteerAngle>
              <SteerSpeed>0</SteerSpeed>
              <SteerReturnSpeed>0</SteerReturnSpeed>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SuspensionTravel>0.402135044</SuspensionTravel>
              <SpeedLimit>250.092712</SpeedLimit>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>134877668571731446</EntityId>
              <Min x="45" y="-1" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <CustomName>Wheel Suspensions 9</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>118798254609943550</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>0.306018829</Strength>
              <Propulsion>false</Propulsion>
              <Friction>0.219650835</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0</MaxSteerAngle>
              <SteerSpeed>0</SteerSpeed>
              <SteerReturnSpeed>0</SteerReturnSpeed>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SuspensionTravel>0.402135044</SuspensionTravel>
              <SpeedLimit>250.092712</SpeedLimit>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="56" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="56" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>130995835371078773</EntityId>
              <Min x="46" y="-1" z="-2" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>PBauromatic turret control</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>/* 
/// Whip's Turret Slaver v49 /// - revision: 11/17/17  
-------------------------------------------------------------------------------- 
================README================== 
-------------------------------------------------------------------------------- 
It is recommended that you read all the instructions before attempting  
to use this code! This will make troubleshooting any issues much easier &lt;3 
 
---------------------------------------------------------------- 
/// Script Setup /// 
---------------------------------------------------------------- 
    1) Place this script in a program block 
    2) Make a timer with the following actions: 
        - "Start" itself 
        - "Trigger Now itself 
        - "Run with default argument" this program 
    3) Start the timer 
    4) Set up turret groups (see below sections) 
 
    DON'T FORGET TO SET YOUR ROTOR LIMITS! 
 
    (Optional): You can adjust the variables at the top of the code 
    if you dislike my default settings. I've found these values to 
    be sufficient for vanilla weapons :) 
 
---------------------------------------------------------------- 
/// Turret Group Names /// 
---------------------------------------------------------------- 
    Turret groups must be named like the following: 
 
        "Turret Group &lt;ID&gt;" 
 
    Where &lt;ID&gt; is the unique identification tag of the turret. 
 
    Example Turret Group Names: 
        - Turret Group 1 
        - Turret Group WhiplashIsAwesome 
        - Turret Group SamIsACow 
        - Turret Group 1A 
 
---------------------------------------------------------------- 
/// Turret Group Components /// 
---------------------------------------------------------------- 
    EACH turret group must have: 
    - One designator turret with "Designator" in its name 
    - One azimuthal (horizontal) rotor with "Azimuth" in its name 
    - One or Two elevation (vertical) rotor(s) with "Elevation" in its name 
    - At least one weapon ot tool (any name you desire) 
        can be a rocket launcher, gatling gun, camera, welder, grinder, or spotlight  
 
    (Names dont matter beyond what is required) 
 
---------------------------------------------------------------- 
/// Code Arguments (Optional) /// 
---------------------------------------------------------------- 
    Run the program ONCE with the following arguments if you desire 
 
    reset_targeting : Resets targeting of all non-designator turrets 
 
 
---------------------------------------------------------------- 
/// Whip's Notes /// 
---------------------------------------------------------------- 
Post any questions, suggestions, or issues you have on the workshop page :D 
 
Code by Whiplash141 
*/ 
 
//============================================================= 
//You can change these variables if you really want to. 
//You do not need to if you just want to use the vanilla script. 
//============================================================= 
 
//Base name tag of turret groups 
const string rotorTurretGroupNameTag = "Turret Group"; 
const string aiTurretGroupNameTag = "Slaved Group"; 
 
//These are the required block name tags in a turret group 
const string elevationRotorName = "Elevation"; //name of elevation (vertical) rotor for specific turret 
const string azimuthRotorName = "Azimuth"; //name of azimuth (horizontal) rotor for specific turret 
const string designatorName = "Designator"; //name of the designator turret for specific group 
 
//Angle that the turret will fire on if target is within this angle from the front of it 
const double toleranceAngle = 5; 
 
//Velocity of the projectiles that this code will fire 
const double defaultProjectileSpeed = 400;  
 
//Controls the speed of rotation; you probably shouldn't touch this 
const double rotationSpeedScalingFactor = 50; 
 
//this is the distance that the turret will focus on IFF manually controlling the turret 
double convergenceRange = 400; 
 
//////////////////////////////////////////////////// 
//================================================= 
//No touchey anything below here 
//================================================= 
//////////////////////////////////////////////////// 
 
double timeElapsed = 0; 
double timeSinceLastRun = 0; 
 
IMyMotorStator elevationRotor; 
List&lt;IMyMotorStator&gt; additionalElevationRotors = new List&lt;IMyMotorStator&gt;(); 
IMyMotorStator azimuthRotor; 
IMyLargeTurretBase designator; 
List&lt;IMyTerminalBlock&gt; allWeaponsAndTools = new List&lt;IMyTerminalBlock&gt;(); 
List&lt;IMyTerminalBlock&gt; primaryWeaponsAndTools = new List&lt;IMyTerminalBlock&gt;(); 
List&lt;IMyTerminalBlock&gt; additionalWeaponsAndTools = new List&lt;IMyTerminalBlock&gt;(); 
List&lt;IMyTerminalBlock&gt; slavedTurrets = new List&lt;IMyTerminalBlock&gt;(); 
 
const double rad2deg = 180 / Math.PI; 
 
const double updatesPerSecond = 10; 
const double timeMax = 1 / updatesPerSecond; 
double toleranceDotProduct = Math.Cos(toleranceAngle * Math.PI / 180); 
 
string[] targetStatus = new string[] { "targeting", "idle" }; 
 
Vector3D lastGridPosition = Vector3D.Zero; 
Vector3D gridVelocity = Vector3D.Zero; 
 
Program() 
{ 
    Runtime.UpdateFrequency = UpdateFrequency.Update1; 
} 
 
void Main(string arg, UpdateType updateType) 
{ 
    switch (arg.ToLower()) 
    { 
        case "reset_targeting": 
            ResetTurretTargeting(); 
            break; 
 
        default: 
            break; 
    } 
 
    if ((updateType &amp; UpdateType.Update1) != 0) 
    { 
        timeSinceLastRun = 1.0 / 60.0; 
        timeElapsed += timeSinceLastRun; 
 
        var currentGridPosition = Me.CubeGrid.GetPosition(); 
        gridVelocity = (currentGridPosition - lastGridPosition) * 60.0; 
        lastGridPosition = currentGridPosition; 
    } 
 
    //convergenceRange = WeaponSweep(); //run weapon sweeep method 
 
    if (timeElapsed &gt;= timeMax) 
    { 
        Echo("WMI Turret Control\nSystems Online... " + RunningSymbol()); 
 
        List&lt;IMyBlockGroup&gt; groups = new List&lt;IMyBlockGroup&gt;(); 
        List&lt;IMyBlockGroup&gt; rotorTurretGroups = new List&lt;IMyBlockGroup&gt;(); 
        List&lt;IMyBlockGroup&gt; aiTurretGroups = new List&lt;IMyBlockGroup&gt;(); 
 
        GridTerminalSystem.GetBlockGroups(groups); 
 
        foreach (IMyBlockGroup thisGroup in groups) 
        { 
            if (thisGroup.Name.ToLower().Contains(aiTurretGroupNameTag.ToLower())) 
            { 
                aiTurretGroups.Add(thisGroup); 
            } 
            else if (thisGroup.Name.ToLower().Contains(rotorTurretGroupNameTag.ToLower())) 
            { 
                rotorTurretGroups.Add(thisGroup); 
            } 
        } 
 
        if (rotorTurretGroups.Count == 0 &amp;&amp; aiTurretGroups.Count == 0) 
        { 
            Echo("\nRotor Turret List:"); 
            Echo("No rotor turret groups found"); 
            Echo("\nAI Turret Group List:"); 
            Echo("No AI turret groups found"); 
            return; 
        } 
 
        //Ai turret group handling 
        #region ai_turrets 
        Echo("\nAI Turret Group List:"); 
        if (aiTurretGroups.Count == 0) 
        { 
            Echo("No AI turret groups found"); 
        } 
 
        foreach (IMyBlockGroup thisGroup in aiTurretGroups) 
        { 
            Echo($"------------------------\nGroup: '{thisGroup.Name}'"); 
            var blockList = new List&lt;IMyTerminalBlock&gt;(); 
            thisGroup.GetBlocks(blockList); 
            bool isSetup = GrabBlocksAI(blockList); 
 
            if (!isSetup) 
            { 
                ShootWeapons(slavedTurrets, false); //force shooting off 
                continue; 
            } 
            //implied else 
 
            //guide on target 
            if (designator.IsUnderControl || designator.HasTarget) 
            { 
                SlavedTurretControl(); 
                Echo($"Turret is {targetStatus[0]}"); 
            } 
            else 
            { 
                ShootWeapons(slavedTurrets, false); //force shooting off 
                Echo($"Turret is {targetStatus[1]}"); 
            } 
        } 
        #endregion 
 
        //Rotor turret group handling 
        #region rotor_turrets 
        Echo("\nRotor Turret List:"); 
        if (rotorTurretGroups.Count == 0) 
        { 
            Echo("No rotor turret groups found"); 
        } 
 
        foreach (IMyBlockGroup thisGroup in rotorTurretGroups) 
        { 
            Echo($"------------------------\nGroup: '{thisGroup.Name}'"); 
 
            bool setupError = GrabBlocks(thisGroup); 
 
            if (setupError) 
            { 
                StopRotorMovement(); 
                continue; 
            } 
            //implied else 
 
            //guide on target 
            if (designator.IsUnderControl || designator.HasTarget) 
            { 
                RotorControl(thisGroup); 
                Echo($"Turret is {targetStatus[0]}"); 
            } 
            else 
            { 
                StopRotorMovement(); 
                ShootWeapons(allWeaponsAndTools, false); 
                ReturnToEquillibrium(); 
                Echo($"Turret is {targetStatus[1]}"); 
            } 
        } 
        #endregion 
 
        //reset time count 
        timeElapsed = 0; 
        rotorTurretGroups.Clear(); 
    } 
} 
 
void ResetTurretTargeting() 
{ 
    var allTurrets = new List&lt;IMyLargeTurretBase&gt;(); 
    GridTerminalSystem.GetBlocksOfType(allTurrets); 
    foreach (IMyLargeTurretBase thisTurret in allTurrets) 
    { 
        thisTurret.ResetTargetingToDefault(); 
        thisTurret.ApplyAction("Shoot_Off"); 
        thisTurret.EnableIdleRotation = true; 
        thisTurret.SetValue("Range", float.MaxValue); 
    } 
} 
 
Vector3D GetAverageWeaponPosition(List&lt;IMyTerminalBlock&gt; weapons) 
{ 
    Vector3D positionSum = Vector3D.Zero; 
 
    if (weapons.Count == 0) 
        return positionSum; 
 
    foreach (var block in weapons) 
    { 
        positionSum += block.GetPosition(); 
    } 
 
    return positionSum / weapons.Count; 
} 
 
Vector3D GetTargetPoint(Vector3D shooterPosition, IMyLargeTurretBase designator, double projectileVelocity = defaultProjectileSpeed) 
{ 
    //get designator position 
    Vector3D designatorPos = designator.GetPosition(); 
 
    //get vector where designator is pointing 
    double designatorAzimuth = designator.Azimuth; 
    double designatorElevation = designator.Elevation; 
 
    Vector3D targetVec = Vector3D.Zero; 
    if (designator.IsUnderControl) 
    { 
        targetVec = designatorPos + VectorAzimuthElevation(designator) * convergenceRange; 
    } 
    else if (designator.HasTarget) //if designator has target 
    { 
        var targetInfo = designator.GetTargetedEntity(); 
        targetVec = CalculateProjectileIntercept(projectileVelocity, gridVelocity, shooterPosition, targetInfo.Velocity, targetInfo.Position); 
    } 
 
    return targetVec; 
} 
 
// Whip's CalculateProjectileIntercept method v2 - 8/2/17 // 
Vector3D CalculateProjectileIntercept(double projectileSpeed, Vector3D shooterVelocity, Vector3D shooterPosition, Vector3D targetVelocity, Vector3D targetPos) 
{ 
    var directHeading = targetPos - shooterPosition; 
    var directHeadingNorm = Vector3D.Normalize(directHeading); 
 
    var relativeVelocity = targetVelocity - shooterVelocity; 
 
    var parallelVelocity = relativeVelocity.Dot(directHeadingNorm) * directHeadingNorm; 
    var normalVelocity = relativeVelocity - parallelVelocity; 
 
    var diff = projectileSpeed * projectileSpeed - normalVelocity.LengthSquared(); 
    if (diff &lt; 0) 
    { 
        return targetPos; 
    } 
 
    return Math.Sqrt(diff) * directHeadingNorm + normalVelocity + shooterPosition; 
} 
 
double GetProjectileVelocity(IMyTerminalBlock block) 
{ 
    if (block is IMyLargeGatlingTurret || block is IMySmallGatlingGun) 
        return 400; 
    else if (block is IMyLargeInteriorTurret) 
        return 300; 
    else if (block is IMyLargeMissileTurret || block is IMySmallMissileLauncher) 
        return 200; 
    else 
        return defaultProjectileSpeed; 
} 
 
bool GrabBlocks(IMyBlockGroup thisGroup) 
{ 
    var blocks = new List&lt;IMyTerminalBlock&gt;(); 
    thisGroup.GetBlocks(blocks); 
 
    elevationRotor = null; 
    additionalElevationRotors.Clear(); 
    azimuthRotor = null; 
    designator = null; 
    allWeaponsAndTools.Clear(); 
    primaryWeaponsAndTools.Clear(); 
    additionalWeaponsAndTools.Clear(); 
 
    foreach (IMyTerminalBlock thisBlock in blocks) 
    { 
        if (IsWeaponOrTool(thisBlock)) 
            allWeaponsAndTools.Add(thisBlock); 
 
        if (thisBlock is IMyMotorStator) 
        { 
            if (thisBlock.CustomName.ToLower().Contains(elevationRotorName.ToLower())) 
            { 
                if (elevationRotor == null) //grabs parent elevation rotor first 
                { 
                    var thisRotor = thisBlock as IMyMotorStator; 
 
                    if (thisRotor.IsAttached &amp;&amp; thisRotor.IsFunctional) //checks if elevation rotor is attached 
                    { 
                        thisGroup.GetBlocks(primaryWeaponsAndTools, block =&gt; block.CubeGrid == thisRotor.TopGrid &amp;&amp; IsWeaponOrTool(block)); 
                    } 
                    if (primaryWeaponsAndTools.Count != 0) 
                        elevationRotor = thisRotor; 
                    else 
                        additionalElevationRotors.Add(thisRotor); 
                } 
                else //then grabs any other elevation rotors it finds 
                    additionalElevationRotors.Add(thisBlock as IMyMotorStator); 
            } 
            else if (thisBlock.CustomName.ToLower().Contains(azimuthRotorName.ToLower())) 
            { 
                azimuthRotor = thisBlock as IMyMotorStator; 
            } 
        } 
        else if (thisBlock is IMyLargeTurretBase &amp;&amp; thisBlock.CustomName.ToLower().Contains(designatorName.ToLower())) //grabs ship controller 
        { 
            designator = thisBlock as IMyLargeTurretBase; 
        } 
    } 
 
    if (elevationRotor != null &amp;&amp; elevationRotor.IsAttached) //grabs weapons on elevation turret's rotor head grid 
    { 
        thisGroup.GetBlocks(primaryWeaponsAndTools, block =&gt; block.CubeGrid == elevationRotor.TopGrid &amp;&amp; IsWeaponOrTool(block)); 
    } 
 
    bool noErrors = true; 
    if (designator == null &amp;&amp; azimuthRotor != null) //first null check for designator 
    { 
        //grabs closest designator to the turret base 
        designator = GetClosestTargetingTurret(designatorName, azimuthRotor); 
    } 
 
    if (designator == null) //second null check (if STILL null) 
    { 
        Echo($"Error: No designator turret found for group '{thisGroup.Name}'"); 
        noErrors = false; 
    } 
 
    if (primaryWeaponsAndTools.Count == 0) 
    { 
        Echo("Error: No weapons or tools"); 
        noErrors = false; 
    } 
 
    if (azimuthRotor == null) 
    { 
        Echo("Error: No azimuth rotor"); 
        noErrors = false; 
    } 
 
    if (elevationRotor == null) 
    { 
        Echo("Error: No elevation rotor"); 
        noErrors = false; 
    } 
     
    var num = elevationRotor == null ? 0 : 1; 
    Echo($"Elevation rotors: {additionalElevationRotors.Count + num}"); 
 
    return !noErrors; 
} 
 
bool IsWeaponOrTool(IMyTerminalBlock block) 
{ 
    if (block is IMyUserControllableGun &amp;&amp; !(block is IMyLargeTurretBase)) 
    { 
        return true; 
    } 
    else if (block is IMyShipToolBase) 
    { 
        return true; 
    } 
    else if (block is IMyLightingBlock) 
    { 
        return true; 
    } 
    else if (block is IMyCameraBlock) 
    { 
        return true; 
    } 
    else 
    { 
        return false; 
    } 
} 
 
void RotorControl(IMyBlockGroup thisGroup) 
{ 
    //get orientation of reference 
    IMyTerminalBlock turretReference = primaryWeaponsAndTools[0]; 
 
    Vector3D turretFrontVec = turretReference.WorldMatrix.Forward; 
    Vector3D absUpVec = azimuthRotor.WorldMatrix.Up; 
    Vector3D turretSideVec = elevationRotor.WorldMatrix.Up; 
    Vector3D turretFrontCrossSide = turretFrontVec.Cross(turretSideVec); 
 
    //check elevation rotor orientation w.r.t. reference 
    Vector3D turretUpVec; 
    Vector3D turretLeftVec; 
    if (absUpVec.Dot(turretFrontCrossSide) &gt;= 0) 
    { 
        turretUpVec = turretFrontCrossSide; 
        turretLeftVec = turretSideVec; 
    } 
    else 
    { 
        turretUpVec = -1 * turretFrontCrossSide; 
        turretLeftVec = -1 * turretSideVec; 
    } 
 
    var shooterPosition = GetAverageWeaponPosition(allWeaponsAndTools); 
    var targetPointVec = GetTargetPoint(shooterPosition, designator, GetProjectileVelocity(allWeaponsAndTools[0])); 
 
    //get vector to target point 
    Vector3D referenceToTargetVec = targetPointVec - shooterPosition; 
 
    var baseUp = absUpVec; 
    var baseLeft = baseUp.Cross(turretFrontVec); 
    var baseForward = baseLeft.Cross(baseUp); 
 
    double desiredAzimuthAngle, desiredElevationAngle, currentAzimuthAngle, currentElevationAngle, azimuthAngle, elevationAngle; 
 
    GetRotationAngles(referenceToTargetVec, baseForward, baseLeft, baseUp, out desiredAzimuthAngle, out desiredElevationAngle); 
    GetRotationAngles(turretFrontVec, baseForward, baseLeft, baseUp, out currentAzimuthAngle, out currentElevationAngle); 
 
    azimuthAngle = desiredAzimuthAngle - currentAzimuthAngle; 
    elevationAngle = desiredElevationAngle - currentElevationAngle; 
 
    if (absUpVec.Dot(turretFrontCrossSide) &gt;= 0) 
    { 
        elevationAngle *= -1; 
    } 
 
    double azimuthSpeed = rotationSpeedScalingFactor * azimuthAngle; //derivitave term is useless as rotors dampen by default 
    double elevationSpeed = rotationSpeedScalingFactor * elevationAngle; 
 
    //control rotors  
    azimuthRotor.SetValue("Velocity", -(float)azimuthSpeed); //negative because we want to cancel the positive angle via our movements 
    elevationRotor.SetValue("Velocity", -(float)elevationSpeed); 
 
    //calculate deviation angle 
    double deviationAngle = VectorAngleBetween(turretFrontVec, referenceToTargetVec); 
    WeaponControl(deviationAngle, designator, primaryWeaponsAndTools); 
 
    //Check opposite elevation rotor 
    if (additionalElevationRotors.Count != 0) 
    { 
        foreach (var additionalElevationRotor in additionalElevationRotors) //Determine how to move opposite elevation rotor (if any) 
        { 
            if (!additionalElevationRotor.IsAttached) //checks if opposite elevation rotor is attached 
            { 
                Echo($"Warning: No rotor head for additional elevation\nrotor named '{additionalElevationRotor.CustomName}'\nSkipping this rotor..."); 
                continue; 
            } 
 
            thisGroup.GetBlocks(additionalWeaponsAndTools, block =&gt; block.CubeGrid == additionalElevationRotor.TopGrid &amp;&amp; IsWeaponOrTool(block)); 
 
            if (additionalWeaponsAndTools.Count == 0) 
            { 
                Echo($"Warning: No weapons or tools for additional elevation\nrotor named '{additionalElevationRotor.CustomName}'\nSkipping this rotor..."); 
                continue; 
            } 
 
            var oppositeFrontVec = additionalWeaponsAndTools[0].WorldMatrix.Forward; 
 
            float multiplier = Math.Sign(additionalElevationRotor.WorldMatrix.Up.Dot(elevationRotor.WorldMatrix.Up)); 
 
            var diff = (float)VectorAngleBetween(oppositeFrontVec, turretFrontVec) * Math.Sign(oppositeFrontVec.Dot(turretFrontCrossSide)) * 100; 
            additionalElevationRotor.SetValue("Velocity", (float)elevationSpeed + diff); 
 
            WeaponControl(deviationAngle, designator, additionalWeaponsAndTools); //use same deviation angle b/c im assuming that it will be close 
        } 
    } 
} 
 
bool GrabBlocksAI(List&lt;IMyTerminalBlock&gt; blocks) 
{ 
    designator = null; 
    slavedTurrets.Clear(); 
 
    foreach (IMyTerminalBlock thisBlock in blocks) 
    { 
        if (thisBlock is IMyLargeTurretBase) 
        { 
            if (thisBlock.CustomName.Contains(designatorName)) 
            { 
                designator = thisBlock as IMyLargeTurretBase; //grabs designator turret 
            } 
            else 
            { 
                var turret = thisBlock as IMyLargeTurretBase; 
                turret.SetValue("Range", 1f); 
 
                if (turret.EnableIdleRotation) 
                    turret.EnableIdleRotation = false; 
 
                slavedTurrets.Add(turret); 
            } 
        } 
    } 
 
    bool setupError = false; 
    if (slavedTurrets.Count == 0) 
    { 
        Echo($"Error: No slaved AI turrets found"); 
        setupError = true; 
    } 
 
    if (designator == null &amp;&amp; slavedTurrets.Count &gt; 0) //first null check 
    { 
        //grabs closest designator to the slaved turret group 
        designator = GetClosestTargetingTurret(designatorName, slavedTurrets[0]); 
    } 
 
    if (designator == null) //second null check (If STILL null) 
    { 
        Echo($"Error: No designator turret found"); 
        setupError = true; 
    } 
 
    return !setupError; 
} 
 
void SlavedTurretControl() 
{ 
    //control AI turrets (if any) 
    //aim all slaved turrets at target point 
    foreach (IMyLargeTurretBase thisTurret in slavedTurrets) 
    { 
        var targetPointVec = GetTargetPoint(thisTurret.GetPosition(), designator, GetProjectileVelocity(thisTurret)); 
         
        //This shit broke yo 
        thisTurret.SetTarget(targetPointVec); 
        var turretMatrix = thisTurret.WorldMatrix; 
        Vector3D turretDirection = VectorAzimuthElevation(thisTurret); 
        var normalizedTargetDirection = Vector3D.Normalize(targetPointVec - turretMatrix.Translation); 
         
        /* 
        double azimuth = 0; double elevation = 0; 
        GetRotationAngles(normalizedTargetDirection, turretMatrix.Forward, turretMatrix.Left, turretMatrix.Up, out azimuth, out elevation); 
        thisTurret.Azimuth = (float)azimuth; 
        thisTurret.Elevation = (float)elevation; 
        SyncTurretAngles(thisTurret); 
        */ 
         
 
        if (turretDirection.Dot(normalizedTargetDirection) &gt;= toleranceDotProduct) 
        { 
            if (designator.IsShooting || (designator.HasTarget &amp;&amp; !designator.IsUnderControl)) 
            { 
                thisTurret.ApplyAction("Shoot_On"); 
                thisTurret.ApplyAction("ShootOnce"); //Had to add this or the guns wont shoot... 
            } 
            else 
                thisTurret.ApplyAction("Shoot_Off"); 
        } 
        else 
        { 
            thisTurret.ApplyAction("Shoot_Off"); 
        } 
    } 
} 
 
void ReturnToEquillibrium() 
{ 
    if (azimuthRotor != null &amp;&amp; azimuthRotor.LowerLimitRad &gt; -MathHelper.TwoPi &amp;&amp; azimuthRotor.UpperLimitRad &lt; MathHelper.TwoPi) 
    { 
        double avgAzimuth = (azimuthRotor.LowerLimitRad + azimuthRotor.UpperLimitRad) / 2; 
        double azimuthVelocity = (avgAzimuth - azimuthRotor.Angle) * rotationSpeedScalingFactor / 10; 
        azimuthRotor.TargetVelocityRPM = (float)azimuthVelocity; 
    } 
    else if (azimuthRotor != null) 
    { 
        azimuthRotor.TargetVelocityRPM = 0f; 
    } 
 
    if (elevationRotor != null &amp;&amp; elevationRotor.LowerLimitRad &gt; -MathHelper.TwoPi &amp;&amp; elevationRotor.UpperLimitRad &lt; MathHelper.TwoPi) 
    { 
        double avgElevation = (elevationRotor.LowerLimitRad + elevationRotor.UpperLimitRad) / 2; 
        double elevationVelocity = (avgElevation - elevationRotor.Angle) * rotationSpeedScalingFactor / 10; 
        elevationRotor.TargetVelocityRPM = (float)elevationVelocity; 
    } 
    else if (elevationRotor != null) 
    { 
        elevationRotor.TargetVelocityRPM = 0f; 
    } 
 
    double avgOppositeElevation; 
    double additionalElevationVelocity; 
 
    foreach (var additionalElevationRotor in additionalElevationRotors) 
    { 
        if (additionalElevationRotor.LowerLimitRad &gt; -MathHelper.TwoPi &amp;&amp; additionalElevationRotor.UpperLimitRad &lt; MathHelper.TwoPi) 
        { 
            avgOppositeElevation = (additionalElevationRotor.LowerLimitRad + additionalElevationRotor.UpperLimitRad) / 2; 
            additionalElevationVelocity = (avgOppositeElevation - additionalElevationRotor.Angle) * rotationSpeedScalingFactor / 10; 
            additionalElevationRotor.TargetVelocityRPM = (float)additionalElevationVelocity; 
        } 
        else 
        { 
            additionalElevationRotor.TargetVelocityRPM = 0f; 
        } 
    } 
} 
 
void SyncTurretAngles(IMyLargeTurretBase turret) 
{ 
    turret.SyncAzimuth(); 
    turret.SyncElevation(); 
    turret.SyncEnableIdleRotation(); 
} 
 
void WeaponControl(double deviation, IMyLargeTurretBase designator, List&lt;IMyTerminalBlock&gt; weaponsAndTools) 
{ 
    if (designator.IsUnderControl &amp;&amp; designator.IsShooting) 
        ShootWeapons(weaponsAndTools, true); 
    else if (deviation * rad2deg &lt; toleranceAngle &amp;&amp; designator.HasTarget) //fires if in tolerance angle 
        ShootWeapons(weaponsAndTools, true); 
    else //doesnt fire if not in tolerance angle or designator isnt controlled 
        ShootWeapons(weaponsAndTools, false); 
} 
 
void ShootWeapons(List&lt;IMyTerminalBlock&gt; weaponList, bool shouldFire) 
{ 
    if (shouldFire) 
    { 
        for (int i = 0; i &lt; weaponList.Count; i++) 
        { 
            var weaponToShoot = weaponList[i] as IMyUserControllableGun; 
 
            weaponToShoot?.ApplyAction("Shoot_On"); 
            weaponToShoot?.ApplyAction("ShootOnce"); 
        } 
    } 
    else 
    { 
        for (int i = 0; i &lt; weaponList.Count; i++) 
        { 
            var weaponToShoot = weaponList[i] as IMyUserControllableGun; 
 
            weaponToShoot?.ApplyAction("Shoot_Off"); 
        } 
    } 
} 
 
void StopRotorMovement() 
{ 
    azimuthRotor?.SetValue("Velocity", 0f); 
    elevationRotor?.SetValue("Velocity", 0f); 
 
    foreach (var additionalElevationRotor in additionalElevationRotors) 
    { 
        additionalElevationRotor.TargetVelocityRPM = 0f; 
    } 
 
    for (int i = 0; i &lt; allWeaponsAndTools.Count; i++) 
    { 
        var thisWeapon = allWeaponsAndTools[0] as IMyUserControllableGun; 
        thisWeapon?.ApplyAction("Shoot_Off"); 
    } 
} 
 
//Whip's Vector from Elevation and Azimuth 
Vector3D VectorAzimuthElevation(IMyLargeTurretBase designator) 
{ 
    double el = designator.Elevation; 
    double az = designator.Azimuth; 
 
    //CreateFromAzimuthAndElevation(az, el, out localTargetVector) 
 
    el = el % (2 * Math.PI); 
    az = az % (2 * Math.PI); 
 
    if (az != Math.Abs(az)) 
    { 
        az = 2 * Math.PI + az; 
    } 
 
    int x_mult = 1; 
 
    if (az &gt; Math.PI / 2 &amp;&amp; az &lt; Math.PI) 
    { 
        az = Math.PI - (az % Math.PI); 
        x_mult = -1; 
    } 
    else if (az &gt; Math.PI &amp;&amp; az &lt; Math.PI * 3 / 2) 
    { 
        az = 2 * Math.PI - (az % Math.PI); 
        x_mult = -1; 
    } 
 
    double x; double y; double z; 
 
    if (el == Math.PI / 2) 
    { 
        x = 0; 
        y = 0; 
        z = 1; 
    } 
    else if (az == Math.PI / 2) 
    { 
        x = 0; 
        y = 1; 
        z = y * Math.Tan(el); 
    } 
    else 
    { 
        x = 1 * x_mult; 
        y = Math.Tan(az); 
        double v_xy = Math.Sqrt(1 + y * y); 
        z = v_xy * Math.Tan(el); 
    } 
 
    var worldMatrix = designator.WorldMatrix; 
    return Vector3D.Normalize(worldMatrix.Forward * x + worldMatrix.Left * y + worldMatrix.Up * z); 
    //return new Vector3D(x, y, z); 
} 
 
//Whip's Get Rotation Angles Method v6 - 8/28/17 
//Modified yaw sign 
void GetRotationAngles(Vector3D v_target, Vector3D v_front, Vector3D v_left, Vector3D v_up, out double yaw, out double pitch) 
{ 
    //Dependencies: VectorProjection() | VectorAngleBetween() 
    var projectTargetUp = VectorProjection(v_target, v_up); 
    var projTargetFrontLeft = v_target - projectTargetUp; 
 
    yaw = VectorAngleBetween(v_front, projTargetFrontLeft); 
    pitch = VectorAngleBetween(v_target, projTargetFrontLeft); 
 
    //---Make sure our pitch does not exceed 90 degrees 
    if (pitch &gt; MathHelper.PiOver2) 
    { 
        pitch -= MathHelper.PiOver2; 
    } 
 
    //---Check if yaw angle is left or right   
    yaw = Math.Sign(v_left.Dot(v_target)) * yaw; 
 
    //---Check if pitch angle is up or down     
    pitch = Math.Sign(v_up.Dot(v_target)) * pitch; 
 
    //---Check if target vector is pointing opposite the front vector 
    if (Math.Abs(yaw) &lt;= 1E-6 &amp;&amp; v_target.Dot(v_front) &lt; 0) 
    { 
        yaw = Math.PI; 
    } 
} 
 
Vector3D VectorProjection(Vector3D a, Vector3D b) 
{ 
    if (Vector3D.IsZero(b)) 
        return Vector3D.Zero; 
 
    return a.Dot(b) / b.LengthSquared() * b; 
} 
 
double VectorAngleBetween(Vector3D a, Vector3D b) //returns radians  
{ 
    if (Vector3D.IsZero(a) || Vector3D.IsZero(b)) 
        return 0; 
    else 
        return Math.Acos(MathHelper.Clamp(a.Dot(b) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1)); 
} 
 
//Whip's Get Closest Targeted Turret v1 - 6/12/17 
IMyLargeTurretBase GetClosestTargetingTurret(string name, IMyTerminalBlock reference = null) 
{ 
    var allBlocks = new List&lt;IMyLargeTurretBase&gt;(); 
 
    if (name == "") 
        GridTerminalSystem.GetBlocksOfType(allBlocks); 
    else 
        GridTerminalSystem.GetBlocksOfType(allBlocks, block =&gt; block.CustomName.Contains(name)); 
 
    if (allBlocks.Count == 0) 
    { 
        return null; 
    } 
 
    //Sort guns automatically by name 
    //allBlocks.Sort((block1, block2) =&gt; block1.CustomName.CompareTo(block2.CustomName)); 
 
    var closestBlock = allBlocks[0]; 
 
    if (reference == null) 
        reference = Me; 
 
    var shortestDistance = Vector3D.DistanceSquared(reference.GetPosition(), closestBlock.GetPosition()); 
    allBlocks.Remove(closestBlock); //remove this block from the list 
 
    foreach (var thisBlock in allBlocks) 
    { 
        var thisDistance = Vector3D.DistanceSquared(reference.GetPosition(), thisBlock.GetPosition()); 
 
        if (thisDistance + 0.01 &lt; shortestDistance &amp;&amp; (thisBlock.HasTarget || thisBlock.IsUnderControl)) 
        { 
            closestBlock = thisBlock; 
            shortestDistance = thisDistance; 
        } 
        //otherwise move to next one 
    } 
 
    return closestBlock; 
} 
 
//Whip's Running Symbol Method v6 
int runningSymbolVariant = 0; 
string RunningSymbol() 
{ 
    runningSymbolVariant++; 
    string strRunningSymbol = ""; 
 
    if (runningSymbolVariant == 0) 
        strRunningSymbol = "|"; 
    else if (runningSymbolVariant == 1) 
        strRunningSymbol = "/"; 
    else if (runningSymbolVariant == 2) 
        strRunningSymbol = "--"; 
    else if (runningSymbolVariant == 3) 
    { 
        strRunningSymbol = "\\"; 
        runningSymbolVariant = 0; 
    } 
 
    return strRunningSymbol; 
} 
 
/* 
Changelog: 
- Clamped values to account for floating point errors - v31 
- Fixed syntax error - v32 
- Added AI turret slaving support - v33 
- Redesigned targeting parameters - v33 
- Added rotor turret equillibrium function - v34 
- Cleaned, simplified, and removed some functions - v35 
- Redesigned turret sweeping function - v35 
- Reverted back to old turret sweeping function XD - v35 
- Added in support for AI turret groups - v35 
- Workaround for turret angle setting bug -DONE - v37-1 
- Grabs Weapons/Tools based on grid id of rotor head - v37-3 
- Works with 2 elevation rotors per turret group - v39 
- Tweaked get rotation angle method - v39 
- Fixed broke ass WorldMatricies. Thanks keen... - v40 
- Optimized position getting by adding GetWorldPosition() method - v41 
- Changed GetClosestBlock method to GetClosestTargetingTurret - v42 
- Fixed turrets spinning when idle when no rotor limits were set - v43 
- Adjusted range computation for GetClosestTargetingTurret to avoid musical turrets - v44 
- Removed useage of GetWorldMatrix and GetWorldPosition since the bug that necessitated their use is gone - v45 
- Removed lots of unused math and methods - v45 
- Added support for infinite numbers of elevation rotors - v46 
- Turrets will only fire automatically when designator has line of sight - v47 
- Decreased equillibrium turn speed for safety reasons - v47 
- Designators can now rotate idly if the user so desires - v47 
- Replaced GetVectorAzimuthElevation with GetRotationAngles - v48 
- Added in a bunch of goodies from the ModAPI update - v49 
 
To-do list: 
- Finish argument accept display readout 
*/</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>112115762575610756</EntityId>
              <Min x="46" y="-1" z="-4" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>PBmanual turret Driver</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>      // Title       : MArmOS (Mechanical Arm Operating System)         
   // Author      : Timotei~         
 /* Description : Marmos is a framework allowing to control many shape of mechanical arm by         
                           simplifying them into a cartesian coordinate system.         
*/         
         
    //***********************************************************************//         
  //*****************  Table of content  *******************************//         
//***********************************************************************//         
/*         
    | SECTION___________________LINE         
    |         
    | Parameters                            ~20         
    | Component Declaration         ~35         
    | ArmConfiguration                  ~50         
    | Main                                       ~90         
    | Documentation                      ~150         
    | MArmOS's entrails                ~250         
         
*/         
             
             
    //***********************************************************************//             
  //***************************  Parameters  ***************************//             
//***********************************************************************//             
             
static Single d     = 0.0005F;       // No need to chage this             
static Single SMOOTLIMITS     = 6F;       // How smoot part's limits should be             
static Single MOUSE_SENSITIVITY_X = -0.06F;             
static Single MOUSE_SENSITIVITY_Y = -0.06F;             
static Single BG    = 2.5F;     // Big Grid block size             
static Single SG    = 0.5F;     // Small Grid block size             
static bool  DEBUG = true;             
static String DebugScreenName = "ArmPanel";           
             
             
             
             
    //***********************************************************************//             
  //*************  Component Declaration  **************************//             
//***********************************************************************//             
// You can declare your Parts here.             
             
             
// example             
ArmController MyArmController;             
             
             
             
             
             
    //***********************************************************************//             
  //*********************  ArmConfiguration  **************************//             
//***********************************************************************//             
public void ArmConfiguration(){             
    // You can define your Parts here             
             
    //Example             
    var Prefix = "";          
    var Motor1 = new Joint( RotorName: Prefix+"Motor1"                                                                   );    

          
    var Motor2 = new Joint( RotorName: Prefix+"Motor2"                                                                 );              
        
           
          
          
                 
    var MyArm = new ArmPart(                 
        "Z"                 
        , Motor1                 
        , new SolidPart( 4*SG, 0, -3*SG ) 

        );                        
           
          
    MyArmController = new ArmController(             
        Arm:MyArm             
        , ShipControllerKeyword:    "ADriverRC"             
        , Yaw:                   Motor1             
        , Pitch:                  Motor2             
        , Smoot:                40            
        , Speed:                3F             
        , RelativeX:           true             
        , RelativeY:           true            
        , RelativeZ:           true             
    );             
             
}             
             
             
             
     //***********************************************************************//             
   //**************************  MArmOS Main  ********************************//             
 //***********************************************************************//             
 public void MArmOS_Main(string argument) {             
             
    // MArmOS call this function at every execution             
    // You can put your code here             
             
             
             
             
    // Example             
    MyArmController.Update( argument );             
             
             
             
             
             
             
}             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
   
 
/*   
 
   
 
8888888b.                                                             888             888    d8b   
 
888  "Y88b                                                            888             888    Y8P   
 
888    888                                                            888             888   
 
888    888  .d88b.   .d8888b 888  888 88888b.d88b.   .d88b.  88888b.  888888  8888b.  888888 888  .d88b.  88888b.   
 
888    888 d88""88b d88P"    888  888 888 "888 "88b d8P  Y8b 888 "88b 888        "88b 888    888 d88""88b 888 "88b   
 
888    888 888  888 888      888  888 888  888  888 88888888 888  888 888    .d888888 888    888 888  888 888  888   
 
888  .d88P Y88..88P Y88b.    Y88b 888 888  888  888 Y8b.     888  888 Y88b.  888  888 Y88b.  888 Y88..88P 888  888   
 
8888888P"   "Y88P"   "Y8888P  "Y88888 888  888  888  "Y8888  888  888  "Y888 "Y888888  "Y888 888  "Y88P"  888  888   
 
   
 
*/   
 
   
 
   
 
    //***********************************************************************//     DOCUMENTATION    DOCUMENTATION    DOCUMENTATION   
 
  //*********************  Documentation  ****************************//          DOCUMENTATION    DOCUMENTATION    DOCUMENTATION   
 
//***********************************************************************//       DOCUMENTATION    DOCUMENTATION    DOCUMENTATION   
 
   
 
  /*   
 
   
 
     ////                     List of all classes:                    ////   
 
   
 
    [] means optionnal   
 
   
 
    ////  ArmController  ////   
 
        Constructor:   
 
            new ArmController(   
 
                Part                Arm,   
 
                String              [Name],                 // Alow to give commands to a specific Controller via argument or textpanel. default = ""   
 
                String              [ShipControllerKeyword], // default = ""   
 
                IMyTextPanel        [TextPanelInput],       // default = null   
 
                Single              [Smootness],            // default = 10   
 
                Single              [Speed],                // default = 1   
 
                Joint               [Pitch],                // default = null   
 
                Joint               [Yaw],                  // default = null   
 
                Joint               [Roll],                 // default = null   
 
                IMyTimerBlock       [TargetReachedTimer]    // default = null   
 
            )   
 
   
 
   
 
    ////  Joint  ////   
 
        Constructor:   
 
            new Joint(   
 
                String              RotorName,   
 
                int                   [Direction],              // Direction of rotation  1 or -1   
 
                Single             [Offset],          // Angle in deg°   
 
                String             [Axis],                 // Axis of rotation, default = "Z", will be overriden if used on a ArmPArt.   
 
                bool                [Override]              // MArmOS won't control this joint if true. default = false   
 
            )   
 
   
 
   
 
    ////  SolidPart  ////   
 
        Constructor:   
 
            new Part(   
 
                Single    X,   
 
                Single    Y,   
 
                Single    Z   
 
            )   
 
            or   
 
            new Part(   
 
                Vector3   Vector   
 
            )   
 
            note: units are in meters, not in blocks. Constants hva been created to help:  BG=2.5F   SG=0.5F   
 
   
 
   
 
    ////  PistonPart  ////   
 
        Constructor:   
 
            new PistonPart(   
 
                String                  PistonName,   
 
                String                  Direction         // e.g. "X"   
 
                bool                    [Override]        // default = false   
 
            )   
 
   
 
   
 
    ////  ArmPart  ////   
 
        Constructor:   
 
            new ArmPart(   
 
                String     Axis,     //e.g. "Z"   
 
                Joint       Joint1,   
 
                Part        Arm,   
 
                Joint       [Joint2]              // default = null   
 
                bool        [ShareJoint2]         // default = false   
 
            )   
 
   
 
  */   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
888b     d888        d8888                        .d88888b.   .d8888b.   
 
8888b   d8888       d88888                       d88P" "Y88b d88P  Y88b   
 
88888b.d88888      d88P888                       888     888 Y88b.   
 
888Y88888P888     d88P 888 888d888 88888b.d88b.  888     888  "Y888b.   
 
888 Y888P 888    d88P  888 888P"   888 "888 "88b 888     888     "Y88b.   
 
888  Y8P  888   d88P   888 888     888  888  888 888     888       "888   
 
888   "   888  d8888888888 888     888  888  888 Y88b. .d88P Y88b  d88P   
 
888       888 d88P     888 888     888  888  888  "Y88888P"   "Y8888P"   
 
   
 
*/   
 
   
 
    //***********************************************************************//       MArmOS       MArmOS       MArmOS   
 
  //*********************  MArmOS's entrails  ************************//        MArmOS       MArmOS       MArmOS   
 
//***********************************************************************//       MArmOS       MArmOS       MArmOS   
 
   
 
   
 
   
 
static System.Action&lt;String&gt; mEcho;          // A pointer to the Echo method   
 
static IMyGridTerminalSystem MyGTS;   // A pointer to the grid terminal system   
 
static IMyProgrammableBlock MyMe;          // A pointer to the Programmable block   
 
//int Clock = 0;   
 
   
 
static void MyEcho( String Text ){   
 
    mEcho( Text );   
 
    try{   
 
        IMyTextPanel debug = (IMyTextPanel)MyGTS.GetBlockWithName( DebugScreenName );   
 
        debug.WritePublicText( Text+"\n", true );   
 
    } catch( Exception ){}   
 
}   
 
   
 
public Program() {   
 
    // Set variables   
 
    var dummy =   BG;   
 
    dummy =       SG;   
 
    mEcho =      Echo;   
 
    MyGTS =       GridTerminalSystem;   
 
    MyMe =        Me;   
 
   
 
    try {   
 
        // Call the configuration of the arm   
 
        ArmConfiguration();   
 
    } catch( Exception ){}   
 
}   
 
   
 
   
 
public void Main(string argument) {   
 
    try {   
 
        // Check the arm configuration every couple thick   
 
        //if ( (Clock++) == 240 ){   
 
            //ArmConfiguration(); // reload the arm   
 
            //Clock = 0;   
 
        //}   
 
        // Call the MArmOS_Main function   
 
   
 
        try{   
 
            IMyTextPanel debug = (IMyTextPanel)MyGTS.GetBlockWithName( DebugScreenName );   
 
            debug.WritePublicText( "", false );   
 
        } catch( Exception ){}   
 
   
 
        MArmOS_Main( argument );   
 
    }   
 
    catch( Exception ){   
 
        Echo("Problem detected, check your configuration");   
 
        // Set variables   
 
        var dummy =   BG;   
 
        dummy =       SG;   
 
        MyGTS =       GridTerminalSystem;   
 
        MyMe =        Me;   
 
   
 
        try{   
 
            ArmConfiguration(); // reload the arm   
 
        } catch( Exception ){}   
 
    }   
 
   
 
}   
 
   
 
   
 
   
 
   
 
   
 
    //***********************************************************************// CLASS     CLASS     CLASS     CLASS   
 
  //*********************  Classes Definition  *************************//      CLASS     CLASS     CLASS     CLASS   
 
//***********************************************************************//     CLASS     CLASS     CLASS     CLASS   
 
   
 
  /*   
 
     List of all classes:   
 
      - ArmController   
 
      - Part   
 
      - Joint   
 
      - SolidPart   
 
      - PartAddition   
 
      - PistonPart   
 
      - ArmPart   
 
  */   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
       d8888                        .d8888b.                    888                     888   
 
      d88888                       d88P  Y88b                   888                     888   
 
     d88P888                       888    888                   888                     888   
 
    d88P 888 888d888 88888b.d88b.  888         .d88b.  88888b.  888888 888d888  .d88b.  888  .d88b.  888d888   
 
   d88P  888 888P"   888 "888 "88b 888        d88""88b 888 "88b 888    888P"   d88""88b 888 d8P  Y8b 888P"   
 
  d88P   888 888     888  888  888 888    888 888  888 888  888 888    888     888  888 888 88888888 888   
 
 d8888888888 888     888  888  888 Y88b  d88P Y88..88P 888  888 Y88b.  888     Y88..88P 888 Y8b.     888   
 
d88P     888 888     888  888  888  "Y8888P"   "Y88P"  888  888  "Y888 888      "Y88P"  888  "Y8888  888   
 
   
 
*/   
 
   
 
//////// ---------------------------------------------  ArmController ////////        ArmController        ArmController   
 
   
 
public class ArmController {   
 
   
 
    // Parameters   
 
    public Part             Arm;   
 
    public String           Name;   
 
    public Single           Speed;   
 
    public Single           Smoot;   
 
    public Single           Tolerence;   
 
    public bool             RelativeX;   
 
    public bool             RelativeY;   
 
    public bool             RelativeZ;   
 
   
 
    // Components   
 
    public Joint            Pitch;   
 
    public Joint            Yaw;   
 
    public Joint            Roll;   
 
    public IMyTimerBlock    TargetReachedTimer = null;   
 
    public string           ShipControllerKeyword;   
 
    public bool             TrackInputs = true;   
 
    public IMyTextPanel     Panel = null;   
 
   
 
    // Variables   
 
    Vector3                 TargetPos;   
 
    bool                    TrackTarget;   
 
    Vector3                 TargetOri;   
 
    bool                    TrackTargetOri;   
 
    Vector3                 VirtualPos;   
 
    Vector3                 TargetVelocity;   
 
    Vector3                 SmootTargetVelocity;   
 
    Vector3                 InputVec;   
 
    Vector3                 Rot;   
 
    Vector3                 Drift;   
 
   
 
    public void Update( String argument = "" ){   
 
   
 
        TargetVelocity = new Vector3();   
 
        Vector3 Pos = this.Arm.GetVector();   
 
        Vector3 Ori = this.GetRot();   
 
        Vector3 PreRot = new Vector3();   
 
        Vector3 Diff;   
 
        InputVec = new Vector3();   
 
   
 
        MyEcho("Pos="+Pos.ToString("0.0"));   
 
   
 
        // Get the TextPanel's inputs   
 
        if ( Panel != null ){   
 
            try{   
 
                String Text = Panel.GetPublicText();   
 
                Parse( Text );   
 
            } catch( Exception ){   
 
                MyEcho( "Error: The text panel can't be found" );   
 
            }   
 
        }   
 
        // Get the Argument's inputs   
 
        if ( argument != "" )  {   
 
            Parse( argument );   
 
        }   
 
        this.TargetVelocity += this.InputVec;  // Appy the unput velocity to the target velocity   
 
   
 
   
 
        // ------------------&lt;&lt;&lt;   G E T I N G   I N P U T S   &gt;&gt;&gt;-----------------------   
 
        // Get the controllers inputs if TrackInput is true   
 
        if ( TrackInputs ){   
 
            this.InputVec = new Vector3();   
 
   
 
            // Get the list of all Desired controllers   
 
            List&lt;IMyTerminalBlock&gt; Controllers = new List&lt;IMyTerminalBlock&gt;();   
 
            MyGTS.SearchBlocksOfName(this.ShipControllerKeyword, Controllers);   
 
   
 
            // Get the inputs from all desired controllers   
 
            foreach ( IMyTerminalBlock Controller in Controllers ) {   
 
                try{   
 
                    if ( ((IMyShipController)Controller).IsUnderControl ){   
 
                        this.InputVec += GetLinearInputs( (IMyShipController)Controller );  // &lt;&lt; L I N E A R   I N P U T S &gt;&gt;   
 
                        PreRot += GetRotationInputs( (IMyShipController)Controller );    // &lt;&lt; A N G U L A R   I N P U T S &gt;&gt;   
 
                    }   
 
                } catch (Exception){}   
 
            }   
 
            // Normalyse the linear velocity target   
 
            if ( this.InputVec.Length() &gt; 0.001F )   
 
                this.InputVec *= this.Speed/this.InputVec.Length();   
 
            this.TargetVelocity += this.InputVec;   
 
   
 
            // Apply the velocity to the effector's joints   
 
            Rot += (PreRot-Rot)/Smoot;  // Soften the rotational input to avoid jerkyness     // &lt;&lt; R O L L   I N P U T &gt;&gt;   
 
            if (this.Yaw != null)     this.Yaw.SetRotationSpeed( Rot.X*MOUSE_SENSITIVITY_X );   
 
            if (this.Pitch != null)    this.Pitch.SetRotationSpeed( Rot.Y*MOUSE_SENSITIVITY_Y );   
 
            if (this.Roll != null)      this.Roll.SetRotationSpeed( Rot.Z );   
 
        }   
 
   
 
        // Relativise the inputs   
 
         if ( this.RelativeX || this.RelativeY || this.RelativeZ ){   
 
            var Mat = Matrix.CreateTranslation( this.TargetVelocity );   
 
            var Orient = Arm.GetOrient(0);  ///////  TODO more flexible plz   
 
            Mat = Mat*Orient;   
 
            if ( RelativeX )    this.TargetVelocity.X = Mat.Translation.X;   
 
            if ( RelativeY )    this.TargetVelocity.Y = Mat.Translation.Y;   
 
            if ( RelativeZ )    this.TargetVelocity.Z = Mat.Translation.Z;   
 
        }   
 
   
 
        // Move to get to the targeted position   
 
   
 
   
 
   
 
        if ( this.TrackTarget ){   
 
            this.InputVec = this.TargetPos-Pos;   
 
            Single L = this.InputVec.Length();   
 
   
 
            if ( L &lt; Tolerence ){   
 
                this.TrackTarget = false;   
 
            } else {   
 
                this.InputVec *= this.Speed/(Single)Math.Max(this.Speed,L);   
 
                MyEcho( "Moving Toward: "+this.TargetPos.ToString( "0.00" ) );   
 
                this.TargetVelocity += this.InputVec;   
 
            }   
 
   
 
        }   
 
        if ( this.TrackTargetOri ){   
 
   
 
            Vector3 OO = new Vector3( AngleProxy( Ori.X, this.TargetOri.X )   
 
                                    , AngleProxy( Ori.Y, this.TargetOri.Y )   
 
                                    , AngleProxy( Ori.Z, this.TargetOri.Z ) );   
 
            if ( OO.Length() &lt; 0.05 ){   
 
                this.TrackTargetOri = false;   
 
            } else {   
 
                MyEcho( "Orient Toward: "+this.TargetOri.ToString( "0.00" ) );   
 
                if (this.Yaw != null)     this.Yaw.AddRotationSpeed( OO.X*0.5F );   
 
                if (this.Pitch != null)    this.Pitch.AddRotationSpeed( OO.Y*0.5F );   
 
                if (this.Roll != null)      this.Roll.AddRotationSpeed( OO.Z*0.5F );   
 
            }   
 
        }   
 
   
 
   
 
   
 
   
 
        MyEcho("VirtualPos="+VirtualPos.ToString("0.0"));   
 
   
 
        // Soften the target velocity to avoid jerkyness   
 
        this.SmootTargetVelocity += ( this.TargetVelocity-SmootTargetVelocity )/this.Smoot;   
 
   
 
   
 
   
 
        // ------------------&lt;&lt;&lt;   C A L C U L A T I N G   M O V E M E N T S   &gt;&gt;&gt;-----------------------   
 
        MyEcho("TargetVelocity="+TargetVelocity.ToString("0.0"));   
 
   
 
        this.VirtualPos += this.SmootTargetVelocity/60;   
 
   
 
        Diff = VirtualPos-Pos;   
 
        if( Diff.Length() &gt; this.Speed/4){   
 
            Diff *= this.Speed/4/Diff.Length();   
 
            this.VirtualPos = Pos+Diff;   
 
        }   
 
   
 
        // Apply correction if drifting   
 
        this.TargetVelocity += (Diff)*1F;   
 
   
 
        if ( this.TargetVelocity.Length() &lt; 0.02F ) this.TargetVelocity = new Vector3();   
 
   
 
        // Determine the supposed position to get   
 
        if ( this.TargetVelocity.Length() &gt; 0.05F || PreRot.Length() &gt; 0.05F ){   
 
            MyEcho("Input: true");   
 
        } else {   
 
   
 
            MyEcho("Input: false");   
 
            //this.VirtualPos = Pos;   
 
            //Diff = new Vector3();   
 
            this.TargetVelocity *= 0.99F;   
 
            this.Drift *= 0.99F;   
 
        }   
 
   
 
   
 
   
 
        // Move the arm   
 
        if ( this.Drift.Length() &gt; 0.0004F || this.SmootTargetVelocity.Length() &gt; 0.0004 || PreRot.Length() &gt; 0.001 ){   
 
            MyEcho("Moving: ON");   
 
            this.Drift += this.SmootTargetVelocity;   
 
            var Dl = this.Drift.Length();   
 
            Arm.Move( this.Drift/Dl*(this.SmootTargetVelocity.Length()+Dl)/2 );   
 
            this.Drift -= Arm.GetDeltaVector()/d;   
 
            if ( Drift.Length() &gt; Speed*2 )   
 
   
 
                Drift *= Speed*2/Drift.Length();   
 
        } else {   
 
            MyEcho("Moving: OFF");   
 
            this.SmootTargetVelocity *= 0.9F;   
 
            this.Drift = new Vector3();   
 
        }   
 
    }   
 
   
 
   
 
    public Vector3 GetRot( Single dt = 0 ) {   
 
   
 
        var Out = new Vector3();   
 
   
 
        if (this.Yaw != null)     Out.X = this.Yaw.GetAngle(dt);   
 
        if (this.Pitch != null)    Out.Y = this.Pitch.GetAngle(dt);   
 
        if (this.Roll != null)      Out.Z = this.Roll.GetAngle(dt);   
 
   
 
        return Out;   
 
    }   
 
   
 
   
 
   
 
   
 
    ////  AngleProxy  ////   
 
    // Give the smallest difference between two angles   
 
    public static Single AngleProxy( Single A1, Single A2 )   
 
    { //Return the relative Proxymity between two Angles   
 
        A1 = A2-A1;   
 
        A1 = Mod( A1+(Single)Math.PI, (Single)2*(Single)Math.PI )-(Single)Math.PI;   
 
        return A1; }   
 
    //// ----------------------------- ////   
 
   
 
    ////  Mod  ////   
 
    public static Single Mod( Single A, Single N ){   
 
        return A-(Single)Math.Floor(A/N)*N;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    // ------------------&lt;&lt;&lt;   P A R S I N G   A R G U M E N T   &gt;&gt;&gt;-----------------------   
 
    // Function used to parse the content of a string   
 
    public void Parse( String Argument ){   
 
   
 
        string Word;   
 
        String[] Lines = Argument.Split( '\n' );   
 
        foreach ( String Line in Lines ){   
 
            String[] Commands = Line.Split( ';' );   
 
            foreach ( String Command in Commands ){   
 
                String[] Words = Command.Split( ' ' );   
 
                int i = 0;   
 
   
 
                if ( this.Name != "" ) i++;   
 
   
 
                if ( (this.Name == "") || (Words[0] == this.Name) ){   
 
                    switch(Words[i++]){   
 
   
 
   
 
                        // Synopsis: Smoot Number   
 
                        case "Smoot":   
 
                            this.Smoot = (Single)Math.Max(1,Convert.ToSingle(Words[i++]));   
 
                        break;   
 
                        // Synopsis: Tolerence Number   
 
                        case "Tolerence":   case "-T":   
 
                            this.Tolerence = (Single)Math.Max(1,Convert.ToSingle(Words[i++]));   
 
                        break;   
 
   
 
                        // Synopsis: Override   
 
                        case "Override":  case "-O":   
 
                            Word = Words[i++];   
 
                            if ( Word == "On" ){   
 
                                try{   
 
                                    string PartName = Reform( Words, i );   
 
                                    if (Part.PartList.ContainsKey(PartName))   
 
                                        Part.PartList[PartName].Override = true;   
 
                                } catch( Exception ){   
 
                                    MyEcho( "Parsing error in 'Override'" );   
 
                                }   
 
                            } else if ( Word == "Off" || Word == "0" ) {   
 
                                try{   
 
                                    string PartName = Reform( Words, i );   
 
                                    if (Part.PartList.ContainsKey(PartName))   
 
                                        Part.PartList[PartName].Override = false;   
 
                                } catch( Exception ){   
 
                                    MyEcho( "Parsing error in 'Override'" );   
 
                                }   
 
                            } else if ( Word == "Toggle" || Word == "-1" ) {   
 
                                try{   
 
                                    string PartName = Reform( Words, i );   
 
                                    if (Part.PartList.ContainsKey(PartName))   
 
                                        Part.PartList[PartName].Override = !Part.PartList[PartName].Override;   
 
                                } catch( Exception ){   
 
                                    MyEcho( "Parsing error in 'Override'" );   
 
                                }   
 
                            }else {   
 
                                MyEcho( "The override need a status keyword ( On, Off or Toggle)" );   
 
                            }   
 
                        break;   
 
   
 
   
 
                        // Synopsis: TrackInputs   
 
                        case "TrackInputs":  case "-TI":   
 
                            Word = Words[i++];   
 
                            if ( Word == "On" ){   
 
                                this.TrackInputs = true;   
 
                            } else if ( Word == "Off" || Word == "0" ) {   
 
                                this.TrackInputs = false;   
 
                            } else if ( Word == "Toggle" || Word == "-1" ) {   
 
                                this.TrackInputs = !this.TrackInputs;   
 
                            }else {   
 
                                MyEcho( "The TrackInputs need a status keyword ( On, Off or Toggle)" );   
 
                            }   
 
                        break;   
 
   
 
   
 
   
 
                        // Synopsis: PrintPosition TextPanelName   
 
                        case "PrintPosition":  case "-PP":   
 
                            try{   
 
                                String PanelName = Reform( Words, i );   
 
                                IMyTextPanel Panel = (IMyTextPanel)MyGTS.GetBlockWithName( PanelName );   
 
                                if ( Panel == null ) {   
 
                                    MyEcho( PanelName+" not found");   
 
                                } else {   
 
                                    Vector3 Pos = (Vector3)this.Arm;   
 
                                    Panel.WritePublicText( "\nMoveTo "+Pos.X.ToString("0.00"), true );   
 
                                    Panel.WritePublicText( " "+Pos.Y.ToString("0.00"), true );   
 
                                    Panel.WritePublicText( " "+Pos.Z.ToString("0.00"), true );   
 
                                    if ( this.Yaw != null )   
 
                                        Panel.WritePublicText( " "+((Single)this.Yaw).ToString("0.00"), true );   
 
                                    if ( this.Pitch != null )   
 
                                        Panel.WritePublicText( " "+((Single)this.Pitch).ToString("0.00"), true );   
 
                                    if ( this.Roll != null )   
 
                                        Panel.WritePublicText( " "+((Single)this.Roll).ToString("0.00"), true );   
 
                                }   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'PrintPosition'" );   
 
                            }   
 
                        break;   
 
   
 
                        // Synopsis: ClearPanel TextPanelName   
 
                        case "ClearPanel":  case "-CP":   
 
                            try{   
 
                                String PanelName = Reform( Words, i );   
 
                                IMyTextPanel Panel = (IMyTextPanel)MyGTS.GetBlockWithName( PanelName );   
 
                                if ( Panel == null ) {   
 
                                    MyEcho( PanelName+" not found");   
 
                                } else {   
 
                                    Panel.WritePublicText( "", false );   
 
                                }   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'ClearPanel'" );   
 
                            }   
 
                        break;   
 
   
 
   
 
                        // Synopsis: Move X Y Z   
 
                        case "Move":  case "-M":   
 
                            try{   
 
                                this.TargetPos = new Vector3();   
 
                                this.InputVec.X = Convert.ToSingle(Words[i++]);   
 
                                this.InputVec.Y = Convert.ToSingle(Words[i++]);   
 
                                this.InputVec.Z = Convert.ToSingle(Words[i++]);   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'Move'" );   
 
                            }   
 
                        break;   
 
   
 
                        // Synopsis: MoveTo X Y Z [Yaw] [Pitch] [Roll]   
 
                        case "MoveTo":  case "-MT":   
 
                            this.TrackTarget = true;   
 
                            this.TargetPos = new Vector3();   
 
                            this.InputVec =  new Vector3();   
 
                            try{   
 
                                this.TargetPos.X = Convert.ToSingle( Words[i++] );   
 
                                this.TargetPos.Y = Convert.ToSingle( Words[i++] );   
 
                                this.TargetPos.Z = Convert.ToSingle( Words[i++] );   
 
                                this.TrackTargetOri = true;   
 
                                this.TargetOri = new Vector3();   
 
                                try{   
 
                                    this.TargetOri.X = Convert.ToSingle(Words[i++]);   
 
                                } catch (Exception){ this.TrackTargetOri = false; }   
 
                                try{   
 
                                    this.TargetOri.Y = Convert.ToSingle(Words[i++]);   
 
                                } catch (Exception){ }   
 
                                try{   
 
                                    this.TargetOri.Z = Convert.ToSingle(Words[i++]);   
 
                                } catch (Exception){ }   
 
   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'MoveTo'" );   
 
                            }   
 
                        break;   
 
   
 
                        // Synopsis: Speed Number   
 
                        case "Speed":  case "-S":   
 
                            this.Speed = Convert.ToSingle(Words[i++]);   
 
                            var l = this.TargetVelocity.Length();   
 
                            if ( l &gt; 0.01 ){   
 
                                if ( this.TargetVelocity.X != 0 )   
 
                                   this.TargetVelocity.X = this.TargetVelocity.X/l*this.Speed;   
 
                                if ( this.TargetVelocity.Y != 0 )   
 
                                   this.TargetVelocity.Y = this.TargetVelocity.X/l*this.Speed;   
 
                                if ( this.TargetVelocity.Z != 0 )   
 
                                   this.TargetVelocity.Z = this.TargetVelocity.X/l*this.Speed;   
 
                            }   
 
                        break;   
 
   
 
                        // Synopsis: SetTargetReachedTimer Timername   
 
                        case "SetTargetReachedTimer":  case "-STRT":   
 
                            try{   
 
                                String TimerName = Reform( Words, i );   
 
                                this.TargetReachedTimer = (IMyTimerBlock)MyGTS.GetBlockWithName( TimerName );   
 
                                if ( this.TargetReachedTimer == null )   
 
                                    MyEcho( TimerName+" not found");   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'SetTargetReachedTimer'" );   
 
                            }   
 
                        break;   
 
   
 
                    }   
 
                }   
 
            }   
 
        }   
 
    }   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
    public static Vector3 GetLinearInputs( IMyShipController Controller ){   
 
        Vector3 VecIn;   
 
        Vector3 VecOut;   
 
        VecIn = Controller.MoveIndicator;   
 
        VecOut.X = -VecIn.Z;   
 
        VecOut.Y = -VecIn.X;   
 
        VecOut.Z = VecIn.Y;   
 
        return VecOut;   
 
    }   
 
   
 
   
 
    public static Vector3 GetRotationInputs( IMyShipController Controller ){   
 
        Vector2 VecIn;   
 
        Vector3 VecOut;   
 
        VecIn = Controller.RotationIndicator;   
 
        VecOut.X = VecIn.Y;   
 
        VecOut.Y = -VecIn.X;   
 
        VecOut.Z = Controller.RollIndicator;   
 
        return VecOut;   
 
    }   
 
   
 
   
 
   
 
   
 
   
 
   
 
    // Function used to reassemble the end of a string[] to get an string   
 
    public static String Reform( String[] Words, int i ){   
 
        String Word = "";   
 
        do {   
 
            Word += Words[i];   
 
            i++;   
 
        } while ( i&lt; Words.Length &amp;&amp; (Word += " ") != null );   
 
        return Word;   
 
    }   
 
   
 
   
 
   
 
   
 
    // Constructor   
 
    public ArmController(   
 
                              Part          Arm,   
 
                              String        Name = "",   
 
                              String        ShipControllerKeyword = "",   
 
                              IMyTextPanel  TextPanelInput = null,   
 
                              Single        Smoot = 10,   
 
                              Single        Speed = 1,   
 
                              Joint          Pitch = null,   
 
                              Joint          Yaw = null,   
 
                              Joint          Roll = null,   
 
                              bool          RelativeX = false,   
 
                              bool          RelativeY = false,   
 
                              bool          RelativeZ = false,   
 
                              IMyTimerBlock TargetReachedTimer = null,   
 
                              Single        Tolerence = 0.1F   
 
                        ){   
 
        this.Arm =                  Arm;   
 
        this.Name =                 Name;   
 
        this.ShipControllerKeyword = ShipControllerKeyword;   
 
        if ( this.ShipControllerKeyword != "" ){   
 
            this.TrackInputs = true;   
 
        }   
 
        this.Tolerence = Tolerence;   
 
   
 
        this.Panel =                        TextPanelInput;   
 
        this.Smoot =                        Smoot;   
 
        this.Speed =                        Speed;   
 
        this.Pitch =                          Pitch;   
 
        this.Yaw =                           Yaw;   
 
        this.Roll =                             Roll;   
 
        this.RelativeX =                    RelativeX;   
 
        this.RelativeY =                    RelativeY;   
 
        this.RelativeZ =                    RelativeZ;   
 
        this.TargetReachedTimer =  TargetReachedTimer;   
 
        this.TargetPos =                    new Vector3();   
 
        this.TrackTarget =                  false;   
 
        this.TargetOri =                    new Vector3();   
 
        this.TrackTargetOri =               false;   
 
        this.VirtualPos =                   (Vector3)Arm;   
 
        this.SmootTargetVelocity =  new Vector3();   
 
        this.Rot =                               new Vector3();   
 
        this.Drift =                              new Vector3();   
 
    }   
 
}   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
8888888b.                   888   
 
888   Y88b                  888   
 
888    888                  888   
 
888   d88P  8888b.  888d888 888888   
 
8888888P"      "88b 888P"   888   
 
888        .d888888 888     888   
 
888        888  888 888     Y88b.   
 
888        "Y888888 888      "Y888   
 
   
 
*/   
 
   
 
//////// ---------------------------------------------  PART ////////       PART       PART       PART       PART   
 
public class Part{   
 
   
 
  // Interface:   
 
      // Implication of Vector3   
 
      // Override of .ToString()   
 
   
 
  // Utilitary:   
 
      // Addition Management   
 
      // SQ   
 
      // FindAngle   
 
      // AngleProxy   
 
      // Mod   
 
      // AxisToU   
 
      // RelativePlane   
 
   
 
  // Interraction:   
 
      // GetVector                      [VIRTUAL]   
 
      // GetDeltaVector   
 
      // GetPose                      [VIRTUAL]   
 
      // GetDeltaPose   
 
      // GetOrient                      [VIRTUAL]   
 
      // Move                      [VIRTUAL]   
 
   
 
   
 
   
 
   
 
   
 
    // Declaration of variables:   
 
   
 
    public static Dictionary&lt;String, Part&gt; PartList = new Dictionary&lt;String, Part&gt;();   
 
    // A list of most parts to reffer to them by parsing input.   
 
   
 
    public Matrix Pose = new Matrix();                      // The current pose of the Part   
 
    public String  Axis;   
 
    public Vector3 U = new Vector3(0,0,1);              //Unitary Axis, Default is "Z"   
 
    public bool Override = false;   
 
   
 
    // INTERFACE:   
 
   
 
    //// Implication of Vector3 ////   
 
    public static implicit operator Vector3( Part a )   
 
    { return a.GetVector(); }   
 
    //// ----------------------------- ////   
 
   
 
     //// Implication of Matrix////   
 
    public static implicit operator Matrix( Part a )   
 
    { return a.GetPose(); }   
 
    //// ----------------------------- ////   
 
   
 
    //// Override of .ToString ////   
 
    public override String ToString()   
 
    { return ((Matrix)this).ToString(); }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
   
 
   
 
    // UTILITARY:   
 
   
 
    //// Addition Management ////   
 
    // Create a PartAddition Part to track additionned Parts   
 
    public static Part operator +(Part left, Part right)   
 
    { return new PartAddition( left, right ); }   
 
    //// ----------------------------- ////   
 
   
 
    //// SQ ////   
 
    // Easy access Square   
 
    public static Single SQ(Single X)   
 
    { return X*X; }   
 
    //// ----------------------------- ////   
 
   
 
    //// FindAngle ////   
 
    // Use the cosinus trick to find an angle within a triangle   
 
    public Single FindAngle( Single a, Single b, Single c )   
 
    { return (Single)Math.Acos( (SQ(b)+SQ(c)-SQ(a))/(2*b*c) ); }   
 
    //// ----------------------------- ////   
 
   
 
    ////  AngleProxy  ////   
 
    // Give the smallest difference between two angles   
 
    public static Single AngleProxy( Single A1, Single A2 )   
 
    { //Return the relative Proxymity between two Angles   
 
        A1 = A2-A1;   
 
        A1 = Mod( A1+(Single)Math.PI, (Single)2*(Single)Math.PI )-(Single)Math.PI;   
 
        return A1; }   
 
    //// ----------------------------- ////   
 
   
 
    ////  Mod  ////   
 
    // Modulo   
 
    public static Single Mod( Single A, Single N )   
 
    { return A-(Single)Math.Floor(A/N)*N; }   
 
    //// ----------------------------- ////   
 
   
 
    //// AxisToU ////   
 
    // Convert an axis into a Unitary vector   
 
    public static Vector3 AxisToU( String Axis )   
 
    {   
 
        switch (Axis){   
 
            case "X": return new Vector3( 1, 0, 0 );   
 
            case "Y": return new Vector3( 0, 1, 0 );   
 
            case "Z": return new Vector3( 0, 0, 1 );   
 
            case "-X": return new Vector3( -1, 0, 0 );   
 
            case "-Y": return new Vector3( 0, -1, 0 );   
 
            case "-Z": return new Vector3( 0, 0, -1 );   
 
            default: return new Vector3( 0, 0, 1 );   
 
        }   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
    ////  RelativePlane  ////   
 
    // Realivise a vector3 into a plane   
 
    public static Vector2 RelativePlane( Vector3 Vec, String Axis ){   
 
        switch (Axis){   
 
            case "X": return new Vector2( -Vec.Z, Vec.Y );   
 
            case "Y": return new Vector2( Vec.X, -Vec.Z );   
 
            case "Z": return new Vector2( Vec.X, Vec.Y );   
 
            case "-X": return new Vector2( Vec.Z, Vec.Y );   
 
            case "-Y": return new Vector2( Vec.X, Vec.Z );   
 
            case "-Z": return new Vector2( Vec.X, -Vec.Y );   
 
            default: return new Vector2( Vec.Y, Vec.Z );   
 
        }   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public virtual Vector3 GetVector( Single dT = 0 ){   
 
        return GetPose( dT ).Translation;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetDeltaVector  ////   
 
    // Get the current delta of the Part's translation vector. note: delta = velocity*d   
 
    public Vector3 GetDeltaVector( )   
 
    {   return this.GetVector( 1 )-this.GetVector( 0 ); }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetPose  ////   
 
    // Get the current or future Pose of the Part   
 
    public virtual Matrix GetPose( Single dT = 0 ){   
 
        this.Pose = new Matrix();   
 
        return this.Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetDeltaPose  ////   
 
    // Get the current delta of the Part's Pose. note: delta = velocity*d   
 
    public Matrix GetDeltaPose( ){   
 
        Matrix Inverto;   
 
        Matrix Pose = this.GetPose( 0 );   
 
        Matrix.Invert( ref Pose, out Inverto );   
 
        return this.GetPose( 1 )*Inverto;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public virtual Matrix GetOrient( Single dT = 0 ){   
 
        var Pose = this.GetPose(dT);   
 
        Pose.Translation = new Vector3();   
 
        return Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    ////  Move  ////   
 
    public virtual Vector3 Move( Vector3 TargetdV ){   
 
        return TargetdV;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
888888          d8b          888   
 
  "88b          Y8P          888   
 
   888                       888   
 
   888  .d88b.  888 88888b.  888888   
 
   888 d88""88b 888 888 "88b 888   
 
   888 888  888 888 888  888 888   
 
   88P Y88..88P 888 888  888 Y88b.   
 
   888  "Y88P"  888 888  888  "Y888   
 
 .d88P   
 
.d88P"   
 
888P"   
 
   
 
*/   
 
//////// ---------------------------------------------  JOINT ////////          JOINT         JOINT   
 
public class Joint : Part{   
 
   
 
   
 
  // Interface:   
 
      // Implication of Single   
 
   
 
  // Interraction:   
 
      // GetAngle   
 
      // GetVector                    [OVERRIDE]   
 
      // GetPose                    [OVERRIDE]   
 
      // GetOrient                    [OVERRIDE]   
 
      // Get_Velocity                    [OVERRIDE]   
 
      // AddRotationSpeed   
 
      // SetRotationSpeed   
 
   
 
   
 
   
 
    public IMyMotorStator    Mot;   
 
    public Single               VirtualSpeed;   
 
    public int                  Direction;   
 
    public Single               Offset;   
 
    public Joint                Slave;   
 
    public Hydraulic    HA;   
 
   
 
   
 
   
 
   
 
   
 
    // INTERFACE:   
 
   
 
    //// Implication of Single ////   
 
    public static implicit operator Single( Joint a )   
 
    {   return a.GetAngle();    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    // INTERACTION:   
 
   
 
    //// GetAngle ////   
 
    //Get the current or future angle of an Joint   
 
    public virtual Single GetAngle( Single dT = 0 )   
 
    {   
 
        Single Vel = this.Get_Velocity()*d*dT;   
 
        return this.Mot.Angle*this.Direction+this.Offset+Vel;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        return new Vector3();   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    ////  GetPose  ////   
 
    //Get the current or future angle of an Joint   
 
    public override Matrix GetPose( Single dT = 0 ){   
 
        switch (this.Axis)   
 
        {   
 
            case "X": return Matrix.CreateRotationX( this.GetAngle( dT )  );   
 
            case "Y": return Matrix.CreateRotationY( this.GetAngle( dT )  );   
 
            case "Z": return Matrix.CreateRotationZ( this.GetAngle( dT )  );   
 
            case "-X": return Matrix.CreateRotationX( -this.GetAngle( dT )  );   
 
            case "-Y": return Matrix.CreateRotationY( -this.GetAngle( dT )  );   
 
            case "-Z": return Matrix.CreateRotationZ( -this.GetAngle( dT )  );   
 
            default: return Matrix.CreateRotationZ( this.GetAngle( dT )  );   
 
        }   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
    ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        return this.GetPose(dT);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    //// Get_Velocity ////   
 
    //To get the current velocity of a Joint   
 
    public virtual Single Get_Velocity(  ){   
 
   
 
       Single Vel;   
 
       if ( this.Mot.Enabled )   
 
       {   
 
           Vel = this.Mot.Velocity*(Single)Math.PI/30; // from rpm to rad/s   
 
           //Vel = (Single)Math.Max(-30,Math.Min(30,Vel));   
 
           if ( this.Mot.Angle &gt;= this.Mot.UpperLimit )   
 
                Vel = (Single)Math.Min( Vel, 0 );   
 
            else if ( this.Mot.Angle &lt;= this.Mot.LowerLimit )   
 
                Vel = (Single)Math.Max( Vel, 0 );   
 
            Vel *= this.Direction;   
 
   
 
        } else Vel = 0;   
 
        return Vel;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    //// AddRotationSpeed ////   
 
    // Add delta to the velocity of the rotor. Recieve a angular delta in d(rad)/d(s).   
 
    // this is so we can apply velocityes to the same rotor from multiple Parts.   
 
    public void AddRotationSpeed( Single dV = 0 )   
 
    {   
 
   
 
        if ( DEBUG ) MyEcho( VirtualSpeed.ToString() );   
 
   
 
        SetRotationSpeed( VirtualSpeed*(Single)Math.PI/30*this.Direction+dV );   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    //// SetRotationSpeed ////   
 
    // Set the velocity of the rotor. Recieve a angular delta in d*rad.   
 
    public virtual void SetRotationSpeed( Single dV = 0 )   
 
    {   
 
   
 
   
 
        Single Vel = 0;   
 
   
 
        if ( !this.Mot.Enabled ) {   
 
   
 
            this.Mot.SetValue("Velocity", 0F );   
 
            VirtualSpeed = 0;   
 
   
 
        } else if( !this.Override ) {   
 
            // Get the desired acceleration   
 
   
 
   
 
            VirtualSpeed = dV/(Single)Math.PI*30*this.Direction;   
 
   
 
            Vel = VirtualSpeed;   
 
   
 
            // Limit the acceleration to avoid Clang's wrath   
 
            //Vel = (Single)Math.Max(-5,Math.Min(5,Vel));   
 
   
 
   
 
            // Smooting the limits by limiting speed near them   
 
            Single Maxim = 1;   
 
            Single Minim = 1;   
 
            Single Smoot = SMOOTLIMITS/2;   
 
   
 
   
 
            if ( this.Mot.UpperLimit != 361F )   
 
                Maxim = (Single)Math.Min( Smoot, this.Mot.UpperLimit-0.01F-this.Mot.Angle )/Smoot;   
 
            if ( this.Mot.LowerLimit != -361F )   
 
                Minim = (Single)Math.Min( Smoot, this.Mot.Angle-this.Mot.LowerLimit-0.01F )/Smoot ;   
 
   
 
            Vel = (Single)Math.Min( 60*Maxim, Vel );   
 
            Vel = (Single)Math.Max( -60*Minim, Vel );   
 
   
 
            // Applying the velocity to the rotor   
 
            if ( Math.Abs(Vel) &lt; 60)   
 
                this.Mot.SetValue("Velocity", Vel );   
 
        }   
 
   
 
        MyEcho("Vel: "+Vel.ToString("0.00"));   
 
        Vel *= (Single)Math.PI/30*this.Direction;   
 
        if ( this.Slave != null ) this.Slave.SetRotationSpeed( Vel );   
 
        if ( this.HA != null ) this.HA.Move( Vel*d );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
   
 
    public class Hydraulic{   
 
   
 
        Part    Actuator;   
 
        int     Direction;   
 
        Single  L1_2p2_2;   
 
        Single  L1mL2m2;   
 
   
 
        public void Move( Single dTheta ){   
 
   
 
            Single D = ((Vector3)this.Actuator).X;   
 
            Single Theta = (Single)Math.Acos( (SQ(D)-this.L1_2p2_2)/L1mL2m2 );   
 
            Single dD = (Single)Math.Sqrt( this.L1_2p2_2 + this.L1mL2m2 * Math.Cos( Theta+dTheta ) );   
 
            dD -= D;   
 
            this.Actuator.Move( new Vector3( dD/d*this.Direction, 0, 0 ) );   
 
        }   
 
   
 
        public Hydraulic(  Part Actuator = null,   
 
                           int Direction = 1,   
 
                           Single Length1 = 1,   
 
                           Single Length2 = 1  ){   
 
            this.Actuator = Actuator;   
 
            this.Direction = Direction;   
 
            this.L1_2p2_2 = SQ( Length1 )+SQ( Length2 );   
 
            this.L1mL2m2 = 2*Length1*Length2;   
 
        }   
 
    }   
 
   
 
   
 
   
 
   
 
   
 
   
 
    // CONSTRUCTORS   
 
   
 
    //// Constructor ////   
 
    public Joint(   String              RotorName,   
 
                    int                 Direction = 1,   
 
                    Single              Offset = 0,   
 
                    String              Axis = "Z",   
 
                    bool                Override = false,   
 
                    Joint               Slave = null,   
 
                    Hydraulic   HA = null )   
 
    {   
 
        if (!PartList.ContainsKey(RotorName))   
 
            PartList.Add( RotorName, this );   
 
   
 
        this.Mot = (IMyMotorStator)MyGTS.GetBlockWithName( RotorName );   
 
        if ( Mot == null )   
 
            MyEcho( "The rotor \"" + RotorName + "\" can't be found" );   
 
   
 
        this.VirtualSpeed = 0;   
 
        this.Direction = -Direction;   
 
        this.Offset = Offset/180*(Single)Math.PI;   
 
        this.Axis = Axis;   
 
        this.U = AxisToU( Axis );   
 
        this.Override = Override;   
 
        this.Slave = Slave;   
 
   
 
        this.HA = HA;   
 
   
 
   
 
   
 
   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
8888888b.                   888           d8888      888      888 d8b 888    d8b   
 
888   Y88b                  888          d88888      888      888 Y8P 888    Y8P   
 
888    888                  888         d88P888      888      888     888   
 
888   d88P  8888b.  888d888 888888     d88P 888  .d88888  .d88888 888 888888 888  .d88b.  88888b.   
 
8888888P"      "88b 888P"   888       d88P  888 d88" 888 d88" 888 888 888    888 d88""88b 888 "88b   
 
888        .d888888 888     888      d88P   888 888  888 888  888 888 888    888 888  888 888  888   
 
888        888  888 888     Y88b.   d8888888888 Y88b 888 Y88b 888 888 Y88b.  888 Y88..88P 888  888   
 
888        "Y888888 888      "Y888 d88P     888  "Y88888  "Y88888 888  "Y888 888  "Y88P"  888  888   
 
   
 
*/   
 
//////// ---------------------------------------------  PARTADDITION ////////     PARTADDITION      PARTADDITION   
 
public class PartAddition : Part{   
 
   
 
   
 
      // Interraction:   
 
          // GetPose                   [OVERRIDE]   
 
          // GetOrient                   [OVERRIDE]   
 
          // GetVector                  [OVERRIDE]   
 
          // Move                   [OVERRIDE]   
 
   
 
      // Constructors:   
 
          // Constructor              [OVERRIDE]   
 
   
 
   
 
    // Declaration of variables:   
 
    public Part Add1;   
 
    public Part Add2;   
 
   
 
   
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetPose  ////   
 
    public override Matrix GetPose( Single dT = 0 ){   
 
        var Pose = Add2.GetPose(dT)*Add1.GetPose(dT);   
 
        return Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
    ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        return this.Add2.GetOrient(dT)*this.Add1.GetOrient(dT);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        Matrix Mat = Matrix.CreateTranslation(Add2.GetVector(dT));   
 
        var Pose = Mat*Add1.GetPose(dT);   
 
        return Pose.Translation;   
 
        //return Add1.GetVector(dT)+Add2.GetVector(dT);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    ////  Move  ////   
 
    // Will try to move the first Part before the second   
 
    public override Vector3 Move( Vector3 TargetdV ){   
 
   
 
        var Orient = this.Add1.GetOrient(0);   
 
   
 
   
 
        var TargetdVMat = Matrix.CreateTranslation( TargetdV );   
 
        TargetdV = this.Add2.Move( ( TargetdVMat*Matrix.Invert(Orient) ).Translation );   
 
   
 
        TargetdVMat = Matrix.CreateTranslation( TargetdV )*Orient;   
 
   
 
        return this.Add1.Move( TargetdVMat.Translation );   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    // CONSTRUCTORS:   
 
   
 
    //// Constructor ////   
 
    public PartAddition( Part Add1, Part Add2) {   
 
        this.Add1 = Add1;   
 
        this.Add2 = Add2;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
.d8888b.           888 d8b      888 8888888b.                   888   
 
d88P  Y88b          888 Y8P      888 888   Y88b                  888   
 
Y88b.               888          888 888    888                  888   
 
"Y888b.    .d88b.  888 888  .d88888 888   d88P  8888b.  888d888 888888   
 
   "Y88b. d88""88b 888 888 d88" 888 8888888P"      "88b 888P"   888   
 
     "888 888  888 888 888 888  888 888        .d888888 888     888   
 
Y88b  d88P Y88..88P 888 888 Y88b 888 888        888  888 888     Y88b.   
 
"Y8888P"   "Y88P"  888 888  "Y88888 888        "Y888888 888      "Y888   
 
   
 
*/   
 
//////// ---------------------------------------------  SolidPart ////////     SOLIDPART     SOLIDPART   
 
public class SolidPart : Part{   
 
   
 
   
 
  // Interraction:   
 
      // GetPose                   [OVERRIDE]   
 
      // GetOrient                   [OVERRIDE]   
 
      // GetVector                  [OVERRIDE]   
 
      // Move                   [OVERRIDE]   
 
   
 
  // Constructors:   
 
      // Constructor 1   
 
      // Constructor 2   
 
   
 
   
 
    /*      Layout:   
 
   
 
            +Z   
 
            |   
 
            |   
 
            0-------- +Y   
 
             \   
 
              \   
 
               +X   
 
    */   
 
   
 
   
 
    // Declaration of variables:   
 
    Matrix       Mat;   
 
   
 
   
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetPose  ////   
 
    public override Matrix GetPose( Single dT = 0 ){   
 
        return this.Mat;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
     ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        return Matrix.CreateTranslation( new Vector3() );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  Move  ////   
 
    public override Vector3 Move( Vector3 TargetdV )   
 
    {   
 
       return TargetdV;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        return Mat.Translation;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    // CONSTRUCTORS:   
 
   
 
    //// Constructor 1 ////   
 
    public SolidPart( Vector3 Vec )   
 
    {   
 
        this.Mat = Matrix.CreateTranslation(Vec);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
    //// Constructor 2 ////   
 
    public SolidPart( Single X, Single Y, Single Z )   
 
    {   
 
        this.Mat = Matrix.CreateTranslation( X, Y, Z );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
8888888b.  d8b          888                      8888888b.                   888   
 
888   Y88b Y8P          888                      888   Y88b                  888   
 
888    888              888                      888    888                  888   
 
888   d88P 888 .d8888b  888888  .d88b.  88888b.  888   d88P  8888b.  888d888 888888   
 
8888888P"  888 88K      888    d88""88b 888 "88b 8888888P"      "88b 888P"   888   
 
888        888 "Y8888b. 888    888  888 888  888 888        .d888888 888     888   
 
888        888      X88 Y88b.  Y88..88P 888  888 888        888  888 888     Y88b.   
 
888        888  88888P'  "Y888  "Y88P"  888  888 888        "Y888888 888      "Y888   
 
   
 
*/   
 
//////// ---------------------------------------------  PistonPart ////////     PistonPart        PistonPart   
 
public class PistonPart : Part{   
 
   
 
   
 
  // Interraction:   
 
      // GetPose                   [OVERRIDE]   
 
      // GetOrient                   [OVERRIDE]   
 
      // GetVector                  [OVERRIDE]   
 
      // GetLenght   
 
      // Move                   [OVERRIDE]   
 
   
 
  // Constructors:   
 
      // Constructor   
 
   
 
   
 
        /*  Layout:   
 
   
 
                           Piston-----|   
 
   
 
        */   
 
   
 
   
 
   
 
   
 
    // Declaration of variables:   
 
    public IMyPistonBase   Piston;   
 
    public PistonPart           Slave;  
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetPose  ////   
 
    public override Matrix GetPose( Single dT = 0 )   
 
    {   
 
        this.Pose = Matrix.CreateTranslation( this.U*this.GetLenght( dT ) ) ;   
 
        return this.Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
      ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        return Matrix.CreateTranslation( new Vector3() );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        return this.U*this.GetLenght( dT );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    ////  GetLenght  ////   
 
    // Get the current or future piston's extention.   
 
    public Single GetLenght( Single dT )   
 
    {   
 
        Single Vel = this.Piston.Velocity*dT*d;   
 
        if ( this.Piston.Enabled ){   
 
            if ( this.Piston.CurrentPosition &gt;= this.Piston.MaxLimit )   
 
                Vel = (Single)Math.Min( Vel, 0 );   
 
            else if ( this.Piston.CurrentPosition &lt;= this.Piston.MinLimit )   
 
                Vel = (Single)Math.Max( Vel, 0 );   
 
        } else Vel = 0;   
 
   
 
   
 
        return (this.Piston.CurrentPosition+Vel);   
 
    }   
 
   
 
   
 
   
 
   
 
   
 
   
 
    ////  Move  ////   
 
    public override Vector3 Move( Vector3 TargetdV ){   
 
        if ( !this.Override )   
 
        {   
 
  
 
            if (Slave != null )  
 
                Slave.Move( TargetdV );  
 
  
 
            if ( DEBUG ) MyEcho( "PTdV = "+TargetdV.ToString("0.0") );   
 
            Single Vel = ((Single)Vector3.Dot( TargetdV, this.U ));   
 
   
 
            //Vel = (Single)Math.Max( this.Piston.Velocity-2, Math.Min( this.Piston.Velocity+2,Vel ));   
 
   
 
            Single Smoot = SMOOTLIMITS;   
 
            Single Maxim = (Single)Math.Min( Smoot,   
 
                                         this.Piston.MaxLimit-this.Piston.CurrentPosition )/Smoot;   
 
            Single Minim = (Single)Math.Min( Smoot,   
 
                                        this.Piston.CurrentPosition-this.Piston.MinLimit )/Smoot;   
 
   
 
            Vel = (Single)Math.Min( 10*Maxim, Vel ) ;   
 
            Vel = (Single)Math.Max( -10*Minim, Vel );   
 
   
 
            if ( Vel &lt; 10 &amp;&amp; Vel &gt; -10 ){   
 
                 this.Piston.SetValue("Velocity",  Vel );   
 
                 return TargetdV-Vel*this.U;   
 
            }   
 
        }   
 
   
 
        return TargetdV;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    // CONSTRUCTOR:   
 
   
 
    //// Constructor 1 ////   
 
    public PistonPart(   
 
                        String      PistonName,   
 
                        String      Axis = "X",   
 
                        bool         Override = false,  
 
                        PistonPart Slave = null  
 
                ) {   
 
   
 
        this.Slave = Slave;  
 
        this.U = AxisToU( Axis );   
 
        if (!PartList.ContainsKey(PistonName))   
 
            PartList.Add( PistonName, this );   
 
        this.Piston = (IMyPistonBase)MyGTS.GetBlockWithName( PistonName );   
 
        this.Override = Override;   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
d8888                       8888888b.                   888   
 
d88888                       888   Y88b                  888   
 
d88P888                       888    888                  888   
 
d88P 888 888d888 88888b.d88b.  888   d88P  8888b.  888d888 888888   
 
d88P  888 888P"   888 "888 "88b 8888888P"      "88b 888P"   888   
 
d88P   888 888     888  888  888 888        .d888888 888     888   
 
d8888888888 888     888  888  888 888        888  888 888     Y88b.   
 
d88P     888 888     888  888  888 888        "Y888888 888      "Y888   
 
   
 
*/   
 
/////// ---------------------------------------------  ArmPart ////////     ArmPart    ArmPart   
 
public class ArmPart : Part {   
 
   
 
   
 
   
 
   
 
      // Interraction:   
 
          // GetPose                   [OVERRIDE]   
 
          // GetOrient                   [OVERRIDE]   
 
          // GetVector                  [OVERRIDE]   
 
          // Move                   [OVERRIDE]   
 
   
 
    // Constructors:   
 
        // Constructor   
 
   
 
   
 
    /*      Layout:   
 
                             Joint2   
 
                             /   
 
                          /   
 
                       /   
 
                  Joint1   
 
    */   
 
   
 
   
 
   
 
   
 
    // Declaration of variables:   
 
    public Joint    Joint1;   
 
    public Part     Link;   
 
    public Joint    Joint2;   
 
    public bool     ShareJoint2;   
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetPose  ////   
 
    public override Matrix GetPose( Single dT = 0 ){   
 
   
 
        this.Pose = this.Joint1.GetPose( dT );   
 
        this.Pose = this.Link.GetPose( dT )*this.Pose;   
 
        if ( this.Joint2 != null &amp;&amp; !this.ShareJoint2 )   
 
            this.Pose = this.Joint2.GetPose( dT )*this.Pose;   
 
   
 
        return this.Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
     ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        if ( this.Joint2 != null &amp;&amp; !this.ShareJoint2 )   
 
            return this.Joint2.GetOrient(dT)*this.Link.GetOrient(dT)*this.Joint1.GetOrient(dT);   
 
   
 
       return this.Link.GetOrient(dT)*this.Joint1.GetOrient(dT);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    ////  GetVector  ////   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        var Mat = Matrix.CreateTranslation( this.Link.GetVector(dT) );   
 
        return (Mat*this.Joint1.GetPose( dT )).Translation;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    ////  Move  ////   
 
    public override Vector3 Move( Vector3 TargetdV ){   
 
        var Mem = new Vector3( TargetdV.X, TargetdV.Y, TargetdV.Z );   
 
        Matrix Orient;   
 
        Vector3 Vec3;   
 
        try{   
 
            Orient = this.Joint1.GetPose( 0 );   
 
            Vec3 = (this.Link.GetPose(0)*Orient).Translation;   
 
   
 
            if ( DEBUG ) MyEcho( "ATdV="+TargetdV.ToString("0.0") );   
 
   
 
            Matrix TargetdVMat = Matrix.CreateTranslation( TargetdV );   
 
   
 
   
 
            // move the Link   
 
            TargetdV = this.Link.Move( ( TargetdVMat*Matrix.Invert(Orient) ).Translation );   
 
            TargetdV = (Matrix.CreateTranslation( TargetdV )*Orient).Translation;   
 
   
 
   
 
            //TargetdV -= this.GetDeltaVector( )/d;   
 
            Vector2 RTargetdV = RelativePlane( TargetdV*d, this.Axis );   
 
            if ( DEBUG ) MyEcho( "ARTdV=("+(RTargetdV.X/d).ToString("0.0")+", "+(RTargetdV.Y/d).ToString("0.0") );   
 
   
 
   
 
            //Get the current position   
 
            Vector2 Vec = RelativePlane( Vec3, this.Axis );   
 
   
 
   
 
            if ( SQ( Vec.X )+SQ( Vec.Y )  &gt; 0.1F ){   
 
   
 
                //Find the needed rotation to get to the RTargetdV   
 
                Single A = (Single)Math.Atan2( Vec.Y, Vec.X );   
 
                Single dA = AngleProxy( A, (Single)Math.Atan2( Vec.Y+RTargetdV.Y, Vec.X+RTargetdV.X ) );   
 
   
 
                //Apply the correct velocities to Joints   
 
                this.Joint1.SetRotationSpeed( dA/d );   
 
   
 
            } else {   
 
                this.Joint1.SetRotationSpeed( 0 );   
 
            }   
 
   
 
            if ( this.Joint2 != null ){   
 
                if ( this.ShareJoint2 ) {   
 
                    this.Joint2.AddRotationSpeed( -this.Joint1.Get_Velocity() );   
 
                } else {   
 
                    this.Joint2.SetRotationSpeed( -this.Joint1.Get_Velocity() );   
 
                }   
 
            }   
 
   
 
        }   
 
        catch( Exception ){   
 
            MyEcho( "Execution error in 'ArmPart'" );   
 
        }   
 
   
 
   
 
        return Mem-this.GetDeltaVector( )/d;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
   
 
   
 
    // CONSTRUCTORS:   
 
   
 
    ////  Constructor ////   
 
    public ArmPart(   
 
                                    String     Axis = "Y",   
 
                                    Joint       Joint1 = null,   
 
                                    Part        Link = null,   
 
                                    Joint       Joint2 = null,   
 
                                    bool        ShareJoint2 = false   
 
                                ){   
 
   
 
   
 
        this.Axis = Axis;   
 
        this.U =    AxisToU( Axis );   
 
        this.Joint1 = Joint1;   
 
        this.Joint1.U = this.U;   
 
        this.Joint1.Axis = this.Axis;   
 
        this.Link = Link;   
 
        this.Joint2 = Joint2;   
 
        if ( this.Joint2 != null ){   
 
            this.Joint2.U = this.U;   
 
            this.Joint2.Axis = this.Axis;   
 
            this.ShareJoint2 = ShareJoint2;   
 
        }   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
  
             
           
</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="0" z="1" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="55" y="0" z="-4" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="45" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="54" y="0" z="-4" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="46" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="47" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="48" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="50" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="54" y="0" z="-1" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="54" y="0" z="-2" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="46" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="47" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="48" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="50" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="53" y="0" z="-2" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="55" y="0" z="-1" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="55" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>139061263269402274</EntityId>
              <Min x="56" y="0" z="-3" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Cam Driver</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04719758</Fov>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="58" y="-1" z="-4" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="55" y="0" z="-2" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="55" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="54" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="52" y="0" z="-2" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="56" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="52" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="52" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="53" y="0" z="-4" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="56" y="-2" z="-5" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="45" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="51" y="0" z="-5" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="51" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="50" y="0" z="-5" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="49" y="0" z="-5" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="48" y="0" z="-5" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="47" y="0" z="-5" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="46" y="0" z="-5" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="45" y="0" z="-5" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="-1" z="-2" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="50" y="1" z="-3" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="58" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="52" y="0" z="-5" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="49" y="0" z="-2" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="56" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="51" y="0" z="-2" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="49" y="0" z="-4" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="51" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="49" y="0" z="-3" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="54" y="0" z="-3" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="51" y="1" z="-4" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="-1" z="-4" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="56" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="52" y="0" z="-1" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>93282296818494236</EntityId>
              <Min x="53" y="-1" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <CustomName>Wheel Suspensions 7</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>131677781121062651</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>0.306018829</Strength>
              <Propulsion>false</Propulsion>
              <Friction>0.219650835</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0</MaxSteerAngle>
              <SteerSpeed>0</SteerSpeed>
              <SteerReturnSpeed>0</SteerReturnSpeed>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SuspensionTravel>0.402135044</SuspensionTravel>
              <SpeedLimit>250.092712</SpeedLimit>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="50" y="0" z="-3" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>126960951227700149</EntityId>
              <Min x="54" y="-1" z="-2" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Gyroscope</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="51" y="0" z="-1" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="52" y="0" z="-4" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="53" y="0" z="-5" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="50" y="0" z="-1" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="49" y="0" z="-1" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="48" y="0" z="-1" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="47" y="0" z="-1" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="46" y="0" z="-1" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="45" y="0" z="-1" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>79710812864406190</EntityId>
              <Min x="44" y="0" z="-2" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.266666681" y="-0.15" z="-0.55" />
              <CustomName>Atmospheric Thrusters</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="44" y="0" z="-1" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>92511240223883750</EntityId>
              <Min x="44" y="0" z="-4" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.266666681" y="-0.15" z="-0.55" />
              <CustomName>Atmospheric Thrusters 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="44" y="0" z="-5" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="-1" z="-3" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>78846554539720960</EntityId>
              <Min x="51" y="0" z="-3" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Motor1 "Azimuth"</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>110884401872207298</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <Friction>0.9744086</Friction>
              <TargetVelocity>0</TargetVelocity>
              <MinAngle xsi:nil="true" />
              <MaxAngle xsi:nil="true" />
              <CurrentAngle>2.71883249</CurrentAngle>
              <LimitsActive>false</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="54" y="0" z="-5" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>136354686269000487</EntityId>
              <Min x="54" y="-1" z="-4" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Gyroscope</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="59" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="45" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="47" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="46" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="46" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="54" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="46" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="58" y="-1" z="-2" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="47" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="46" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="47" y="0" z="-4" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="47" y="0" z="-2" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="45" y="0" z="-3" />
              <ColorMaskHSV x="0.266666681" y="-0.15" z="-0.55" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="53" y="0" z="-3" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="53" y="0" z="-1" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="55" y="0" z="-5" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="50" y="0" z="-2" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="50" y="0" z="-4" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>87600886295141946</EntityId>
              <Min x="52" y="-1" z="-3" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Rseat2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>81548530325302923</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0</TargetVelocity>
              <MinAngle xsi:nil="true" />
              <MaxAngle xsi:nil="true" />
              <CurrentAngle>3.11967683</CurrentAngle>
              <LimitsActive>false</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RemoteControl">
              <SubtypeName>SmallBlockRemoteControl</SubtypeName>
              <EntityId>82317644129810506</EntityId>
              <Min x="54" y="-1" z="-3" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>ADriverRC</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreasePower</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>WH</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreasePower</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>WH</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>WH</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>WH</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>WH</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>WH</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseStrength</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>WH</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseStrength</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>WH</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>HandBrake</Action>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>9</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>139061263269402274</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>10</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>124386803149125880</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>11</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>92141809896083356</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>12</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>79302216411557445</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>13</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>95933841827690218</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>14</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>137297959657450361</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>15</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>77750756332039157</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>16</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>73197065098465392</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>17</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>89954160883401502</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>18</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>Turret switch</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>19</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>turret DG switch</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>20</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>Gattlings</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>21</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Shoot</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>Gattlings</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>22</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>127779292052327163</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>23</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Shoot</Action>
                      <BlockEntityId>127779292052327163</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>24</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemWeapon">
                      <DefinitionId Type="MyObjectBuilder_SmallMissileLauncher" Subtype="" />
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>25</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>110748912253565638</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>26</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>124386803149125880</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>27</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>28</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetMissiles</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>29</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetSmallShips</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>30</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetLargeShips</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>31</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetStations</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>32</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetCharacters</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>33</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetNeutrals</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>34</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>114133199966191645</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>35</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Reverse</Action>
                      <BlockEntityId>129683276568889511</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>36</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>GY</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>37</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Override</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>GY</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>38</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>Headlights</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>39</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>73798704697666123</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>40</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>112115762575610756</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>41</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>108934167349038992</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>42</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>EnableBroadCast</Action>
                      <BlockEntityId>108934167349038992</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>43</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>82317644129810506</BlockEntityId>
                      <GroupName>PBs</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>44</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>103394600491645425</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <SelectedGunId Type="MyObjectBuilder_SmallMissileLauncher" Subtype="" />
              <HorizonIndicatorEnabled>false</HorizonIndicatorEnabled>
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
              </BuildToolbar>
              <PreviousControlledEntityId xsi:nil="true" />
              <AutoPilotEnabled>false</AutoPilotEnabled>
              <FlightMode>2</FlightMode>
              <BindedCamera>0</BindedCamera>
              <CurrentWaypointIndex>-1</CurrentWaypointIndex>
              <Waypoints />
              <Direction>0</Direction>
              <DockingModeEnabled>false</DockingModeEnabled>
              <CollisionAvoidance>false</CollisionAvoidance>
              <Coords />
              <Names />
              <AutopilotSpeedLimit>19.6373711</AutopilotSpeedLimit>
              <WaypointThresholdDistance>0</WaypointThresholdDistance>
              <IsMainRemoteControl>true</IsMainRemoteControl>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>94390896013924080</EntityId>
              <Min x="50" y="-1" z="-4" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key xmlns:q1="http://microsoft.com/wsdl/types/" xsi:type="q1:guid">74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value xsi:type="xsd:string">groupNameTag = MART
elevationRotorNameTag = Elevation
azimuthRotorNameTag = Azimuth
mouseSpeedModifier = 0.25
cockpitRelativeMouseControl = False
fireWeaponsOnCrouch = True
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>PBmanual turret Gunner</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Program>      // Title       : MArmOS (Mechanical Arm Operating System)         
   // Author      : Timotei~         
 /* Description : Marmos is a framework allowing to control many shape of mechanical arm by         
                           simplifying them into a cartesian coordinate system.         
*/         
         
    //***********************************************************************//         
  //*****************  Table of content  *******************************//         
//***********************************************************************//         
/*         
    | SECTION___________________LINE         
    |         
    | Parameters                            ~20         
    | Component Declaration         ~35         
    | ArmConfiguration                  ~50         
    | Main                                       ~90         
    | Documentation                      ~150         
    | MArmOS's entrails                ~250         
         
*/         
             
             
    //***********************************************************************//             
  //***************************  Parameters  ***************************//             
//***********************************************************************//             
             
static Single d     = 0.0005F;       // No need to chage this             
static Single SMOOTLIMITS     = 6F;       // How smoot part's limits should be             
static Single MOUSE_SENSITIVITY_X = -0.06F;             
static Single MOUSE_SENSITIVITY_Y = -0.06F;             
static Single BG    = 2.5F;     // Big Grid block size             
static Single SG    = 0.5F;     // Small Grid block size             
static bool  DEBUG = true;             
static String DebugScreenName = "ArmPanel";           
             
             
             
             
    //***********************************************************************//             
  //*************  Component Declaration  **************************//             
//***********************************************************************//             
// You can declare your Parts here.             
             
             
// example             
ArmController MyArmController;             
             
             
             
             
             
    //***********************************************************************//             
  //*********************  ArmConfiguration  **************************//             
//***********************************************************************//             
public void ArmConfiguration(){             
    // You can define your Parts here             
             
    //Example             
    var Prefix = "";          
    var Motor1 = new Joint( RotorName: Prefix+"Motor1"                                                                   );    

          
    var Motor2 = new Joint( RotorName: Prefix+"Motor2"                                                                 );              
        
           
          
          
                 
    var MyArm = new ArmPart(                 
        "Z"                 
        , Motor1                 
        , new SolidPart( 4*SG, 0, -3*SG ) 

        );                        
           
          
    MyArmController = new ArmController(             
        Arm:MyArm             
        , ShipControllerKeyword:    "AGunnerRC"             
        , Yaw:                   Motor1             
        , Pitch:                  Motor2             
        , Smoot:                40            
        , Speed:                3F             
        , RelativeX:           true             
        , RelativeY:           true            
        , RelativeZ:           true             
    );             
             
}             
             
             
             
     //***********************************************************************//             
   //**************************  MArmOS Main  ********************************//             
 //***********************************************************************//             
 public void MArmOS_Main(string argument) {             
             
    // MArmOS call this function at every execution             
    // You can put your code here             
             
             
             
             
    // Example             
    MyArmController.Update( argument );             
             
             
             
             
             
             
}             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
     
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
 
   
 
/*   
 
   
 
8888888b.                                                             888             888    d8b   
 
888  "Y88b                                                            888             888    Y8P   
 
888    888                                                            888             888   
 
888    888  .d88b.   .d8888b 888  888 88888b.d88b.   .d88b.  88888b.  888888  8888b.  888888 888  .d88b.  88888b.   
 
888    888 d88""88b d88P"    888  888 888 "888 "88b d8P  Y8b 888 "88b 888        "88b 888    888 d88""88b 888 "88b   
 
888    888 888  888 888      888  888 888  888  888 88888888 888  888 888    .d888888 888    888 888  888 888  888   
 
888  .d88P Y88..88P Y88b.    Y88b 888 888  888  888 Y8b.     888  888 Y88b.  888  888 Y88b.  888 Y88..88P 888  888   
 
8888888P"   "Y88P"   "Y8888P  "Y88888 888  888  888  "Y8888  888  888  "Y888 "Y888888  "Y888 888  "Y88P"  888  888   
 
   
 
*/   
 
   
 
   
 
    //***********************************************************************//     DOCUMENTATION    DOCUMENTATION    DOCUMENTATION   
 
  //*********************  Documentation  ****************************//          DOCUMENTATION    DOCUMENTATION    DOCUMENTATION   
 
//***********************************************************************//       DOCUMENTATION    DOCUMENTATION    DOCUMENTATION   
 
   
 
  /*   
 
   
 
     ////                     List of all classes:                    ////   
 
   
 
    [] means optionnal   
 
   
 
    ////  ArmController  ////   
 
        Constructor:   
 
            new ArmController(   
 
                Part                Arm,   
 
                String              [Name],                 // Alow to give commands to a specific Controller via argument or textpanel. default = ""   
 
                String              [ShipControllerKeyword], // default = ""   
 
                IMyTextPanel        [TextPanelInput],       // default = null   
 
                Single              [Smootness],            // default = 10   
 
                Single              [Speed],                // default = 1   
 
                Joint               [Pitch],                // default = null   
 
                Joint               [Yaw],                  // default = null   
 
                Joint               [Roll],                 // default = null   
 
                IMyTimerBlock       [TargetReachedTimer]    // default = null   
 
            )   
 
   
 
   
 
    ////  Joint  ////   
 
        Constructor:   
 
            new Joint(   
 
                String              RotorName,   
 
                int                   [Direction],              // Direction of rotation  1 or -1   
 
                Single             [Offset],          // Angle in deg°   
 
                String             [Axis],                 // Axis of rotation, default = "Z", will be overriden if used on a ArmPArt.   
 
                bool                [Override]              // MArmOS won't control this joint if true. default = false   
 
            )   
 
   
 
   
 
    ////  SolidPart  ////   
 
        Constructor:   
 
            new Part(   
 
                Single    X,   
 
                Single    Y,   
 
                Single    Z   
 
            )   
 
            or   
 
            new Part(   
 
                Vector3   Vector   
 
            )   
 
            note: units are in meters, not in blocks. Constants hva been created to help:  BG=2.5F   SG=0.5F   
 
   
 
   
 
    ////  PistonPart  ////   
 
        Constructor:   
 
            new PistonPart(   
 
                String                  PistonName,   
 
                String                  Direction         // e.g. "X"   
 
                bool                    [Override]        // default = false   
 
            )   
 
   
 
   
 
    ////  ArmPart  ////   
 
        Constructor:   
 
            new ArmPart(   
 
                String     Axis,     //e.g. "Z"   
 
                Joint       Joint1,   
 
                Part        Arm,   
 
                Joint       [Joint2]              // default = null   
 
                bool        [ShareJoint2]         // default = false   
 
            )   
 
   
 
  */   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
888b     d888        d8888                        .d88888b.   .d8888b.   
 
8888b   d8888       d88888                       d88P" "Y88b d88P  Y88b   
 
88888b.d88888      d88P888                       888     888 Y88b.   
 
888Y88888P888     d88P 888 888d888 88888b.d88b.  888     888  "Y888b.   
 
888 Y888P 888    d88P  888 888P"   888 "888 "88b 888     888     "Y88b.   
 
888  Y8P  888   d88P   888 888     888  888  888 888     888       "888   
 
888   "   888  d8888888888 888     888  888  888 Y88b. .d88P Y88b  d88P   
 
888       888 d88P     888 888     888  888  888  "Y88888P"   "Y8888P"   
 
   
 
*/   
 
   
 
    //***********************************************************************//       MArmOS       MArmOS       MArmOS   
 
  //*********************  MArmOS's entrails  ************************//        MArmOS       MArmOS       MArmOS   
 
//***********************************************************************//       MArmOS       MArmOS       MArmOS   
 
   
 
   
 
   
 
static System.Action&lt;String&gt; mEcho;          // A pointer to the Echo method   
 
static IMyGridTerminalSystem MyGTS;   // A pointer to the grid terminal system   
 
static IMyProgrammableBlock MyMe;          // A pointer to the Programmable block   
 
//int Clock = 0;   
 
   
 
static void MyEcho( String Text ){   
 
    mEcho( Text );   
 
    try{   
 
        IMyTextPanel debug = (IMyTextPanel)MyGTS.GetBlockWithName( DebugScreenName );   
 
        debug.WritePublicText( Text+"\n", true );   
 
    } catch( Exception ){}   
 
}   
 
   
 
public Program() {   
 
    // Set variables   
 
    var dummy =   BG;   
 
    dummy =       SG;   
 
    mEcho =      Echo;   
 
    MyGTS =       GridTerminalSystem;   
 
    MyMe =        Me;   
 
   
 
    try {   
 
        // Call the configuration of the arm   
 
        ArmConfiguration();   
 
    } catch( Exception ){}   
 
}   
 
   
 
   
 
public void Main(string argument) {   
 
    try {   
 
        // Check the arm configuration every couple thick   
 
        //if ( (Clock++) == 240 ){   
 
            //ArmConfiguration(); // reload the arm   
 
            //Clock = 0;   
 
        //}   
 
        // Call the MArmOS_Main function   
 
   
 
        try{   
 
            IMyTextPanel debug = (IMyTextPanel)MyGTS.GetBlockWithName( DebugScreenName );   
 
            debug.WritePublicText( "", false );   
 
        } catch( Exception ){}   
 
   
 
        MArmOS_Main( argument );   
 
    }   
 
    catch( Exception ){   
 
        Echo("Problem detected, check your configuration");   
 
        // Set variables   
 
        var dummy =   BG;   
 
        dummy =       SG;   
 
        MyGTS =       GridTerminalSystem;   
 
        MyMe =        Me;   
 
   
 
        try{   
 
            ArmConfiguration(); // reload the arm   
 
        } catch( Exception ){}   
 
    }   
 
   
 
}   
 
   
 
   
 
   
 
   
 
   
 
    //***********************************************************************// CLASS     CLASS     CLASS     CLASS   
 
  //*********************  Classes Definition  *************************//      CLASS     CLASS     CLASS     CLASS   
 
//***********************************************************************//     CLASS     CLASS     CLASS     CLASS   
 
   
 
  /*   
 
     List of all classes:   
 
      - ArmController   
 
      - Part   
 
      - Joint   
 
      - SolidPart   
 
      - PartAddition   
 
      - PistonPart   
 
      - ArmPart   
 
  */   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
       d8888                        .d8888b.                    888                     888   
 
      d88888                       d88P  Y88b                   888                     888   
 
     d88P888                       888    888                   888                     888   
 
    d88P 888 888d888 88888b.d88b.  888         .d88b.  88888b.  888888 888d888  .d88b.  888  .d88b.  888d888   
 
   d88P  888 888P"   888 "888 "88b 888        d88""88b 888 "88b 888    888P"   d88""88b 888 d8P  Y8b 888P"   
 
  d88P   888 888     888  888  888 888    888 888  888 888  888 888    888     888  888 888 88888888 888   
 
 d8888888888 888     888  888  888 Y88b  d88P Y88..88P 888  888 Y88b.  888     Y88..88P 888 Y8b.     888   
 
d88P     888 888     888  888  888  "Y8888P"   "Y88P"  888  888  "Y888 888      "Y88P"  888  "Y8888  888   
 
   
 
*/   
 
   
 
//////// ---------------------------------------------  ArmController ////////        ArmController        ArmController   
 
   
 
public class ArmController {   
 
   
 
    // Parameters   
 
    public Part             Arm;   
 
    public String           Name;   
 
    public Single           Speed;   
 
    public Single           Smoot;   
 
    public Single           Tolerence;   
 
    public bool             RelativeX;   
 
    public bool             RelativeY;   
 
    public bool             RelativeZ;   
 
   
 
    // Components   
 
    public Joint            Pitch;   
 
    public Joint            Yaw;   
 
    public Joint            Roll;   
 
    public IMyTimerBlock    TargetReachedTimer = null;   
 
    public string           ShipControllerKeyword;   
 
    public bool             TrackInputs = true;   
 
    public IMyTextPanel     Panel = null;   
 
   
 
    // Variables   
 
    Vector3                 TargetPos;   
 
    bool                    TrackTarget;   
 
    Vector3                 TargetOri;   
 
    bool                    TrackTargetOri;   
 
    Vector3                 VirtualPos;   
 
    Vector3                 TargetVelocity;   
 
    Vector3                 SmootTargetVelocity;   
 
    Vector3                 InputVec;   
 
    Vector3                 Rot;   
 
    Vector3                 Drift;   
 
   
 
    public void Update( String argument = "" ){   
 
   
 
        TargetVelocity = new Vector3();   
 
        Vector3 Pos = this.Arm.GetVector();   
 
        Vector3 Ori = this.GetRot();   
 
        Vector3 PreRot = new Vector3();   
 
        Vector3 Diff;   
 
        InputVec = new Vector3();   
 
   
 
        MyEcho("Pos="+Pos.ToString("0.0"));   
 
   
 
        // Get the TextPanel's inputs   
 
        if ( Panel != null ){   
 
            try{   
 
                String Text = Panel.GetPublicText();   
 
                Parse( Text );   
 
            } catch( Exception ){   
 
                MyEcho( "Error: The text panel can't be found" );   
 
            }   
 
        }   
 
        // Get the Argument's inputs   
 
        if ( argument != "" )  {   
 
            Parse( argument );   
 
        }   
 
        this.TargetVelocity += this.InputVec;  // Appy the unput velocity to the target velocity   
 
   
 
   
 
        // ------------------&lt;&lt;&lt;   G E T I N G   I N P U T S   &gt;&gt;&gt;-----------------------   
 
        // Get the controllers inputs if TrackInput is true   
 
        if ( TrackInputs ){   
 
            this.InputVec = new Vector3();   
 
   
 
            // Get the list of all Desired controllers   
 
            List&lt;IMyTerminalBlock&gt; Controllers = new List&lt;IMyTerminalBlock&gt;();   
 
            MyGTS.SearchBlocksOfName(this.ShipControllerKeyword, Controllers);   
 
   
 
            // Get the inputs from all desired controllers   
 
            foreach ( IMyTerminalBlock Controller in Controllers ) {   
 
                try{   
 
                    if ( ((IMyShipController)Controller).IsUnderControl ){   
 
                        this.InputVec += GetLinearInputs( (IMyShipController)Controller );  // &lt;&lt; L I N E A R   I N P U T S &gt;&gt;   
 
                        PreRot += GetRotationInputs( (IMyShipController)Controller );    // &lt;&lt; A N G U L A R   I N P U T S &gt;&gt;   
 
                    }   
 
                } catch (Exception){}   
 
            }   
 
            // Normalyse the linear velocity target   
 
            if ( this.InputVec.Length() &gt; 0.001F )   
 
                this.InputVec *= this.Speed/this.InputVec.Length();   
 
            this.TargetVelocity += this.InputVec;   
 
   
 
            // Apply the velocity to the effector's joints   
 
            Rot += (PreRot-Rot)/Smoot;  // Soften the rotational input to avoid jerkyness     // &lt;&lt; R O L L   I N P U T &gt;&gt;   
 
            if (this.Yaw != null)     this.Yaw.SetRotationSpeed( Rot.X*MOUSE_SENSITIVITY_X );   
 
            if (this.Pitch != null)    this.Pitch.SetRotationSpeed( Rot.Y*MOUSE_SENSITIVITY_Y );   
 
            if (this.Roll != null)      this.Roll.SetRotationSpeed( Rot.Z );   
 
        }   
 
   
 
        // Relativise the inputs   
 
         if ( this.RelativeX || this.RelativeY || this.RelativeZ ){   
 
            var Mat = Matrix.CreateTranslation( this.TargetVelocity );   
 
            var Orient = Arm.GetOrient(0);  ///////  TODO more flexible plz   
 
            Mat = Mat*Orient;   
 
            if ( RelativeX )    this.TargetVelocity.X = Mat.Translation.X;   
 
            if ( RelativeY )    this.TargetVelocity.Y = Mat.Translation.Y;   
 
            if ( RelativeZ )    this.TargetVelocity.Z = Mat.Translation.Z;   
 
        }   
 
   
 
        // Move to get to the targeted position   
 
   
 
   
 
   
 
        if ( this.TrackTarget ){   
 
            this.InputVec = this.TargetPos-Pos;   
 
            Single L = this.InputVec.Length();   
 
   
 
            if ( L &lt; Tolerence ){   
 
                this.TrackTarget = false;   
 
            } else {   
 
                this.InputVec *= this.Speed/(Single)Math.Max(this.Speed,L);   
 
                MyEcho( "Moving Toward: "+this.TargetPos.ToString( "0.00" ) );   
 
                this.TargetVelocity += this.InputVec;   
 
            }   
 
   
 
        }   
 
        if ( this.TrackTargetOri ){   
 
   
 
            Vector3 OO = new Vector3( AngleProxy( Ori.X, this.TargetOri.X )   
 
                                    , AngleProxy( Ori.Y, this.TargetOri.Y )   
 
                                    , AngleProxy( Ori.Z, this.TargetOri.Z ) );   
 
            if ( OO.Length() &lt; 0.05 ){   
 
                this.TrackTargetOri = false;   
 
            } else {   
 
                MyEcho( "Orient Toward: "+this.TargetOri.ToString( "0.00" ) );   
 
                if (this.Yaw != null)     this.Yaw.AddRotationSpeed( OO.X*0.5F );   
 
                if (this.Pitch != null)    this.Pitch.AddRotationSpeed( OO.Y*0.5F );   
 
                if (this.Roll != null)      this.Roll.AddRotationSpeed( OO.Z*0.5F );   
 
            }   
 
        }   
 
   
 
   
 
   
 
   
 
        MyEcho("VirtualPos="+VirtualPos.ToString("0.0"));   
 
   
 
        // Soften the target velocity to avoid jerkyness   
 
        this.SmootTargetVelocity += ( this.TargetVelocity-SmootTargetVelocity )/this.Smoot;   
 
   
 
   
 
   
 
        // ------------------&lt;&lt;&lt;   C A L C U L A T I N G   M O V E M E N T S   &gt;&gt;&gt;-----------------------   
 
        MyEcho("TargetVelocity="+TargetVelocity.ToString("0.0"));   
 
   
 
        this.VirtualPos += this.SmootTargetVelocity/60;   
 
   
 
        Diff = VirtualPos-Pos;   
 
        if( Diff.Length() &gt; this.Speed/4){   
 
            Diff *= this.Speed/4/Diff.Length();   
 
            this.VirtualPos = Pos+Diff;   
 
        }   
 
   
 
        // Apply correction if drifting   
 
        this.TargetVelocity += (Diff)*1F;   
 
   
 
        if ( this.TargetVelocity.Length() &lt; 0.02F ) this.TargetVelocity = new Vector3();   
 
   
 
        // Determine the supposed position to get   
 
        if ( this.TargetVelocity.Length() &gt; 0.05F || PreRot.Length() &gt; 0.05F ){   
 
            MyEcho("Input: true");   
 
        } else {   
 
   
 
            MyEcho("Input: false");   
 
            //this.VirtualPos = Pos;   
 
            //Diff = new Vector3();   
 
            this.TargetVelocity *= 0.99F;   
 
            this.Drift *= 0.99F;   
 
        }   
 
   
 
   
 
   
 
        // Move the arm   
 
        if ( this.Drift.Length() &gt; 0.0004F || this.SmootTargetVelocity.Length() &gt; 0.0004 || PreRot.Length() &gt; 0.001 ){   
 
            MyEcho("Moving: ON");   
 
            this.Drift += this.SmootTargetVelocity;   
 
            var Dl = this.Drift.Length();   
 
            Arm.Move( this.Drift/Dl*(this.SmootTargetVelocity.Length()+Dl)/2 );   
 
            this.Drift -= Arm.GetDeltaVector()/d;   
 
            if ( Drift.Length() &gt; Speed*2 )   
 
   
 
                Drift *= Speed*2/Drift.Length();   
 
        } else {   
 
            MyEcho("Moving: OFF");   
 
            this.SmootTargetVelocity *= 0.9F;   
 
            this.Drift = new Vector3();   
 
        }   
 
    }   
 
   
 
   
 
    public Vector3 GetRot( Single dt = 0 ) {   
 
   
 
        var Out = new Vector3();   
 
   
 
        if (this.Yaw != null)     Out.X = this.Yaw.GetAngle(dt);   
 
        if (this.Pitch != null)    Out.Y = this.Pitch.GetAngle(dt);   
 
        if (this.Roll != null)      Out.Z = this.Roll.GetAngle(dt);   
 
   
 
        return Out;   
 
    }   
 
   
 
   
 
   
 
   
 
    ////  AngleProxy  ////   
 
    // Give the smallest difference between two angles   
 
    public static Single AngleProxy( Single A1, Single A2 )   
 
    { //Return the relative Proxymity between two Angles   
 
        A1 = A2-A1;   
 
        A1 = Mod( A1+(Single)Math.PI, (Single)2*(Single)Math.PI )-(Single)Math.PI;   
 
        return A1; }   
 
    //// ----------------------------- ////   
 
   
 
    ////  Mod  ////   
 
    public static Single Mod( Single A, Single N ){   
 
        return A-(Single)Math.Floor(A/N)*N;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    // ------------------&lt;&lt;&lt;   P A R S I N G   A R G U M E N T   &gt;&gt;&gt;-----------------------   
 
    // Function used to parse the content of a string   
 
    public void Parse( String Argument ){   
 
   
 
        string Word;   
 
        String[] Lines = Argument.Split( '\n' );   
 
        foreach ( String Line in Lines ){   
 
            String[] Commands = Line.Split( ';' );   
 
            foreach ( String Command in Commands ){   
 
                String[] Words = Command.Split( ' ' );   
 
                int i = 0;   
 
   
 
                if ( this.Name != "" ) i++;   
 
   
 
                if ( (this.Name == "") || (Words[0] == this.Name) ){   
 
                    switch(Words[i++]){   
 
   
 
   
 
                        // Synopsis: Smoot Number   
 
                        case "Smoot":   
 
                            this.Smoot = (Single)Math.Max(1,Convert.ToSingle(Words[i++]));   
 
                        break;   
 
                        // Synopsis: Tolerence Number   
 
                        case "Tolerence":   case "-T":   
 
                            this.Tolerence = (Single)Math.Max(1,Convert.ToSingle(Words[i++]));   
 
                        break;   
 
   
 
                        // Synopsis: Override   
 
                        case "Override":  case "-O":   
 
                            Word = Words[i++];   
 
                            if ( Word == "On" ){   
 
                                try{   
 
                                    string PartName = Reform( Words, i );   
 
                                    if (Part.PartList.ContainsKey(PartName))   
 
                                        Part.PartList[PartName].Override = true;   
 
                                } catch( Exception ){   
 
                                    MyEcho( "Parsing error in 'Override'" );   
 
                                }   
 
                            } else if ( Word == "Off" || Word == "0" ) {   
 
                                try{   
 
                                    string PartName = Reform( Words, i );   
 
                                    if (Part.PartList.ContainsKey(PartName))   
 
                                        Part.PartList[PartName].Override = false;   
 
                                } catch( Exception ){   
 
                                    MyEcho( "Parsing error in 'Override'" );   
 
                                }   
 
                            } else if ( Word == "Toggle" || Word == "-1" ) {   
 
                                try{   
 
                                    string PartName = Reform( Words, i );   
 
                                    if (Part.PartList.ContainsKey(PartName))   
 
                                        Part.PartList[PartName].Override = !Part.PartList[PartName].Override;   
 
                                } catch( Exception ){   
 
                                    MyEcho( "Parsing error in 'Override'" );   
 
                                }   
 
                            }else {   
 
                                MyEcho( "The override need a status keyword ( On, Off or Toggle)" );   
 
                            }   
 
                        break;   
 
   
 
   
 
                        // Synopsis: TrackInputs   
 
                        case "TrackInputs":  case "-TI":   
 
                            Word = Words[i++];   
 
                            if ( Word == "On" ){   
 
                                this.TrackInputs = true;   
 
                            } else if ( Word == "Off" || Word == "0" ) {   
 
                                this.TrackInputs = false;   
 
                            } else if ( Word == "Toggle" || Word == "-1" ) {   
 
                                this.TrackInputs = !this.TrackInputs;   
 
                            }else {   
 
                                MyEcho( "The TrackInputs need a status keyword ( On, Off or Toggle)" );   
 
                            }   
 
                        break;   
 
   
 
   
 
   
 
                        // Synopsis: PrintPosition TextPanelName   
 
                        case "PrintPosition":  case "-PP":   
 
                            try{   
 
                                String PanelName = Reform( Words, i );   
 
                                IMyTextPanel Panel = (IMyTextPanel)MyGTS.GetBlockWithName( PanelName );   
 
                                if ( Panel == null ) {   
 
                                    MyEcho( PanelName+" not found");   
 
                                } else {   
 
                                    Vector3 Pos = (Vector3)this.Arm;   
 
                                    Panel.WritePublicText( "\nMoveTo "+Pos.X.ToString("0.00"), true );   
 
                                    Panel.WritePublicText( " "+Pos.Y.ToString("0.00"), true );   
 
                                    Panel.WritePublicText( " "+Pos.Z.ToString("0.00"), true );   
 
                                    if ( this.Yaw != null )   
 
                                        Panel.WritePublicText( " "+((Single)this.Yaw).ToString("0.00"), true );   
 
                                    if ( this.Pitch != null )   
 
                                        Panel.WritePublicText( " "+((Single)this.Pitch).ToString("0.00"), true );   
 
                                    if ( this.Roll != null )   
 
                                        Panel.WritePublicText( " "+((Single)this.Roll).ToString("0.00"), true );   
 
                                }   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'PrintPosition'" );   
 
                            }   
 
                        break;   
 
   
 
                        // Synopsis: ClearPanel TextPanelName   
 
                        case "ClearPanel":  case "-CP":   
 
                            try{   
 
                                String PanelName = Reform( Words, i );   
 
                                IMyTextPanel Panel = (IMyTextPanel)MyGTS.GetBlockWithName( PanelName );   
 
                                if ( Panel == null ) {   
 
                                    MyEcho( PanelName+" not found");   
 
                                } else {   
 
                                    Panel.WritePublicText( "", false );   
 
                                }   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'ClearPanel'" );   
 
                            }   
 
                        break;   
 
   
 
   
 
                        // Synopsis: Move X Y Z   
 
                        case "Move":  case "-M":   
 
                            try{   
 
                                this.TargetPos = new Vector3();   
 
                                this.InputVec.X = Convert.ToSingle(Words[i++]);   
 
                                this.InputVec.Y = Convert.ToSingle(Words[i++]);   
 
                                this.InputVec.Z = Convert.ToSingle(Words[i++]);   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'Move'" );   
 
                            }   
 
                        break;   
 
   
 
                        // Synopsis: MoveTo X Y Z [Yaw] [Pitch] [Roll]   
 
                        case "MoveTo":  case "-MT":   
 
                            this.TrackTarget = true;   
 
                            this.TargetPos = new Vector3();   
 
                            this.InputVec =  new Vector3();   
 
                            try{   
 
                                this.TargetPos.X = Convert.ToSingle( Words[i++] );   
 
                                this.TargetPos.Y = Convert.ToSingle( Words[i++] );   
 
                                this.TargetPos.Z = Convert.ToSingle( Words[i++] );   
 
                                this.TrackTargetOri = true;   
 
                                this.TargetOri = new Vector3();   
 
                                try{   
 
                                    this.TargetOri.X = Convert.ToSingle(Words[i++]);   
 
                                } catch (Exception){ this.TrackTargetOri = false; }   
 
                                try{   
 
                                    this.TargetOri.Y = Convert.ToSingle(Words[i++]);   
 
                                } catch (Exception){ }   
 
                                try{   
 
                                    this.TargetOri.Z = Convert.ToSingle(Words[i++]);   
 
                                } catch (Exception){ }   
 
   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'MoveTo'" );   
 
                            }   
 
                        break;   
 
   
 
                        // Synopsis: Speed Number   
 
                        case "Speed":  case "-S":   
 
                            this.Speed = Convert.ToSingle(Words[i++]);   
 
                            var l = this.TargetVelocity.Length();   
 
                            if ( l &gt; 0.01 ){   
 
                                if ( this.TargetVelocity.X != 0 )   
 
                                   this.TargetVelocity.X = this.TargetVelocity.X/l*this.Speed;   
 
                                if ( this.TargetVelocity.Y != 0 )   
 
                                   this.TargetVelocity.Y = this.TargetVelocity.X/l*this.Speed;   
 
                                if ( this.TargetVelocity.Z != 0 )   
 
                                   this.TargetVelocity.Z = this.TargetVelocity.X/l*this.Speed;   
 
                            }   
 
                        break;   
 
   
 
                        // Synopsis: SetTargetReachedTimer Timername   
 
                        case "SetTargetReachedTimer":  case "-STRT":   
 
                            try{   
 
                                String TimerName = Reform( Words, i );   
 
                                this.TargetReachedTimer = (IMyTimerBlock)MyGTS.GetBlockWithName( TimerName );   
 
                                if ( this.TargetReachedTimer == null )   
 
                                    MyEcho( TimerName+" not found");   
 
                            } catch(Exception){   
 
                                MyEcho( "Parsing error in 'SetTargetReachedTimer'" );   
 
                            }   
 
                        break;   
 
   
 
                    }   
 
                }   
 
            }   
 
        }   
 
    }   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
    public static Vector3 GetLinearInputs( IMyShipController Controller ){   
 
        Vector3 VecIn;   
 
        Vector3 VecOut;   
 
        VecIn = Controller.MoveIndicator;   
 
        VecOut.X = -VecIn.Z;   
 
        VecOut.Y = -VecIn.X;   
 
        VecOut.Z = VecIn.Y;   
 
        return VecOut;   
 
    }   
 
   
 
   
 
    public static Vector3 GetRotationInputs( IMyShipController Controller ){   
 
        Vector2 VecIn;   
 
        Vector3 VecOut;   
 
        VecIn = Controller.RotationIndicator;   
 
        VecOut.X = VecIn.Y;   
 
        VecOut.Y = -VecIn.X;   
 
        VecOut.Z = Controller.RollIndicator;   
 
        return VecOut;   
 
    }   
 
   
 
   
 
   
 
   
 
   
 
   
 
    // Function used to reassemble the end of a string[] to get an string   
 
    public static String Reform( String[] Words, int i ){   
 
        String Word = "";   
 
        do {   
 
            Word += Words[i];   
 
            i++;   
 
        } while ( i&lt; Words.Length &amp;&amp; (Word += " ") != null );   
 
        return Word;   
 
    }   
 
   
 
   
 
   
 
   
 
    // Constructor   
 
    public ArmController(   
 
                              Part          Arm,   
 
                              String        Name = "",   
 
                              String        ShipControllerKeyword = "",   
 
                              IMyTextPanel  TextPanelInput = null,   
 
                              Single        Smoot = 10,   
 
                              Single        Speed = 1,   
 
                              Joint          Pitch = null,   
 
                              Joint          Yaw = null,   
 
                              Joint          Roll = null,   
 
                              bool          RelativeX = false,   
 
                              bool          RelativeY = false,   
 
                              bool          RelativeZ = false,   
 
                              IMyTimerBlock TargetReachedTimer = null,   
 
                              Single        Tolerence = 0.1F   
 
                        ){   
 
        this.Arm =                  Arm;   
 
        this.Name =                 Name;   
 
        this.ShipControllerKeyword = ShipControllerKeyword;   
 
        if ( this.ShipControllerKeyword != "" ){   
 
            this.TrackInputs = true;   
 
        }   
 
        this.Tolerence = Tolerence;   
 
   
 
        this.Panel =                        TextPanelInput;   
 
        this.Smoot =                        Smoot;   
 
        this.Speed =                        Speed;   
 
        this.Pitch =                          Pitch;   
 
        this.Yaw =                           Yaw;   
 
        this.Roll =                             Roll;   
 
        this.RelativeX =                    RelativeX;   
 
        this.RelativeY =                    RelativeY;   
 
        this.RelativeZ =                    RelativeZ;   
 
        this.TargetReachedTimer =  TargetReachedTimer;   
 
        this.TargetPos =                    new Vector3();   
 
        this.TrackTarget =                  false;   
 
        this.TargetOri =                    new Vector3();   
 
        this.TrackTargetOri =               false;   
 
        this.VirtualPos =                   (Vector3)Arm;   
 
        this.SmootTargetVelocity =  new Vector3();   
 
        this.Rot =                               new Vector3();   
 
        this.Drift =                              new Vector3();   
 
    }   
 
}   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
8888888b.                   888   
 
888   Y88b                  888   
 
888    888                  888   
 
888   d88P  8888b.  888d888 888888   
 
8888888P"      "88b 888P"   888   
 
888        .d888888 888     888   
 
888        888  888 888     Y88b.   
 
888        "Y888888 888      "Y888   
 
   
 
*/   
 
   
 
//////// ---------------------------------------------  PART ////////       PART       PART       PART       PART   
 
public class Part{   
 
   
 
  // Interface:   
 
      // Implication of Vector3   
 
      // Override of .ToString()   
 
   
 
  // Utilitary:   
 
      // Addition Management   
 
      // SQ   
 
      // FindAngle   
 
      // AngleProxy   
 
      // Mod   
 
      // AxisToU   
 
      // RelativePlane   
 
   
 
  // Interraction:   
 
      // GetVector                      [VIRTUAL]   
 
      // GetDeltaVector   
 
      // GetPose                      [VIRTUAL]   
 
      // GetDeltaPose   
 
      // GetOrient                      [VIRTUAL]   
 
      // Move                      [VIRTUAL]   
 
   
 
   
 
   
 
   
 
   
 
    // Declaration of variables:   
 
   
 
    public static Dictionary&lt;String, Part&gt; PartList = new Dictionary&lt;String, Part&gt;();   
 
    // A list of most parts to reffer to them by parsing input.   
 
   
 
    public Matrix Pose = new Matrix();                      // The current pose of the Part   
 
    public String  Axis;   
 
    public Vector3 U = new Vector3(0,0,1);              //Unitary Axis, Default is "Z"   
 
    public bool Override = false;   
 
   
 
    // INTERFACE:   
 
   
 
    //// Implication of Vector3 ////   
 
    public static implicit operator Vector3( Part a )   
 
    { return a.GetVector(); }   
 
    //// ----------------------------- ////   
 
   
 
     //// Implication of Matrix////   
 
    public static implicit operator Matrix( Part a )   
 
    { return a.GetPose(); }   
 
    //// ----------------------------- ////   
 
   
 
    //// Override of .ToString ////   
 
    public override String ToString()   
 
    { return ((Matrix)this).ToString(); }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
   
 
   
 
    // UTILITARY:   
 
   
 
    //// Addition Management ////   
 
    // Create a PartAddition Part to track additionned Parts   
 
    public static Part operator +(Part left, Part right)   
 
    { return new PartAddition( left, right ); }   
 
    //// ----------------------------- ////   
 
   
 
    //// SQ ////   
 
    // Easy access Square   
 
    public static Single SQ(Single X)   
 
    { return X*X; }   
 
    //// ----------------------------- ////   
 
   
 
    //// FindAngle ////   
 
    // Use the cosinus trick to find an angle within a triangle   
 
    public Single FindAngle( Single a, Single b, Single c )   
 
    { return (Single)Math.Acos( (SQ(b)+SQ(c)-SQ(a))/(2*b*c) ); }   
 
    //// ----------------------------- ////   
 
   
 
    ////  AngleProxy  ////   
 
    // Give the smallest difference between two angles   
 
    public static Single AngleProxy( Single A1, Single A2 )   
 
    { //Return the relative Proxymity between two Angles   
 
        A1 = A2-A1;   
 
        A1 = Mod( A1+(Single)Math.PI, (Single)2*(Single)Math.PI )-(Single)Math.PI;   
 
        return A1; }   
 
    //// ----------------------------- ////   
 
   
 
    ////  Mod  ////   
 
    // Modulo   
 
    public static Single Mod( Single A, Single N )   
 
    { return A-(Single)Math.Floor(A/N)*N; }   
 
    //// ----------------------------- ////   
 
   
 
    //// AxisToU ////   
 
    // Convert an axis into a Unitary vector   
 
    public static Vector3 AxisToU( String Axis )   
 
    {   
 
        switch (Axis){   
 
            case "X": return new Vector3( 1, 0, 0 );   
 
            case "Y": return new Vector3( 0, 1, 0 );   
 
            case "Z": return new Vector3( 0, 0, 1 );   
 
            case "-X": return new Vector3( -1, 0, 0 );   
 
            case "-Y": return new Vector3( 0, -1, 0 );   
 
            case "-Z": return new Vector3( 0, 0, -1 );   
 
            default: return new Vector3( 0, 0, 1 );   
 
        }   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
    ////  RelativePlane  ////   
 
    // Realivise a vector3 into a plane   
 
    public static Vector2 RelativePlane( Vector3 Vec, String Axis ){   
 
        switch (Axis){   
 
            case "X": return new Vector2( -Vec.Z, Vec.Y );   
 
            case "Y": return new Vector2( Vec.X, -Vec.Z );   
 
            case "Z": return new Vector2( Vec.X, Vec.Y );   
 
            case "-X": return new Vector2( Vec.Z, Vec.Y );   
 
            case "-Y": return new Vector2( Vec.X, Vec.Z );   
 
            case "-Z": return new Vector2( Vec.X, -Vec.Y );   
 
            default: return new Vector2( Vec.Y, Vec.Z );   
 
        }   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public virtual Vector3 GetVector( Single dT = 0 ){   
 
        return GetPose( dT ).Translation;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetDeltaVector  ////   
 
    // Get the current delta of the Part's translation vector. note: delta = velocity*d   
 
    public Vector3 GetDeltaVector( )   
 
    {   return this.GetVector( 1 )-this.GetVector( 0 ); }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetPose  ////   
 
    // Get the current or future Pose of the Part   
 
    public virtual Matrix GetPose( Single dT = 0 ){   
 
        this.Pose = new Matrix();   
 
        return this.Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetDeltaPose  ////   
 
    // Get the current delta of the Part's Pose. note: delta = velocity*d   
 
    public Matrix GetDeltaPose( ){   
 
        Matrix Inverto;   
 
        Matrix Pose = this.GetPose( 0 );   
 
        Matrix.Invert( ref Pose, out Inverto );   
 
        return this.GetPose( 1 )*Inverto;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public virtual Matrix GetOrient( Single dT = 0 ){   
 
        var Pose = this.GetPose(dT);   
 
        Pose.Translation = new Vector3();   
 
        return Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    ////  Move  ////   
 
    public virtual Vector3 Move( Vector3 TargetdV ){   
 
        return TargetdV;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
888888          d8b          888   
 
  "88b          Y8P          888   
 
   888                       888   
 
   888  .d88b.  888 88888b.  888888   
 
   888 d88""88b 888 888 "88b 888   
 
   888 888  888 888 888  888 888   
 
   88P Y88..88P 888 888  888 Y88b.   
 
   888  "Y88P"  888 888  888  "Y888   
 
 .d88P   
 
.d88P"   
 
888P"   
 
   
 
*/   
 
//////// ---------------------------------------------  JOINT ////////          JOINT         JOINT   
 
public class Joint : Part{   
 
   
 
   
 
  // Interface:   
 
      // Implication of Single   
 
   
 
  // Interraction:   
 
      // GetAngle   
 
      // GetVector                    [OVERRIDE]   
 
      // GetPose                    [OVERRIDE]   
 
      // GetOrient                    [OVERRIDE]   
 
      // Get_Velocity                    [OVERRIDE]   
 
      // AddRotationSpeed   
 
      // SetRotationSpeed   
 
   
 
   
 
   
 
    public IMyMotorStator    Mot;   
 
    public Single               VirtualSpeed;   
 
    public int                  Direction;   
 
    public Single               Offset;   
 
    public Joint                Slave;   
 
    public Hydraulic    HA;   
 
   
 
   
 
   
 
   
 
   
 
    // INTERFACE:   
 
   
 
    //// Implication of Single ////   
 
    public static implicit operator Single( Joint a )   
 
    {   return a.GetAngle();    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    // INTERACTION:   
 
   
 
    //// GetAngle ////   
 
    //Get the current or future angle of an Joint   
 
    public virtual Single GetAngle( Single dT = 0 )   
 
    {   
 
        Single Vel = this.Get_Velocity()*d*dT;   
 
        return this.Mot.Angle*this.Direction+this.Offset+Vel;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        return new Vector3();   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    ////  GetPose  ////   
 
    //Get the current or future angle of an Joint   
 
    public override Matrix GetPose( Single dT = 0 ){   
 
        switch (this.Axis)   
 
        {   
 
            case "X": return Matrix.CreateRotationX( this.GetAngle( dT )  );   
 
            case "Y": return Matrix.CreateRotationY( this.GetAngle( dT )  );   
 
            case "Z": return Matrix.CreateRotationZ( this.GetAngle( dT )  );   
 
            case "-X": return Matrix.CreateRotationX( -this.GetAngle( dT )  );   
 
            case "-Y": return Matrix.CreateRotationY( -this.GetAngle( dT )  );   
 
            case "-Z": return Matrix.CreateRotationZ( -this.GetAngle( dT )  );   
 
            default: return Matrix.CreateRotationZ( this.GetAngle( dT )  );   
 
        }   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
    ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        return this.GetPose(dT);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    //// Get_Velocity ////   
 
    //To get the current velocity of a Joint   
 
    public virtual Single Get_Velocity(  ){   
 
   
 
       Single Vel;   
 
       if ( this.Mot.Enabled )   
 
       {   
 
           Vel = this.Mot.Velocity*(Single)Math.PI/30; // from rpm to rad/s   
 
           //Vel = (Single)Math.Max(-30,Math.Min(30,Vel));   
 
           if ( this.Mot.Angle &gt;= this.Mot.UpperLimit )   
 
                Vel = (Single)Math.Min( Vel, 0 );   
 
            else if ( this.Mot.Angle &lt;= this.Mot.LowerLimit )   
 
                Vel = (Single)Math.Max( Vel, 0 );   
 
            Vel *= this.Direction;   
 
   
 
        } else Vel = 0;   
 
        return Vel;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    //// AddRotationSpeed ////   
 
    // Add delta to the velocity of the rotor. Recieve a angular delta in d(rad)/d(s).   
 
    // this is so we can apply velocityes to the same rotor from multiple Parts.   
 
    public void AddRotationSpeed( Single dV = 0 )   
 
    {   
 
   
 
        if ( DEBUG ) MyEcho( VirtualSpeed.ToString() );   
 
   
 
        SetRotationSpeed( VirtualSpeed*(Single)Math.PI/30*this.Direction+dV );   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    //// SetRotationSpeed ////   
 
    // Set the velocity of the rotor. Recieve a angular delta in d*rad.   
 
    public virtual void SetRotationSpeed( Single dV = 0 )   
 
    {   
 
   
 
   
 
        Single Vel = 0;   
 
   
 
        if ( !this.Mot.Enabled ) {   
 
   
 
            this.Mot.SetValue("Velocity", 0F );   
 
            VirtualSpeed = 0;   
 
   
 
        } else if( !this.Override ) {   
 
            // Get the desired acceleration   
 
   
 
   
 
            VirtualSpeed = dV/(Single)Math.PI*30*this.Direction;   
 
   
 
            Vel = VirtualSpeed;   
 
   
 
            // Limit the acceleration to avoid Clang's wrath   
 
            //Vel = (Single)Math.Max(-5,Math.Min(5,Vel));   
 
   
 
   
 
            // Smooting the limits by limiting speed near them   
 
            Single Maxim = 1;   
 
            Single Minim = 1;   
 
            Single Smoot = SMOOTLIMITS/2;   
 
   
 
   
 
            if ( this.Mot.UpperLimit != 361F )   
 
                Maxim = (Single)Math.Min( Smoot, this.Mot.UpperLimit-0.01F-this.Mot.Angle )/Smoot;   
 
            if ( this.Mot.LowerLimit != -361F )   
 
                Minim = (Single)Math.Min( Smoot, this.Mot.Angle-this.Mot.LowerLimit-0.01F )/Smoot ;   
 
   
 
            Vel = (Single)Math.Min( 60*Maxim, Vel );   
 
            Vel = (Single)Math.Max( -60*Minim, Vel );   
 
   
 
            // Applying the velocity to the rotor   
 
            if ( Math.Abs(Vel) &lt; 60)   
 
                this.Mot.SetValue("Velocity", Vel );   
 
        }   
 
   
 
        MyEcho("Vel: "+Vel.ToString("0.00"));   
 
        Vel *= (Single)Math.PI/30*this.Direction;   
 
        if ( this.Slave != null ) this.Slave.SetRotationSpeed( Vel );   
 
        if ( this.HA != null ) this.HA.Move( Vel*d );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
   
 
    public class Hydraulic{   
 
   
 
        Part    Actuator;   
 
        int     Direction;   
 
        Single  L1_2p2_2;   
 
        Single  L1mL2m2;   
 
   
 
        public void Move( Single dTheta ){   
 
   
 
            Single D = ((Vector3)this.Actuator).X;   
 
            Single Theta = (Single)Math.Acos( (SQ(D)-this.L1_2p2_2)/L1mL2m2 );   
 
            Single dD = (Single)Math.Sqrt( this.L1_2p2_2 + this.L1mL2m2 * Math.Cos( Theta+dTheta ) );   
 
            dD -= D;   
 
            this.Actuator.Move( new Vector3( dD/d*this.Direction, 0, 0 ) );   
 
        }   
 
   
 
        public Hydraulic(  Part Actuator = null,   
 
                           int Direction = 1,   
 
                           Single Length1 = 1,   
 
                           Single Length2 = 1  ){   
 
            this.Actuator = Actuator;   
 
            this.Direction = Direction;   
 
            this.L1_2p2_2 = SQ( Length1 )+SQ( Length2 );   
 
            this.L1mL2m2 = 2*Length1*Length2;   
 
        }   
 
    }   
 
   
 
   
 
   
 
   
 
   
 
   
 
    // CONSTRUCTORS   
 
   
 
    //// Constructor ////   
 
    public Joint(   String              RotorName,   
 
                    int                 Direction = 1,   
 
                    Single              Offset = 0,   
 
                    String              Axis = "Z",   
 
                    bool                Override = false,   
 
                    Joint               Slave = null,   
 
                    Hydraulic   HA = null )   
 
    {   
 
        if (!PartList.ContainsKey(RotorName))   
 
            PartList.Add( RotorName, this );   
 
   
 
        this.Mot = (IMyMotorStator)MyGTS.GetBlockWithName( RotorName );   
 
        if ( Mot == null )   
 
            MyEcho( "The rotor \"" + RotorName + "\" can't be found" );   
 
   
 
        this.VirtualSpeed = 0;   
 
        this.Direction = -Direction;   
 
        this.Offset = Offset/180*(Single)Math.PI;   
 
        this.Axis = Axis;   
 
        this.U = AxisToU( Axis );   
 
        this.Override = Override;   
 
        this.Slave = Slave;   
 
   
 
        this.HA = HA;   
 
   
 
   
 
   
 
   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
8888888b.                   888           d8888      888      888 d8b 888    d8b   
 
888   Y88b                  888          d88888      888      888 Y8P 888    Y8P   
 
888    888                  888         d88P888      888      888     888   
 
888   d88P  8888b.  888d888 888888     d88P 888  .d88888  .d88888 888 888888 888  .d88b.  88888b.   
 
8888888P"      "88b 888P"   888       d88P  888 d88" 888 d88" 888 888 888    888 d88""88b 888 "88b   
 
888        .d888888 888     888      d88P   888 888  888 888  888 888 888    888 888  888 888  888   
 
888        888  888 888     Y88b.   d8888888888 Y88b 888 Y88b 888 888 Y88b.  888 Y88..88P 888  888   
 
888        "Y888888 888      "Y888 d88P     888  "Y88888  "Y88888 888  "Y888 888  "Y88P"  888  888   
 
   
 
*/   
 
//////// ---------------------------------------------  PARTADDITION ////////     PARTADDITION      PARTADDITION   
 
public class PartAddition : Part{   
 
   
 
   
 
      // Interraction:   
 
          // GetPose                   [OVERRIDE]   
 
          // GetOrient                   [OVERRIDE]   
 
          // GetVector                  [OVERRIDE]   
 
          // Move                   [OVERRIDE]   
 
   
 
      // Constructors:   
 
          // Constructor              [OVERRIDE]   
 
   
 
   
 
    // Declaration of variables:   
 
    public Part Add1;   
 
    public Part Add2;   
 
   
 
   
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetPose  ////   
 
    public override Matrix GetPose( Single dT = 0 ){   
 
        var Pose = Add2.GetPose(dT)*Add1.GetPose(dT);   
 
        return Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
    ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        return this.Add2.GetOrient(dT)*this.Add1.GetOrient(dT);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        Matrix Mat = Matrix.CreateTranslation(Add2.GetVector(dT));   
 
        var Pose = Mat*Add1.GetPose(dT);   
 
        return Pose.Translation;   
 
        //return Add1.GetVector(dT)+Add2.GetVector(dT);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    ////  Move  ////   
 
    // Will try to move the first Part before the second   
 
    public override Vector3 Move( Vector3 TargetdV ){   
 
   
 
        var Orient = this.Add1.GetOrient(0);   
 
   
 
   
 
        var TargetdVMat = Matrix.CreateTranslation( TargetdV );   
 
        TargetdV = this.Add2.Move( ( TargetdVMat*Matrix.Invert(Orient) ).Translation );   
 
   
 
        TargetdVMat = Matrix.CreateTranslation( TargetdV )*Orient;   
 
   
 
        return this.Add1.Move( TargetdVMat.Translation );   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    // CONSTRUCTORS:   
 
   
 
    //// Constructor ////   
 
    public PartAddition( Part Add1, Part Add2) {   
 
        this.Add1 = Add1;   
 
        this.Add2 = Add2;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
.d8888b.           888 d8b      888 8888888b.                   888   
 
d88P  Y88b          888 Y8P      888 888   Y88b                  888   
 
Y88b.               888          888 888    888                  888   
 
"Y888b.    .d88b.  888 888  .d88888 888   d88P  8888b.  888d888 888888   
 
   "Y88b. d88""88b 888 888 d88" 888 8888888P"      "88b 888P"   888   
 
     "888 888  888 888 888 888  888 888        .d888888 888     888   
 
Y88b  d88P Y88..88P 888 888 Y88b 888 888        888  888 888     Y88b.   
 
"Y8888P"   "Y88P"  888 888  "Y88888 888        "Y888888 888      "Y888   
 
   
 
*/   
 
//////// ---------------------------------------------  SolidPart ////////     SOLIDPART     SOLIDPART   
 
public class SolidPart : Part{   
 
   
 
   
 
  // Interraction:   
 
      // GetPose                   [OVERRIDE]   
 
      // GetOrient                   [OVERRIDE]   
 
      // GetVector                  [OVERRIDE]   
 
      // Move                   [OVERRIDE]   
 
   
 
  // Constructors:   
 
      // Constructor 1   
 
      // Constructor 2   
 
   
 
   
 
    /*      Layout:   
 
   
 
            +Z   
 
            |   
 
            |   
 
            0-------- +Y   
 
             \   
 
              \   
 
               +X   
 
    */   
 
   
 
   
 
    // Declaration of variables:   
 
    Matrix       Mat;   
 
   
 
   
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetPose  ////   
 
    public override Matrix GetPose( Single dT = 0 ){   
 
        return this.Mat;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
     ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        return Matrix.CreateTranslation( new Vector3() );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  Move  ////   
 
    public override Vector3 Move( Vector3 TargetdV )   
 
    {   
 
       return TargetdV;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        return Mat.Translation;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    // CONSTRUCTORS:   
 
   
 
    //// Constructor 1 ////   
 
    public SolidPart( Vector3 Vec )   
 
    {   
 
        this.Mat = Matrix.CreateTranslation(Vec);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
    //// Constructor 2 ////   
 
    public SolidPart( Single X, Single Y, Single Z )   
 
    {   
 
        this.Mat = Matrix.CreateTranslation( X, Y, Z );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
8888888b.  d8b          888                      8888888b.                   888   
 
888   Y88b Y8P          888                      888   Y88b                  888   
 
888    888              888                      888    888                  888   
 
888   d88P 888 .d8888b  888888  .d88b.  88888b.  888   d88P  8888b.  888d888 888888   
 
8888888P"  888 88K      888    d88""88b 888 "88b 8888888P"      "88b 888P"   888   
 
888        888 "Y8888b. 888    888  888 888  888 888        .d888888 888     888   
 
888        888      X88 Y88b.  Y88..88P 888  888 888        888  888 888     Y88b.   
 
888        888  88888P'  "Y888  "Y88P"  888  888 888        "Y888888 888      "Y888   
 
   
 
*/   
 
//////// ---------------------------------------------  PistonPart ////////     PistonPart        PistonPart   
 
public class PistonPart : Part{   
 
   
 
   
 
  // Interraction:   
 
      // GetPose                   [OVERRIDE]   
 
      // GetOrient                   [OVERRIDE]   
 
      // GetVector                  [OVERRIDE]   
 
      // GetLenght   
 
      // Move                   [OVERRIDE]   
 
   
 
  // Constructors:   
 
      // Constructor   
 
   
 
   
 
        /*  Layout:   
 
   
 
                           Piston-----|   
 
   
 
        */   
 
   
 
   
 
   
 
   
 
    // Declaration of variables:   
 
    public IMyPistonBase   Piston;   
 
    public PistonPart           Slave;  
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetPose  ////   
 
    public override Matrix GetPose( Single dT = 0 )   
 
    {   
 
        this.Pose = Matrix.CreateTranslation( this.U*this.GetLenght( dT ) ) ;   
 
        return this.Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
      ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        return Matrix.CreateTranslation( new Vector3() );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    ////  GetVector  ////   
 
    // Extract the translation vector from the current or future pose of the Part   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        return this.U*this.GetLenght( dT );   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    ////  GetLenght  ////   
 
    // Get the current or future piston's extention.   
 
    public Single GetLenght( Single dT )   
 
    {   
 
        Single Vel = this.Piston.Velocity*dT*d;   
 
        if ( this.Piston.Enabled ){   
 
            if ( this.Piston.CurrentPosition &gt;= this.Piston.MaxLimit )   
 
                Vel = (Single)Math.Min( Vel, 0 );   
 
            else if ( this.Piston.CurrentPosition &lt;= this.Piston.MinLimit )   
 
                Vel = (Single)Math.Max( Vel, 0 );   
 
        } else Vel = 0;   
 
   
 
   
 
        return (this.Piston.CurrentPosition+Vel);   
 
    }   
 
   
 
   
 
   
 
   
 
   
 
   
 
    ////  Move  ////   
 
    public override Vector3 Move( Vector3 TargetdV ){   
 
        if ( !this.Override )   
 
        {   
 
  
 
            if (Slave != null )  
 
                Slave.Move( TargetdV );  
 
  
 
            if ( DEBUG ) MyEcho( "PTdV = "+TargetdV.ToString("0.0") );   
 
            Single Vel = ((Single)Vector3.Dot( TargetdV, this.U ));   
 
   
 
            //Vel = (Single)Math.Max( this.Piston.Velocity-2, Math.Min( this.Piston.Velocity+2,Vel ));   
 
   
 
            Single Smoot = SMOOTLIMITS;   
 
            Single Maxim = (Single)Math.Min( Smoot,   
 
                                         this.Piston.MaxLimit-this.Piston.CurrentPosition )/Smoot;   
 
            Single Minim = (Single)Math.Min( Smoot,   
 
                                        this.Piston.CurrentPosition-this.Piston.MinLimit )/Smoot;   
 
   
 
            Vel = (Single)Math.Min( 10*Maxim, Vel ) ;   
 
            Vel = (Single)Math.Max( -10*Minim, Vel );   
 
   
 
            if ( Vel &lt; 10 &amp;&amp; Vel &gt; -10 ){   
 
                 this.Piston.SetValue("Velocity",  Vel );   
 
                 return TargetdV-Vel*this.U;   
 
            }   
 
        }   
 
   
 
        return TargetdV;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
    // CONSTRUCTOR:   
 
   
 
    //// Constructor 1 ////   
 
    public PistonPart(   
 
                        String      PistonName,   
 
                        String      Axis = "X",   
 
                        bool         Override = false,  
 
                        PistonPart Slave = null  
 
                ) {   
 
   
 
        this.Slave = Slave;  
 
        this.U = AxisToU( Axis );   
 
        if (!PartList.ContainsKey(PistonName))   
 
            PartList.Add( PistonName, this );   
 
        this.Piston = (IMyPistonBase)MyGTS.GetBlockWithName( PistonName );   
 
        this.Override = Override;   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
   
 
/*   
 
   
 
d8888                       8888888b.                   888   
 
d88888                       888   Y88b                  888   
 
d88P888                       888    888                  888   
 
d88P 888 888d888 88888b.d88b.  888   d88P  8888b.  888d888 888888   
 
d88P  888 888P"   888 "888 "88b 8888888P"      "88b 888P"   888   
 
d88P   888 888     888  888  888 888        .d888888 888     888   
 
d8888888888 888     888  888  888 888        888  888 888     Y88b.   
 
d88P     888 888     888  888  888 888        "Y888888 888      "Y888   
 
   
 
*/   
 
/////// ---------------------------------------------  ArmPart ////////     ArmPart    ArmPart   
 
public class ArmPart : Part {   
 
   
 
   
 
   
 
   
 
      // Interraction:   
 
          // GetPose                   [OVERRIDE]   
 
          // GetOrient                   [OVERRIDE]   
 
          // GetVector                  [OVERRIDE]   
 
          // Move                   [OVERRIDE]   
 
   
 
    // Constructors:   
 
        // Constructor   
 
   
 
   
 
    /*      Layout:   
 
                             Joint2   
 
                             /   
 
                          /   
 
                       /   
 
                  Joint1   
 
    */   
 
   
 
   
 
   
 
   
 
    // Declaration of variables:   
 
    public Joint    Joint1;   
 
    public Part     Link;   
 
    public Joint    Joint2;   
 
    public bool     ShareJoint2;   
 
   
 
    // INTERRACTION:   
 
   
 
    ////  GetPose  ////   
 
    public override Matrix GetPose( Single dT = 0 ){   
 
   
 
        this.Pose = this.Joint1.GetPose( dT );   
 
        this.Pose = this.Link.GetPose( dT )*this.Pose;   
 
        if ( this.Joint2 != null &amp;&amp; !this.ShareJoint2 )   
 
            this.Pose = this.Joint2.GetPose( dT )*this.Pose;   
 
   
 
        return this.Pose;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
     ////  GetOrient  ////   
 
    // Get the current or future Orientation of the Part   
 
    public override Matrix GetOrient( Single dT = 0 ){   
 
        if ( this.Joint2 != null &amp;&amp; !this.ShareJoint2 )   
 
            return this.Joint2.GetOrient(dT)*this.Link.GetOrient(dT)*this.Joint1.GetOrient(dT);   
 
   
 
       return this.Link.GetOrient(dT)*this.Joint1.GetOrient(dT);   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
    ////  GetVector  ////   
 
    public override Vector3 GetVector( Single dT = 0 ){   
 
        var Mat = Matrix.CreateTranslation( this.Link.GetVector(dT) );   
 
        return (Mat*this.Joint1.GetPose( dT )).Translation;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
    ////  Move  ////   
 
    public override Vector3 Move( Vector3 TargetdV ){   
 
        var Mem = new Vector3( TargetdV.X, TargetdV.Y, TargetdV.Z );   
 
        Matrix Orient;   
 
        Vector3 Vec3;   
 
        try{   
 
            Orient = this.Joint1.GetPose( 0 );   
 
            Vec3 = (this.Link.GetPose(0)*Orient).Translation;   
 
   
 
            if ( DEBUG ) MyEcho( "ATdV="+TargetdV.ToString("0.0") );   
 
   
 
            Matrix TargetdVMat = Matrix.CreateTranslation( TargetdV );   
 
   
 
   
 
            // move the Link   
 
            TargetdV = this.Link.Move( ( TargetdVMat*Matrix.Invert(Orient) ).Translation );   
 
            TargetdV = (Matrix.CreateTranslation( TargetdV )*Orient).Translation;   
 
   
 
   
 
            //TargetdV -= this.GetDeltaVector( )/d;   
 
            Vector2 RTargetdV = RelativePlane( TargetdV*d, this.Axis );   
 
            if ( DEBUG ) MyEcho( "ARTdV=("+(RTargetdV.X/d).ToString("0.0")+", "+(RTargetdV.Y/d).ToString("0.0") );   
 
   
 
   
 
            //Get the current position   
 
            Vector2 Vec = RelativePlane( Vec3, this.Axis );   
 
   
 
   
 
            if ( SQ( Vec.X )+SQ( Vec.Y )  &gt; 0.1F ){   
 
   
 
                //Find the needed rotation to get to the RTargetdV   
 
                Single A = (Single)Math.Atan2( Vec.Y, Vec.X );   
 
                Single dA = AngleProxy( A, (Single)Math.Atan2( Vec.Y+RTargetdV.Y, Vec.X+RTargetdV.X ) );   
 
   
 
                //Apply the correct velocities to Joints   
 
                this.Joint1.SetRotationSpeed( dA/d );   
 
   
 
            } else {   
 
                this.Joint1.SetRotationSpeed( 0 );   
 
            }   
 
   
 
            if ( this.Joint2 != null ){   
 
                if ( this.ShareJoint2 ) {   
 
                    this.Joint2.AddRotationSpeed( -this.Joint1.Get_Velocity() );   
 
                } else {   
 
                    this.Joint2.SetRotationSpeed( -this.Joint1.Get_Velocity() );   
 
                }   
 
            }   
 
   
 
        }   
 
        catch( Exception ){   
 
            MyEcho( "Execution error in 'ArmPart'" );   
 
        }   
 
   
 
   
 
        return Mem-this.GetDeltaVector( )/d;   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
   
 
   
 
   
 
    // CONSTRUCTORS:   
 
   
 
    ////  Constructor ////   
 
    public ArmPart(   
 
                                    String     Axis = "Y",   
 
                                    Joint       Joint1 = null,   
 
                                    Part        Link = null,   
 
                                    Joint       Joint2 = null,   
 
                                    bool        ShareJoint2 = false   
 
                                ){   
 
   
 
   
 
        this.Axis = Axis;   
 
        this.U =    AxisToU( Axis );   
 
        this.Joint1 = Joint1;   
 
        this.Joint1.U = this.U;   
 
        this.Joint1.Axis = this.Axis;   
 
        this.Link = Link;   
 
        this.Joint2 = Joint2;   
 
        if ( this.Joint2 != null ){   
 
            this.Joint2.U = this.U;   
 
            this.Joint2.Axis = this.Axis;   
 
            this.ShareJoint2 = ShareJoint2;   
 
        }   
 
   
 
    }   
 
    //// ----------------------------- ////   
 
   
 
   
 
   
 
}   
 
//////// ----------------------------------------------------- ////////   
 
   
 
  
             
           
</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>114727043854058991</EntityId>
              <Min x="50" y="-1" z="-2" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>PBhorizon</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>/*  
/// Whip's Artificial Horizon Script v42 // - rev: 6/10/17 
_______________________________________________________________________            
///DESCRIPTION///    
 
    This code creates an Artificial Horizon indicator that takes into account your pitch and roll.  
    Also displayed on the screen is a vector indicator of velocity, speed display, and bearing display.  
    The colors of the display grid are configurable in the code.  
 
_______________________________________________________________________            
///SETUP///    
 
    1.) Find the control seat, cockpit, remote control, or passenger seat that you wish to   
        use as your horizon reference and add the name tag "Forward" somewhere in its name  
         
    2.) Find the Text Panel or LCD Panel that you want to display the Artificial Horizon on and add the tag  
        "Horizon" somewhere in the name of the block  
        - Change the font to MONOSPACED 
         
    3.) Make a program block and put this code in it  
     
    4.) Make a timer with actions  
        - "Trigger Now" itself  
        - "Start" itself  
        - "Run with default argument" the program from step 1  
    5.) Start the timer  
     
    6.) Fly around and enjoy :)  
 
_______________________________________________________________________            
///WHIP'S NOTES///  
 
    I vastly improved the code's number -&gt; pixel conversion system.  
    If you notice any bugs, be sure to comment on the workshop page.  
 
    Coded by Whiplash141  
*/ 
 
//-------------------------------------------------  
//CONFIGURABLE VARAIABLES  
//-------------------------------------------------  
const string controlSeatNameTag = "ADriverRC"; 
const string readoutScreenNameTag = "Horizon"; 
 
const double maximumVelocity = 100; //supports up to 999 m/s max speed  
 
const int updatesPerSecond = 10; 
 
bool enableOrientationIndicator = true; //specifies if the orientation axes are drawn with the artificial horizon  
bool useVelocityMagnitude = false; //if the magnitude of the velocity should be accounted for in the velocity indicator 
bool pauseWhenAway = true; //whether or not the code should stop executing when no-one is piloting the ship 
bool shipControllersOnSameGrid = false; //if the control seats are on same grid as the ship 
bool enableColorBlindMode = false; //this will change all colors to the colorblind default constants automatically 
 
//-------------------------------------------------  
//COLOR DEFAULTS: You can change these 
// Colors are defined with RGB color codes where 
// RGB values can range from (0,0,0) [black] to (7,7,7) [white]. 
// You can also use the presets defined in the COLOR PRESETS section 
//-------------------------------------------------  
char backgroundColor = CreateCustomColor(0, 0, 0); 
char horizonLineColor = CreateCustomColor(0, 0, 0); 
char groundColor = CreateCustomColor(1, 2, 1); 
char skyColor = CreateCustomColor(1, 1, 2); 
char textColor = CreateCustomColor(4, 0, 0); 
char numberColor = CreateCustomColor(4, 4, 0); 
char velocityIndicatorColor = CreateCustomColor(4, 4, 0); 
char spaceOrientationColor = CreateCustomColor(0, 0, 4); 
char planetaryOrientationColor = CreateCustomColor(4, 0, 0); 
 
//-------------------------------------------------  
//COLORBLIND OVERRIDES: These will overwrite the constants above 
// if colorblind mode is enabled 
//-------------------------------------------------      
void ColorBlindOverrides() 
{ 
    //these define the colorblind color constants 
    backgroundColor = black; 
    horizonLineColor = lightGray; 
    groundColor = mediumGray; 
    skyColor = black; 
    textColor = yellow; 
    numberColor = yellow; 
    velocityIndicatorColor = cyan; 
    spaceOrientationColor = green; 
    planetaryOrientationColor = red; 
} 
 
//===================================================  
//DO NOT TOUCH ANYTHING BELOW THIS  
//===================================================  
 
//-------------------------------------------------  
//COLOR PRESETS: Do not change!!!  
 
const char red = '\uE200'; //No touchey 
const char medRed = '\uE1C0'; //No touchey  
const char darkRed = '\uE180'; //No touchey  
 
const char green = '\uE120'; //No touchey  
const char medGreen = '\uE118'; //No touchey  
const char darkGreen = '\uE110'; //No touchey  
 
const char blue = '\uE104'; //No touchey  
const char medBlue = '\uE103'; //No touchey  
const char darkBlue = '\uE102'; //No touchey  
 
const char yellow = '\uE220'; //No touchey 
const char medYellow = '\uE1D8'; //No touchey 
const char darkYellow = '\uE190'; //No touchey 
 
const char magenta = '\uE204'; //No touchey 
const char medMagenta = '\uE1C3'; //No touchey 
const char darkMagenta = '\uE182'; //No touchey 
 
const char cyan = '\uE124'; //No touchey 
const char medCyan = '\uE11B'; //No touchey 
const char darkCyan = '\uE112'; //No touchey 
 
const char white = '\uE2FF'; //No touchey  
const char lightGray = '\uE1DB'; //No touchey  
const char mediumGray = '\uE192'; //No touchey  
const char darkGray = '\uE149'; //No touchey  
const char black = '\uE100'; //No touchey  
 
//------------------------------------------------- 
 
const int horizontalMidpoint = 26; //DO NOT TOUCH 
const int verticalMidpoint = 24; //DO NOT TOUCH 
const int horizontalGridSize = horizontalMidpoint * 2 - 1; 
const int verticalGridSize = verticalMidpoint * 2 - 1; 
const int planeSymbolWidth = 10; //measured from center to wingtip  
 
int velocityRow = 0; 
int velocityColumn = 0; 
 
const double refreshInterval = 10; 
const double timeCycleMax = 1 / (double)updatesPerSecond; 
const double rad2deg = 180 / Math.PI; 
const double deg2rad = Math.PI / 180; 
const double horizontalVelocityIncrement = maximumVelocity / (double)horizontalMidpoint; 
const double verticalVelocityIncrement = maximumVelocity / (double)verticalMidpoint; 
const double pitchIncrement = 90 / (double)verticalMidpoint; 
double timeSinceRefresh = 141; 
double timeCurrentCycle = 0; 
double shipSpeed = 0; 
double shipAcceleration = 0; 
double rollAngle = 0; 
double pitchAngle = 0; 
double bearingAngle = 0; 
double altitude = 0; 
double lastSpeed = 0; 
 
bool isUpsideDown = false; 
bool inGravity = false; 
bool isBackwards = false; 
bool isProperlySetup = false; 
 
string headingAndVelocityPixelString = ""; 
string altitudePixelString = ""; 
 
Vector3D absoluteNorthVec = new Vector3D(0.342063708833718, -0.704407897782847, -0.621934025954579);  
//This is the rotation axis of the sun in vanilla 
//this was determined from the game files 
 
List&lt;IMyShipController&gt; shipControllers = new List&lt;IMyShipController&gt;(); 
List&lt;IMyTextPanel&gt; listScreens = new List&lt;IMyTextPanel&gt;(); 
IMyShipController reference = null; 
 
Program() 
{ 
    if (enableColorBlindMode) 
    { 
        ColorBlindOverrides(); 
    } 
 
    InitializeGrid(); 
    InitializeCharacterLists(); 
} 
 
StringBuilder gridBuilder = new StringBuilder(); 
List&lt;string&gt; emptyGrid = new List&lt;string&gt;(); 
List&lt;string&gt; skyGrid = new List&lt;string&gt;(); 
List&lt;StringBuilder&gt; horizonGrid = new List&lt;StringBuilder&gt;(); 
 
void InitializeGrid() 
{ 
    for (int i = 1; i &lt;= verticalGridSize; i++) 
    { 
        emptyGrid.Add(new String(backgroundColor, horizontalGridSize)); 
    } 
 
    for (int i = 1; i &lt;= verticalGridSize; i++) 
    { 
        skyGrid.Add(new String(skyColor, horizontalGridSize)); 
    } 
     
    for (int i = 1; i &lt;= verticalGridSize; i++) 
    { 
        horizonGrid.Add(new StringBuilder()); 
    } 
} 
 
static char CreateCustomColor(int r, int g, int b) 
{ 
    return (char)(0xE100 + (MathHelper.Clamp(r, 0, 7) &lt;&lt; 6) + (MathHelper.Clamp(g, 0, 7) &lt;&lt; 3) + MathHelper.Clamp(b, 0, 7)); 
} 
 
void AssignGridDefaultValues(List&lt;string&gt; gridDefault) 
{ 
    for (int i = 0; i &lt; horizonGrid.Count; i++) 
    { 
        var thisStringBuilder = horizonGrid[i]; 
        thisStringBuilder.Clear(); 
        thisStringBuilder.Append(gridDefault[i]); 
    } 
} 
 
void Main() 
{    
    try 
    { 
        timeCurrentCycle += Runtime.TimeSinceLastRun.TotalSeconds; 
        timeSinceRefresh += Runtime.TimeSinceLastRun.TotalSeconds; 
         
        if (timeCurrentCycle &gt;= timeCycleMax) 
        { 
            Echo("WMI Artificial Horizon is online... " + RunningSymbol()); 
 
            if (!isProperlySetup) 
                isProperlySetup = CheckBlocks(); 
             
            if (isProperlySetup) 
            { 
                if (pauseWhenAway) 
                    reference = GetControlledShipController(shipControllers); 
                else 
                    reference = shipControllers[0]; 
                 
                if (reference != null) 
                { 
                    GetRollPitchAndHeading(); 
                    GetVelocity(); 
                    GetNumberPixelString(); 
                    DrawGrid(); 
                } 
                else 
                { 
                    Echo($"No user detected in any seats\ntagged with '{controlSeatNameTag}'\nPausing execution..."); 
                } 
            } 
 
            timeCurrentCycle = 0; 
            Echo($"Next refresh in {Math.Round(Math.Max(refreshInterval - timeSinceRefresh, 0))} seconds"); 
        } 
         
        if (timeSinceRefresh &gt;= refreshInterval) 
        { 
            isProperlySetup = false; 
            timeSinceRefresh = 0; 
        } 
    } 
    catch 
    { 
        isProperlySetup = false; 
    } 
} 
 
//Whip's Get Subgrid Base Method 
 
IMyCubeGrid GetSubgridBase(IMyTerminalBlock thisBlock) 
{ 
    //small rotor head, large base 
    var rotorHeads = new List&lt;IMyMotorRotor&gt;(); 
    GridTerminalSystem.GetBlocksOfType(rotorHeads, block =&gt; block.CubeGrid == thisBlock.CubeGrid &amp;&amp; block.CubeGrid.GridSizeEnum.ToString() == "Small"); 
     
    foreach (var thisHead in rotorHeads) 
    { 
        if (thisHead.IsAttached &amp;&amp; thisHead.Base.CubeGrid.GridSizeEnum.ToString() == "Large") 
            return thisHead.Base.CubeGrid; 
    } 
 
    //large rotor base, small head 
    var rotorBases = new List&lt;IMyMotorStator&gt;(); 
    GridTerminalSystem.GetBlocksOfType(rotorBases, block =&gt; block.CubeGrid == thisBlock.CubeGrid &amp;&amp; block.CubeGrid.GridSizeEnum.ToString() == "Small"); 
 
    foreach (var thisBase in rotorBases) 
    { 
        if (thisBase.IsAttached &amp;&amp; thisBase.TopGrid.GridSizeEnum.ToString() == "Large") 
            return thisBase.TopGrid; 
    } 
 
    return null; 
} 
 
bool CheckBlocks() 
{    
    GridTerminalSystem.GetBlocksOfType(shipControllers, shouldAddController); 
    GridTerminalSystem.GetBlocksOfType(listScreens, x =&gt; x.CustomName.ToLower().Contains(readoutScreenNameTag.ToLower())); 
     
    bool setupSuccess = true; 
    if (shipControllers.Count == 0) 
    { 
        Echo($"Error: No ship controllers with name '{controlSeatNameTag}' detected"); 
        setupSuccess =  false; 
    } 
     
    if (listScreens.Count == 0) 
    { 
        Echo($"Error: No text panels with name '{controlSeatNameTag}' detected"); 
        setupSuccess =  false; 
    } 
     
    return setupSuccess; 
} 
 
IMyShipController GetControlledShipController(List&lt;IMyShipController&gt; SCs)   
{   
    foreach (IMyShipController thisController in SCs)   
    {   
        if (thisController.IsUnderControl &amp;&amp; thisController.CanControlShip)   
            return thisController;   
    }   
   
    return null;   
}   
 
bool shouldAddController(IMyTerminalBlock block) 
{ 
    if (shipControllersOnSameGrid) 
        return block.CustomName.Contains(controlSeatNameTag) &amp;&amp; block.CubeGrid == Me.CubeGrid; 
    else 
        return block.CustomName.Contains(controlSeatNameTag); 
} 
 
T GetClosestBlockOfType&lt;T&gt;(string name = "") where T : class, IMyTerminalBlock 
{ 
 
    var allBlocks = new List&lt;T&gt;(); 
 
    if (name == "") 
        GridTerminalSystem.GetBlocksOfType(allBlocks); 
    else 
        GridTerminalSystem.GetBlocksOfType(allBlocks, block =&gt; block.CustomName.Contains(name)); 
 
    if (allBlocks.Count == 0) 
    { 
        return null; 
    } 
 
    var closestBlock = allBlocks[0]; 
    var shortestDistance = Vector3D.DistanceSquared(Me.GetPosition(), closestBlock.GetPosition()); 
    allBlocks.Remove(closestBlock); //remove this block from the list 
 
    foreach (T thisBlock in allBlocks) 
    { 
        var thisDistance = Vector3D.DistanceSquared(Me.GetPosition(), thisBlock.GetPosition()); 
 
        if (thisDistance &lt; shortestDistance) 
        { 
            closestBlock = thisBlock; 
            shortestDistance = thisDistance; 
        } 
        //otherwise move to next one 
    } 
 
    return closestBlock; 
} 
 
void AddToGrid(int row, int column, char color) 
{ 
    if (row - 1 &gt;= 0 &amp;&amp; row - 1 &lt; horizonGrid.Count) 
    { 
        var thisRow = horizonGrid[row - 1]; //need to offset index down one 
        if (column - 1 &gt;= 0 &amp;&amp; column - 1 &lt; thisRow.Length) 
        { 
            thisRow[column - 1] = color; 
        } 
    }      
} 
 
void GetVelocity() //This method gets the relative position of the velocity vector on the screen  
{ 
    var velocityVec = reference.GetShipVelocities().LinearVelocity; 
    shipSpeed = velocityVec.Length(); //raw speed of ship 
    shipAcceleration = Math.Abs(shipSpeed - lastSpeed) / timeCycleMax; 
    lastSpeed = shipSpeed; 
 
    if (!useVelocityMagnitude &amp;&amp; velocityVec.Length() &gt; 0.1) 
    { 
        velocityVec = Vector3D.Normalize(velocityVec) * maximumVelocity; 
    } 
 
    var rightVelocity = VectorProjection(velocityVec, reference.WorldMatrix.Right).Length() * VectorCompareDirection(velocityVec, reference.WorldMatrix.Right); 
    var upVelocity = VectorProjection(velocityVec, reference.WorldMatrix.Up).Length() * VectorCompareDirection(velocityVec, reference.WorldMatrix.Up); 
    var forwardVelocity = VectorProjection(velocityVec, reference.WorldMatrix.Forward).Length() * VectorCompareDirection(velocityVec, reference.WorldMatrix.Forward); 
 
    if (rightVelocity &lt; 0) 
    { 
        velocityColumn = horizontalMidpoint - (int)Math.Round(-rightVelocity / horizontalVelocityIncrement); 
    } 
    else 
    { 
        velocityColumn = horizontalMidpoint + (int)Math.Round(rightVelocity / horizontalVelocityIncrement); 
    } 
 
    if (upVelocity &lt; 0) 
    { 
        velocityRow = verticalMidpoint + (int)Math.Round(-upVelocity / verticalVelocityIncrement); 
    } 
    else 
    { 
        velocityRow = verticalMidpoint - (int)Math.Round(upVelocity / verticalVelocityIncrement); 
    } 
 
    if (forwardVelocity &lt; 0) 
    { 
        isBackwards = true; 
    } 
    else 
    { 
        isBackwards = false; 
    } 
 
    if (!isBackwards) //draws prograde velocity   
    { 
        /*  
        Looks like:  
              o  
              o  
            o o o  
        o o o   o o o  
            o o o  
        */ 
 
        AddToGrid(velocityRow + 1, velocityColumn, velocityIndicatorColor); 
        AddToGrid(velocityRow + 1, velocityColumn + 1, velocityIndicatorColor); 
        AddToGrid(velocityRow + 1, velocityColumn - 1, velocityIndicatorColor); 
        AddToGrid(velocityRow - 1, velocityColumn, velocityIndicatorColor); 
        AddToGrid(velocityRow - 1, velocityColumn + 1, velocityIndicatorColor); 
        AddToGrid(velocityRow - 1, velocityColumn - 1, velocityIndicatorColor); 
        AddToGrid(velocityRow, velocityColumn + 1, velocityIndicatorColor); 
        AddToGrid(velocityRow, velocityColumn - 1, velocityIndicatorColor); 
        AddToGrid(velocityRow - 2, velocityColumn, velocityIndicatorColor); 
        AddToGrid(velocityRow - 3, velocityColumn, velocityIndicatorColor); 
        AddToGrid(velocityRow, velocityColumn + 2, velocityIndicatorColor); 
        AddToGrid(velocityRow, velocityColumn + 3, velocityIndicatorColor); 
        AddToGrid(velocityRow, velocityColumn - 2, velocityIndicatorColor); 
        AddToGrid(velocityRow, velocityColumn - 3, velocityIndicatorColor); 
 
    } 
    else //draws retrograde velocity  
    { 
        /*  
        Looks like:  
           o       o  
             o   o  
               o  
             o   o  
           o       o  
        */ 
 
        AddToGrid(velocityRow, velocityColumn, velocityIndicatorColor); 
        AddToGrid(velocityRow - 1, velocityColumn + 1, velocityIndicatorColor); 
        AddToGrid(velocityRow - 1, velocityColumn - 1, velocityIndicatorColor); 
        AddToGrid(velocityRow + 1, velocityColumn + 1, velocityIndicatorColor); 
        AddToGrid(velocityRow + 1, velocityColumn - 1, velocityIndicatorColor); 
        AddToGrid(velocityRow - 2, velocityColumn + 2, velocityIndicatorColor); 
        AddToGrid(velocityRow - 2, velocityColumn - 2, velocityIndicatorColor); 
        AddToGrid(velocityRow + 2, velocityColumn + 2, velocityIndicatorColor); 
        AddToGrid(velocityRow + 2, velocityColumn - 2, velocityIndicatorColor); 
    } 
 
    //Echo("Ship Velocity: " + Math.Round(shipSpeed, 2).ToString()); 
} 
 
void DrawOrientationIndicator() 
{ 
    if (!inGravity) 
    { 
        for (int j = 1; j &lt;= horizontalGridSize; j++) 
        { 
            AddToGrid(verticalMidpoint, j, spaceOrientationColor); //draws a horizontal line  
        } 
 
        for (int j = 1; j &lt;= verticalGridSize; j++) 
        { 
            AddToGrid(j, horizontalMidpoint, spaceOrientationColor); //draws a vertical line  
        } 
    } 
    else //draws a nose orientation indicator that looks like  --- W ---  
    { 
        AddToGrid(verticalMidpoint, horizontalMidpoint, planetaryOrientationColor); 
        AddToGrid(verticalMidpoint + 1, horizontalMidpoint + 1, planetaryOrientationColor); 
        AddToGrid(verticalMidpoint + 1, horizontalMidpoint - 1, planetaryOrientationColor); 
        AddToGrid(verticalMidpoint, horizontalMidpoint - 2, planetaryOrientationColor); 
        AddToGrid(verticalMidpoint, horizontalMidpoint + 2, planetaryOrientationColor); 
        AddToGrid(verticalMidpoint - 1, horizontalMidpoint - 3, planetaryOrientationColor); 
        AddToGrid(verticalMidpoint - 1, horizontalMidpoint + 3, planetaryOrientationColor); 
 
        for (int j = horizontalMidpoint - planeSymbolWidth; j &lt; horizontalMidpoint - 4; j++) 
        { 
            AddToGrid(verticalMidpoint, j, planetaryOrientationColor); 
        } 
 
        for (int j = horizontalMidpoint + 5; j &lt;= horizontalMidpoint + planeSymbolWidth; j++) 
        { 
            AddToGrid(verticalMidpoint, j, planetaryOrientationColor); 
        } 
    } 
} 
 
void GetRollPitchAndHeading() 
{ 
    /// Get Needed Vectors ///  
    Vector3D shipForwardVec = reference.WorldMatrix.Forward; 
    Vector3D shipLeftVec = reference.WorldMatrix.Left; 
    Vector3D shipDownVec = reference.WorldMatrix.Down; 
    Vector3D gravityVec = reference.GetNaturalGravity(); 
    Vector3D planetRelativeLeftVec = shipForwardVec.Cross(gravityVec); 
 
    reference.TryGetPlanetElevation(MyPlanetElevation.Surface, out altitude); 
 
    if (gravityVec.LengthSquared() == 0) 
    { 
        Echo("No natural gravity field detected"); 
        inGravity = false; 
        AssignGridDefaultValues(emptyGrid); 
        DrawOrientationIndicator(); 
        return; 
    } 
     
    inGravity = true; 
    AssignGridDefaultValues(skyGrid); 
 
    isUpsideDown = false; 
 
    /// Compute Pitch and Roll ///  
    if (!VectorIsSameDirection(shipDownVec, gravityVec)) 
    { 
        isUpsideDown = true; 
    } 
 
    rollAngle = VectorAngleBetween(shipLeftVec, planetRelativeLeftVec) * rad2deg; 
 
    rollAngle *= VectorCompareDirection(VectorProjection(shipLeftVec, gravityVec), gravityVec); //ccw is positive  
 
    if (rollAngle &gt; 90 || rollAngle &lt; -90) 
    { 
        rollAngle = 180 - rollAngle; //accounts for upsidedown  
    } 
 
    pitchAngle = VectorAngleBetween(shipForwardVec, gravityVec) * rad2deg; //angle from nose direction to gravity  
    pitchAngle -= 90; //as 90 degrees is level with ground  
 
    //Echo("Roll angle: " + Math.Round(rollAngle, 2).ToString() + "\nPitch angle: " + Math.Round(pitchAngle, 2).ToString()); 
    GetHorizonLine(); //gets horizon line  
 
    if (enableOrientationIndicator) 
    { 
        DrawOrientationIndicator(); //draws orientation indicator 
    } 
 
    /// Compute Bearing ///  
    //get east vector   
    Vector3D relativeEastVec = gravityVec.Cross(absoluteNorthVec); 
 
    //get relative north vector   
    Vector3D relativeNorthVec = relativeEastVec.Cross(gravityVec); 
 
    //project forward vector onto a plane comprised of the north and east vectors   
    Vector3D forwardProjNorthVec = VectorProjection(shipForwardVec, relativeNorthVec); 
    Vector3D forwardProjEastVec = VectorProjection(shipForwardVec, relativeEastVec); 
    Vector3D forwardProjPlaneVec = forwardProjEastVec + forwardProjNorthVec; 
 
    //find angle from abs north to projected forward vector measured clockwise   
    bearingAngle = VectorAngleBetween(forwardProjPlaneVec, relativeNorthVec) * rad2deg; 
    if (VectorIsSameDirection(shipForwardVec, relativeEastVec) == false) 
    { 
        bearingAngle = 360 - bearingAngle; //because of how the angle is measured   
    } 
 
    //Echo("Bearing: " + Math.Round(bearingAngle, 2).ToString()); 
} 
 
void GetHorizonLine() 
{ 
    int horizontalOffset = (int)Math.Round(pitchAngle / pitchIncrement * Math.Sin(rollAngle * deg2rad)); //offset of every point in the horizontal direction  
    int verticalOffset = (int)Math.Round(pitchAngle / pitchIncrement * Math.Cos(rollAngle * deg2rad)); //offset of every point in the vertical direction  
 
    double constant = 1; 
    if (isUpsideDown) 
    { 
        verticalOffset *= -1; 
        constant = -1; 
    } 
 
    int adjustedMidpoint = verticalMidpoint - horizontalOffset; //offsets our midpoint horizontally due to pitch and roll  
 
    for (int i = 1; i &lt;= horizontalGridSize; i++) //rows  
    { 
        int thisHeight = 0; 
 
        if (i &lt; verticalMidpoint) 
        { 
            thisHeight = adjustedMidpoint - (int)Math.Round((adjustedMidpoint - i) * Math.Tan(constant * rollAngle * deg2rad)); 
        } 
        else 
        { 
            thisHeight = adjustedMidpoint + (int)Math.Round((i - adjustedMidpoint) * Math.Tan(constant * rollAngle * deg2rad)); 
        } 
 
        thisHeight += verticalOffset; //offset our computed height by this value  
 
        AddToGrid(thisHeight, i, horizonLineColor); 
 
        for (int j = 1; j &lt;= verticalGridSize; j++) 
        { 
            if (!isUpsideDown) 
            { 
                if (j &gt; thisHeight) 
                { 
                    AddToGrid(j, i, groundColor); 
                } 
            } 
            else 
            { 
                if (j &lt; thisHeight) 
                { 
                    AddToGrid(j, i, groundColor); 
                } 
            } 
             
        } 
    } 
} 
 
 
void DrawGrid() //draws graphical grid  
{ 
    gridBuilder.Clear(); 
     
    gridBuilder.Append(headingAndVelocityPixelString).Append("\n"); 
     
    foreach (StringBuilder thisRow in horizonGrid) 
    { 
        gridBuilder.Append("\ue077").AppendLine(thisRow.ToString()); 
    } 
 
    gridBuilder.Append("\n" + altitudePixelString); 
     
    WriteToTextPanel(listScreens, gridBuilder.ToString()); 
} 
 
void GetNumberPixelString() //gets a graphical string from velocity and heading  
{ 
    //Velocity Splitting  
 
    string velocityString = string.Format("{0:000}", shipSpeed); 
    string altitudeString = string.Format("{0:00000}", altitude); 
    string headingOrAccelString = ""; 
    if (inGravity) 
        headingOrAccelString = string.Format("{0:000}", bearingAngle); 
    else 
        headingOrAccelString = string.Format("{0:000}", shipAcceleration); 
 
    DecomposeNumber velocityStruct; 
    DecomposeNumber headingOrAccelStruct; 
    DecomposeNumber altitudeStruct; 
 
    List&lt;string&gt; velocityWordStruct = GetPixelsFromNumber("spd"); 
    List&lt;string&gt; altitudeWordStruct = GetPixelsFromNumber("alt"); 
    List&lt;string&gt; headingOrAccelWordStruct; 
 
    if (inGravity) 
        headingOrAccelWordStruct = GetPixelsFromNumber("hdg"); 
    else 
        headingOrAccelWordStruct = GetPixelsFromNumber("acc"); 
 
 
    List&lt;string&gt; space = new List&lt;string&gt;() 
    { 
        "\ue076", 
        "\ue076", 
        "\ue076", 
        "\ue076", 
        "\ue076" 
    };  
 
    velocityStruct.Hundreds = GetPixelsFromNumber(velocityString.Substring(0, 1)); 
    velocityStruct.Tens = GetPixelsFromNumber(velocityString.Substring(1, 1)); 
    velocityStruct.Ones = GetPixelsFromNumber(velocityString.Substring(2, 1)); 
 
    headingOrAccelStruct.Hundreds = GetPixelsFromNumber(headingOrAccelString.Substring(0, 1)); 
    headingOrAccelStruct.Tens = GetPixelsFromNumber(headingOrAccelString.Substring(1, 1)); 
    headingOrAccelStruct.Ones = GetPixelsFromNumber(headingOrAccelString.Substring(2, 1)); 
 
    altitudeStruct.TenThousands = GetPixelsFromNumber(altitudeString.Substring(0, 1)); 
    altitudeStruct.Thousands = GetPixelsFromNumber(altitudeString.Substring(1, 1)); 
    altitudeStruct.Hundreds = GetPixelsFromNumber(altitudeString.Substring(2, 1)); 
    altitudeStruct.Tens = GetPixelsFromNumber(altitudeString.Substring(3, 1)); 
    altitudeStruct.Ones = GetPixelsFromNumber(altitudeString.Substring(4, 1)); 
 
    List&lt;List&lt;string&gt;&gt; headingAndVelocityCharacterList = new List&lt;List&lt;string&gt;&gt;() 
    { 
        space, velocityWordStruct, velocityStruct.Hundreds, velocityStruct.Tens, velocityStruct.Ones, space, headingOrAccelWordStruct, headingOrAccelStruct.Hundreds, headingOrAccelStruct.Tens, headingOrAccelStruct.Ones 
    }; 
 
    List&lt;List&lt;string&gt;&gt; altitudeCharacterList = new List&lt;List&lt;string&gt;&gt;(); 
    if (inGravity) 
    { 
        altitudeCharacterList = new List&lt;List&lt;string&gt;&gt;() 
        { 
            altitudeWordStruct, altitudeStruct.TenThousands, altitudeStruct.Thousands, altitudeStruct.Hundreds, altitudeStruct.Tens, altitudeStruct.Ones 
        }; 
    } 
    else 
    { 
        altitudeCharacterList = new List&lt;List&lt;string&gt;&gt;() 
        { 
            altitudeWordStruct, GetPixelsFromNumber("no grav") 
        }; 
    } 
 
    headingAndVelocityPixelString = ConstructPixelString(headingAndVelocityCharacterList); 
    altitudePixelString = ConstructPixelString(altitudeCharacterList); 
} 
 
StringBuilder pixelString = new StringBuilder(); 
string ConstructPixelString(List&lt;List&lt;string&gt;&gt; pixelCharacters) //each list has 1-5 rows 
{ 
    pixelString.Clear(); 
 
    for (int i = 0; i &lt; 5; i++) 
    { 
        foreach (List&lt;string&gt; thisCharacter in pixelCharacters) 
        { 
            pixelString.Append(thisCharacter[i]); 
        } 
        pixelString.Append("\n"); 
    } 
 
    return pixelString.ToString(); 
} 
 
struct DecomposeNumber 
{ 
    public List&lt;string&gt; Ones; 
    public List&lt;string&gt; Tens; 
    public List&lt;string&gt; Hundreds; 
    public List&lt;string&gt; Thousands; 
    public List&lt;string&gt; TenThousands; 
} 
 
 
const string largeSpace = "\ue078\ue077"; 
List&lt;string&gt; GetPixelsFromNumber(string num) //gets graphical representation from a double  
{ 
    List&lt;string&gt; numberGraphicRows = new List&lt;string&gt;(); 
 
    switch (num) 
    { 
        case "0": 
            numberGraphicRows = rows0; 
            break; 
 
        case "1": 
            numberGraphicRows = rows1; 
            break; 
 
        case "2": 
            numberGraphicRows = rows2; 
           break; 
 
        case "3": 
            numberGraphicRows = rows3; 
            break; 
 
        case "4": 
            numberGraphicRows = rows4; 
            break; 
 
        case "5": 
            numberGraphicRows = rows5; 
            break; 
 
        case "6": 
            numberGraphicRows = rows6; 
            break; 
 
        case "7": 
            numberGraphicRows = rows7; 
            break; 
 
        case "8": 
            numberGraphicRows = rows8; 
            break; 
 
        case "9": 
            numberGraphicRows = rows9; 
            break; 
 
        case "spd": 
            numberGraphicRows = rowsSpd; 
            break; 
 
        case "hdg": 
            numberGraphicRows = rowsHdg; 
            break; 
 
        case "alt": 
            numberGraphicRows = rowsAlt; 
            break; 
 
        case "no grav": 
            numberGraphicRows = rowsNoGrav; 
            break; 
 
        case "acc": 
            numberGraphicRows = rowsAcc; 
            break; 
 
        default: 
            numberGraphicRows = rows0; 
            break; 
    } 
    return numberGraphicRows; 
} 
 
void WriteToTextPanel(List&lt;IMyTextPanel&gt; listScreens, string textToWrite, bool append = false) 
{ 
    for (int i = 0; i &lt; listScreens.Count; i++) 
    { 
        var thisScreen = listScreens[i]; 
        thisScreen.WritePublicText(textToWrite, append); 
        thisScreen.ShowTextureOnScreen(); 
        thisScreen.ShowPublicTextOnScreen(); 
        thisScreen.SetValue("FontSize", 0.3f); //for large grid 
        thisScreen.SetValue&lt;long&gt;("Font", 1147350002); 
    } 
} 
 
int VectorCompareDirection(Vector3D a, Vector3D b) //returns -1 if vectors return negative dot product  
{ 
    double check = a.Dot(b); 
    if (check &lt; 0) 
        return -1; 
    else 
        return 1; 
} 
 
double VectorAngleBetween(Vector3D a, Vector3D b) //returns radians  
{ 
    if (Vector3D.IsZero(a) || Vector3D.IsZero(b)) 
        return 0; 
    else 
        return Math.Acos(MathHelper.Clamp(a.Dot(b) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1)); 
} 
 
Vector3D VectorProjection(Vector3D a, Vector3D b) //projects a onto b  
{ 
    Vector3D projection = a.Dot(b) / b.LengthSquared() * b; 
    return projection; 
} 
 
bool VectorIsSameDirection(Vector3D a, Vector3D b) //returns true if vectors produce positive dot product  
{ 
    double check = a.Dot(b); 
    if (check &lt; 0) 
        return false; 
    else 
        return true; 
} 
 
//Whip's Running Symbol Method v6 
int runningSymbolVariant = 0; 
string RunningSymbol() 
{ 
    runningSymbolVariant++; 
    string strRunningSymbol = ""; 
     
    if (runningSymbolVariant == 0) 
        strRunningSymbol = "|"; 
    else if (runningSymbolVariant == 1) 
        strRunningSymbol = "/"; 
    else if (runningSymbolVariant == 2) 
        strRunningSymbol = "--"; 
    else if (runningSymbolVariant == 3) 
    { 
        strRunningSymbol = "\\"; 
        runningSymbolVariant = -1; 
    } 
 
    return strRunningSymbol; 
} 
 
List&lt;string&gt; rows0 = new List&lt;string&gt;(); 
List&lt;string&gt; rows1 = new List&lt;string&gt;(); 
List&lt;string&gt; rows2 = new List&lt;string&gt;(); 
List&lt;string&gt; rows3 = new List&lt;string&gt;(); 
List&lt;string&gt; rows4 = new List&lt;string&gt;(); 
List&lt;string&gt; rows5 = new List&lt;string&gt;(); 
List&lt;string&gt; rows6 = new List&lt;string&gt;(); 
List&lt;string&gt; rows7 = new List&lt;string&gt;(); 
List&lt;string&gt; rows8 = new List&lt;string&gt;(); 
List&lt;string&gt; rows9 = new List&lt;string&gt;(); 
List&lt;string&gt; rowsSpd = new List&lt;string&gt;(); 
List&lt;string&gt; rowsHdg = new List&lt;string&gt;(); 
List&lt;string&gt; rowsAlt = new List&lt;string&gt;(); 
List&lt;string&gt; rowsNoGrav = new List&lt;string&gt;(); 
List&lt;string&gt; rowsAcc= new List&lt;string&gt;(); 
 
void InitializeCharacterLists() 
{ 
    #region character_list_declaration 
    rows0 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }) 
    }; 
 
    rows1 = new List&lt;string&gt;() 
    { 
        new string(new char[] { backgroundColor, numberColor, backgroundColor, backgroundColor }), 
        new string(new char[] { backgroundColor, numberColor, backgroundColor, backgroundColor }), 
        new string(new char[] { backgroundColor, numberColor, backgroundColor, backgroundColor }), 
        new string(new char[] { backgroundColor, numberColor, backgroundColor, backgroundColor }), 
        new string(new char[] { backgroundColor, numberColor, backgroundColor, backgroundColor }) 
    }; 
 
    rows2 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }) 
    }; 
 
    rows3 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }) 
    }; 
 
    rows4 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, numberColor, backgroundColor }) 
    }; 
 
    rows5 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }) 
    }; 
 
    rows6 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }) 
    }; 
 
    rows7 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, numberColor, backgroundColor, backgroundColor }), 
        new string(new char[] { backgroundColor, numberColor, backgroundColor, backgroundColor }), 
        new string(new char[] { backgroundColor, numberColor, backgroundColor, backgroundColor }) 
    }; 
 
    rows8 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }) 
    }; 
 
    rows9 = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, numberColor, numberColor, backgroundColor }) 
    }; 
 
    rowsSpd = new List&lt;string&gt;() 
    { 
        new string(new char[] { backgroundColor, textColor, textColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { textColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor }), 
        new string(new char[] { textColor, textColor, textColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { backgroundColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor }), 
        new string(new char[] { textColor, textColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor }) 
    }; 
 
    rowsHdg = new List&lt;string&gt;() 
    { 
        new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor }), 
        new string(new char[] { textColor, textColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor }), 
        new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor }) 
    }; 
 
    rowsAlt = new List&lt;string&gt;() 
    { 
        largeSpace + new string(new char[] { backgroundColor, textColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor }), 
        largeSpace + new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, textColor, backgroundColor }), 
        largeSpace + new string(new char[] { textColor, textColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor }), 
        largeSpace + new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, textColor, backgroundColor }), 
        largeSpace + new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, textColor, textColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor }) 
    }; 
 
    rowsNoGrav = new List&lt;string&gt;() 
    { 
        new string(new char[] { numberColor, numberColor, backgroundColor, backgroundColor, backgroundColor, numberColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor, numberColor, numberColor, backgroundColor, backgroundColor, numberColor, numberColor, backgroundColor, backgroundColor, backgroundColor, numberColor, backgroundColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, backgroundColor, numberColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, backgroundColor, numberColor, backgroundColor, numberColor, numberColor, backgroundColor, numberColor, numberColor, backgroundColor, backgroundColor, numberColor, numberColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, backgroundColor, numberColor, backgroundColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, numberColor, backgroundColor, backgroundColor }), 
        new string(new char[] { numberColor, backgroundColor, numberColor, backgroundColor, backgroundColor, numberColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor, numberColor, numberColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, numberColor, backgroundColor, backgroundColor, backgroundColor }) 
    }; 
 
    rowsAcc= new List&lt;string&gt;() 
    { 
        new string(new char[] { backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor }), 
        new string(new char[] { textColor, textColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor, backgroundColor }), 
        new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor, backgroundColor, backgroundColor, textColor, backgroundColor }), 
        new string(new char[] { textColor, backgroundColor, textColor, backgroundColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, textColor, textColor, backgroundColor, backgroundColor, backgroundColor }) 
    }; 
    #endregion 
} 
 
/*           
///WHAT'S CHANGED///  
 
- Fixed incorrect display of pitch 
- Fixed some variable name typos 
- This code can now display altitude (only in DEV branch!) 
- Removed character limit bypass 
- Clamped arccosine inputs to avoid NaN errors 
- Used string builder instead of string to help performance 
- Added in monospace support - v29 
- Added more color presets - v30 
- Added in a custom color method - v30 
- Fixed colorblind mode settings not updating the text and number colors - v31 
- Added automatic font selection - 31 
- [REVERTED] ~~Code now ignores programs on other grids connected via connectors - v32~~ 
- Changed color defaults - v35 
- [REVERTED] ~~Added method to only consider grids that are the same as the program or are attached via rotor trick - v34~~ - v36 
- Added a function to pause script execution while away - v37 
- Removed all static instance fields - v38 
- Optimized VectorAngleBetween() method - v39 
- REVERTED ALL CHANGES FROM VERSION 40 
- Code now only rescans the grid for blocks every 10 seconds instead of 10 times a second. This should drastically reduce lag on larger ships - v41 
- Removed excess GridTerminalSystem calls in the WriteToTextPanel() method. This should further reduce lag :) - v42 
*/</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallTextPanel</SubtypeName>
              <EntityId>97184509319538220</EntityId>
              <Min x="46" y="-1" z="-3" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Horizon</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages />
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Monospace" />
              <FontSize>0.3</FontSize>
              <PublicDescription>


























































</PublicDescription>
              <PublicTitle>Public title</PublicTitle>
              <ShowText>PUBLIC</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="48" y="0" z="-2" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="48" y="0" z="-4" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="0" z="0" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="45" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="48" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="49" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="48" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="47" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="49" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="49" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="48" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="49" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="50" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="50" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="51" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="51" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="50" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="50" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="51" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="51" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="52" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="52" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="52" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="53" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="53" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="53" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="52" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="54" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="54" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="55" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="53" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="55" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="55" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="54" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="54" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="55" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="56" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="57" y="-2" z="-4" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="56" y="-1" z="-4" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="56" y="-1" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="56" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="51" y="1" z="-2" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="49" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="55" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="50" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="50" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="57" y="-1" z="2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="48" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="49" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="50" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="54" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="55" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="57" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="47" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="48" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="49" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="50" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="56" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="53" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="54" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="59" y="0" z="0" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="46" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="47" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="48" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="49" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="54" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Thrust">
              <SubtypeName>SmallBlockSmallAtmosphericThrust</SubtypeName>
              <EntityId>121735637605830090</EntityId>
              <Min x="56" y="-1" z="-3" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.266666681" y="-0.15" z="-0.55" />
              <CustomName>Atmospheric Thrusters 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="53" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="55" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="45" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="46" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="47" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="48" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="55" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="53" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="54" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="45" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="46" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="47" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="53" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="52" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="44" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="45" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="46" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="51" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="52" y="-1" z="-8" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="45" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="0" z="-7" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="51" y="-1" z="-8" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="52" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="51" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="44" y="0" z="-6" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="52" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="51" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="58" y="0" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="56" y="-2" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="55" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="58" y="-1" z="-8" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="45" y="-2" z="-3" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="46" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="45" y="-2" z="-4" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="45" y="-2" z="-2" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="47" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="46" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="46" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="45" y="-2" z="-5" />
              <BlockOrientation Forward="Right" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="45" y="-2" z="-1" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="47" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="47" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="46" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="46" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="49" y="-1" z="-3" />
              <ColorMaskHSV x="0.266666681" y="-0.15" z="-0.55" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="48" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="48" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="47" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="47" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="50" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="49" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="49" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="48" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="48" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="51" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="50" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="50" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="49" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="49" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="52" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="51" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="51" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="50" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="50" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="53" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="52" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="52" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="51" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="51" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="54" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="53" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="53" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="52" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="52" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="55" y="-2" z="-4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="54" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="53" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="53" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="55" y="-2" z="-3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="54" y="-2" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="56" y="0" z="-1" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="54" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="54" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="55" y="-2" z="-1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="55" y="-2" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="55" y="0" z="-3" />
              <ColorMaskHSV x="0.25555557" y="1" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="56" y="-1" z="-2" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="56" y="0" z="-2" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="56" y="0" z="-4" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="56" y="0" z="-5" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="56" y="-1" z="-8" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="56" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="56" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="56" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="59" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="59" y="0" z="1" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="58" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="57" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="58" y="-1" z="2" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="57" y="-1" z="-8" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="58" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="59" y="0" z="-7" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="57" y="0" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="58" y="0" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="59" y="0" z="-6" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="57" y="0" z="-8" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="58" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="58" y="0" z="-4" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>126802143520478585</EntityId>
              <Min x="57" y="0" z="-1" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
              <CustomName>Headlight</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <Falloff>1</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="58" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="57" y="0" z="-7" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="58" y="0" z="-5" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="57" y="0" z="-2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="57" y="0" z="-6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="58" y="0" z="-3" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="57" y="-2" z="-1" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_2</SubtypeName>
              <EntityId>89513178868220315</EntityId>
              <Min x="57" y="0" z="-3" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Horizon</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages />
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Monospace" />
              <FontSize>0.3</FontSize>
              <PublicDescription>


























































</PublicDescription>
              <PublicTitle>Public title</PublicTitle>
              <ShowText>PUBLIC</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="58" y="0" z="-2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>136707555544711598</EntityId>
              <Min x="57" y="-1" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <CustomName>Wheel Suspensions 6</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>108810469845186762</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>0.306018829</Strength>
              <Propulsion>false</Propulsion>
              <Friction>0.219650835</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0</MaxSteerAngle>
              <SteerSpeed>0</SteerSpeed>
              <SteerReturnSpeed>0</SteerReturnSpeed>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SuspensionTravel>0.402135044</SuspensionTravel>
              <SpeedLimit>250.092712</SpeedLimit>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>108115452605467096</EntityId>
              <Min x="57" y="0" z="-5" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <CustomName>Headlight</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <Falloff>1</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="57" y="-2" z="-2" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="58" y="0" z="-1" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="58" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="44" y="0" z="-3" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.266666681" y="-0.15" z="-0.55" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="57" y="0" z="-4" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="57" y="-2" z="-3" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="57" y="-2" z="-5" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3mirrored</SubtypeName>
              <EntityId>123651197017012899</EntityId>
              <Min x="57" y="-1" z="-5" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <CustomName>Wheel Suspension 3x3 Left 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>134415447510348815</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>0.306018829</Strength>
              <Propulsion>false</Propulsion>
              <Friction>0.219650835</Friction>
              <Power>0</Power>
              <Height>-0.32</Height>
              <MaxSteerAngle>0</MaxSteerAngle>
              <SteerSpeed>0</SteerSpeed>
              <SteerReturnSpeed>0</SteerReturnSpeed>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SuspensionTravel>0.472865462</SuspensionTravel>
              <SpeedLimit>250.092712</SpeedLimit>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.58118773" y="0.0240951777" z="-2.43119431" />
          <AngularVelocity x="8.847588E-05" y="-0.007130541" z="-0.0008896168" />
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Turret switch</Name>
              <Blocks>
                <Vector3I>
                  <X>46</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
                <Vector3I>
                  <X>46</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Headlights</Name>
              <Blocks>
                <Vector3I>
                  <X>57</X>
                  <Y>0</Y>
                  <Z>-5</Z>
                </Vector3I>
                <Vector3I>
                  <X>57</X>
                  <Y>0</Y>
                  <Z>-1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>WH</Name>
              <Blocks>
                <Vector3I>
                  <X>57</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
                <Vector3I>
                  <X>57</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
                <Vector3I>
                  <X>53</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
                <Vector3I>
                  <X>53</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
                <Vector3I>
                  <X>49</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
                <Vector3I>
                  <X>45</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
                <Vector3I>
                  <X>49</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
                <Vector3I>
                  <X>45</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>cams</Name>
              <Blocks>
                <Vector3I>
                  <X>56</X>
                  <Y>0</Y>
                  <Z>-3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>GY</Name>
              <Blocks>
                <Vector3I>
                  <X>54</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
                <Vector3I>
                  <X>54</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Turret switchG</Name>
              <Blocks>
                <Vector3I>
                  <X>46</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
                <Vector3I>
                  <X>50</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>MART</Name>
              <Blocks>
                <Vector3I>
                  <X>51</X>
                  <Y>0</Y>
                  <Z>-3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>PBs</Name>
              <Blocks>
                <Vector3I>
                  <X>46</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
                <Vector3I>
                  <X>50</X>
                  <Y>-1</Y>
                  <Z>-2</Z>
                </Vector3I>
                <Vector3I>
                  <X>46</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
                <Vector3I>
                  <X>50</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>turret DG switch</Name>
              <Blocks>
                <Vector3I>
                  <X>46</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
                <Vector3I>
                  <X>50</X>
                  <Y>-1</Y>
                  <Z>-4</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Turret group 1</Name>
              <Blocks>
                <Vector3I>
                  <X>51</X>
                  <Y>0</Y>
                  <Z>-3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <DisplayName>T-80 UK vanilla tank</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>135961783891897840</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="10.644927978515625" y="1.908538818359375" z="-21.423568725585938" />
            <Forward x="-0.7914599" y="-0.3052534" z="0.529539466" />
            <Up x="-0.520647049" y="0.790533066" z="-0.322465777" />
            <Orientation>
              <X>-0.323582172</X>
              <Y>0.8124434</Y>
              <Z>-0.005296508</Z>
              <W>0.4849766</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>80704173249374633</EntityId>
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.52560234" y="-0.024859786" z="-2.47836876" />
          <AngularVelocity x="-2.3172307" y="3.51102066" z="-1.435819" />
          <DisplayName>Small Grid 1814</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>116480871253737087</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="9.6997852325439453" y="1.98431396484375" z="-19.711921691894531" />
            <Forward x="-0.7166335" y="-0.199246675" z="0.6683839" />
            <Up x="-0.5206136" y="0.7905254" z="-0.322538584" />
            <Orientation>
              <X>-0.32161656</X>
              <Y>0.854841948</Y>
              <Z>-0.0360569246</Z>
              <W>0.40559575</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>124416938539352175</EntityId>
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.54633331" y="0.00664057955" z="-2.46381187" />
          <AngularVelocity x="-2.192205" y="3.32132578" z="-1.35853636" />
          <DisplayName>Small Grid 5087</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>108678403217075009</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="11.723850250244141" y="1.4273223876953125" z="-24.34521484375" />
            <Forward x="0.3548538" y="-0.143159091" z="-0.923896253" />
            <Up x="-0.5206542" y="0.790527344" z="-0.3224683" />
            <Orientation>
              <X>-0.124605313</X>
              <Y>-0.150084645</Y>
              <Z>0.2986802</Z>
              <W>0.9342046</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>76679686935020835</EntityId>
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.55707788" y="-0.007316433" z="-2.458437" />
          <AngularVelocity x="-2.26743627" y="3.43559575" z="-1.40531254" />
          <DisplayName>Small Grid 7716</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>73843637257646209</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="12.434651374816895" y="-0.0466461181640625" z="-20.580169677734375" />
            <Forward x="0.7130232" y="0.610362947" z="0.3450437" />
            <Up x="0.520415843" y="-0.790498734" z="0.322923" />
            <Orientation>
              <X>0.807062447</X>
              <Y>0.145506233</Y>
              <Z>-0.493861854</Z>
              <W>0.289099634</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>117304096015930550</EntityId>
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.52808857" y="-0.0135110021" z="-2.45572281" />
          <AngularVelocity x="-1.9963268" y="3.02380657" z="-1.23775613" />
          <DisplayName>Small Grid 7001</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>83835784884026539</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="11.64930248260498" y="-0.3613433837890625" z="-20.082984924316406" />
            <Forward x="-0.06667927" y="-0.414084971" z="-0.9077927" />
            <Up x="0.520715952" y="-0.7905347" z="0.322350621" />
            <Orientation>
              <X>0.08890989</X>
              <Y>0.195444867</Y>
              <Z>0.941999137</Z>
              <W>-0.257941842</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>118798254609943550</EntityId>
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.52471256" y="-0.005922988" z="-2.46011734" />
          <AngularVelocity x="-2.232261" y="3.38227057" z="-1.38346541" />
          <DisplayName>Small Grid 3360</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>75009882034222934</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="12.776421546936035" y="-0.6528167724609375" z="-22.61669921875" />
            <Forward x="-0.458918035" y="0.0590690523" z="0.8865132" />
            <Up x="0.5207527" y="-0.790551245" z="0.32225126" />
            <Orientation>
              <X>0.9215385</X>
              <Y>0.306632161</Y>
              <Z>0.214574769</Z>
              <W>0.103446618</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>131677781121062651</EntityId>
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.54229975" y="-0.0137485936" z="-2.44893074" />
          <AngularVelocity x="-2.198446" y="3.33097363" z="-1.36246371" />
          <DisplayName>Small Grid 559</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>98317262320539990</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="13.069045066833496" y="1.5715484619140625" z="-21.899887084960938" />
            <Forward x="0.267052978" y="0.324792922" z="-0.9072994" />
            <Up x="-0.671686947" y="-0.6123823" z="-0.41692245" />
            <Orientation>
              <X>-0.05927753</X>
              <Y>-0.2069697</Y>
              <Z>0.895922661</Z>
              <W>0.3885516</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>118021978969237547</EntityId>
              <ParentEntityId>122321385086396265</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>110884401872207298</EntityId>
              <Min x="0" y="1" z="0" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.258333325" y="-0.11" z="-0.41" />
              <ParentEntityId>129633663473348497</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.574276" y="0.02761951" z="-2.42571831" />
          <AngularVelocity x="-0.000884267036" y="-0.0114565976" z="0.0100060329" />
          <DisplayName>Small Grid 9617</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>99602934065456887</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="12.698478698730469" y="1.2541961669921875" z="-22.087692260742188" />
            <Forward x="0.681230366" y="0.629200459" z="0.374207884" />
            <Up x="-0.496931553" y="0.0220856182" z="0.867508531" />
            <Orientation>
              <X>0.6873308</X>
              <Y>-0.46333608</Y>
              <Z>-0.128582686</Z>
              <W>0.5443919</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
              <SubtypeName>PassengerSeatSmall</SubtypeName>
              <EntityId>101161457281656962</EntityId>
              <Min x="-1" y="-1" z="-1" />
              <ColorMaskHSV x="0.122222222" y="-0.3" z="-0.19" />
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>1</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Seat</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <HorizonIndicatorEnabled>false</HorizonIndicatorEnabled>
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
              </BuildToolbar>
              <PilotRelativeWorld xsi:nil="true" />
              <PilotGunDefinition xsi:nil="true" />
              <IsInFirstPersonView>true</IsInFirstPersonView>
              <OxygenLevel>0</OxygenLevel>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>81548530325302923</EntityId>
              <Min x="0" y="-2" z="1" />
              <ColorMaskHSV x="0.327777773" y="-0.11" z="-0.49" />
              <ParentEntityId>102747880685982228</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.58253384" y="0.02401051" z="-2.429472" />
          <AngularVelocity x="0.001640124" y="-0.00764734" z="-0.0003314499" />
          <DisplayName>Small Grid 666</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>92200031993556517</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="13.93370532989502" y="-0.4932098388671875" z="-24.093719482421875" />
            <Forward x="-0.1289882" y="0.300237924" z="0.9451031" />
            <Up x="0.520772159" y="-0.7905528" z="0.322216064" />
            <Orientation>
              <X>0.94598496</X>
              <Y>0.278682321</Y>
              <Z>0.019716125</Z>
              <W>0.164498866</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>108810469845186762</EntityId>
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.53824806" y="-0.0289547443" z="-2.45148277" />
          <AngularVelocity x="-2.203312" y="3.33845448" z="-1.3654207" />
          <DisplayName>Small Grid 4164</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>89179957008639262</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="12.629012107849121" y="1.3790283203125" z="-25.925483703613281" />
            <Forward x="0.127671361" y="-0.3009461" z="-0.9450563" />
            <Up x="-0.5208036" y="0.790574968" z="-0.322110027" />
            <Orientation>
              <X>-0.164654449</X>
              <Y>-0.01899337</Y>
              <Z>0.278570324</Z>
              <W>0.946005642</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>134415447510348815</EntityId>
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.54920483" y="-0.0262746811" z="-2.46254158" />
          <AngularVelocity x="-2.122146" y="3.21519756" z="-1.31505013" />
          <DisplayName>Small Grid 1598</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>136458112598353044</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="21.219625473022461" y="-5.3758087158203125" z="-28.105598449707031" />
            <Forward x="-0.2667519" y="-0.330098331" z="0.9054713" />
            <Up x="0.669931769" y="0.611902237" z="0.42043674" />
            <Orientation>
              <X>0.387531817</X>
              <Y>0.895854235</Y>
              <Z>0.209446773</Z>
              <W>0.05827807</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="21" y="3" z="-10" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>77750756332039157</EntityId>
              <Min x="24" y="3" z="-12" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>TBDecoyL2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_On</Action>
                      <BlockEntityId>73506815324028728</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Force weld</Action>
                      <BlockEntityId>123241006784979201</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Detach</Action>
                      <BlockEntityId>123241006784979201</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <Delay>1800</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>true</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>73197065098465392</EntityId>
              <Min x="24" y="3" z="-11" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>TBDecoyR1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_On</Action>
                      <BlockEntityId>123451274474565023</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Force weld</Action>
                      <BlockEntityId>78028215622447275</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Detach</Action>
                      <BlockEntityId>78028215622447275</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <Delay>1800</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>true</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="20" y="3" z="-9" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="25" y="4" z="-13" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="20" y="3" z="-10" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="17" y="3" z="-10" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="18" y="3" z="-13" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_LargeGatlingTurret">
              <SubtypeName>SmallGatlingTurret</SubtypeName>
              <EntityId>103455281411990753</EntityId>
              <Min x="20" y="4" z="-15" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>50</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                            <SubtypeName>NATO_25x184mm</SubtypeName>
                            <ProjectilesCount>0</ProjectilesCount>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.084</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>TurretD "Designator"</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsShooting>false</IsShooting>
              <IsShootingFromTerminal>false</IsShootingFromTerminal>
              <IsLargeTurret>true</IsLargeTurret>
              <MinFov>0.1</MinFov>
              <MaxFov>1.04719758</MaxFov>
              <Inventory>
                <Items>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>50</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                      <SubtypeName>NATO_25x184mm</SubtypeName>
                      <ProjectilesCount>0</ProjectilesCount>
                    </PhysicalContent>
                    <ItemId>0</ItemId>
                  </MyObjectBuilder_InventoryItem>
                </Items>
                <nextItemId>1</nextItemId>
                <Volume>0.084</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
              <RemainingAmmo>38</RemainingAmmo>
              <Target>0</Target>
              <TargetMissiles>true</TargetMissiles>
              <IsPotentialTarget>true</IsPotentialTarget>
              <PreviousControlledEntityId xsi:nil="true" />
              <Rotation>0</Rotation>
              <Elevation>0</Elevation>
              <GunBase>
                <RemainingAmmo>38</RemainingAmmo>
                <CurrentAmmoMagazineName>NATO_25x184mm</CurrentAmmoMagazineName>
                <RemainingAmmosList />
                <LastShootTime>636486799592863203</LastShootTime>
              </GunBase>
              <EnableIdleRotation>false</EnableIdleRotation>
              <PreviousIdleRotationState>false</PreviousIdleRotationState>
              <TargetCharacters>true</TargetCharacters>
              <TargetNeutrals>false</TargetNeutrals>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
              <Min x="20" y="4" z="-8" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="27" y="3" z="-10" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>94620233822881674</EntityId>
              <Min x="21" y="3" z="-9" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Motor2 "Elevation" </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>143919086593232799</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <Friction>0.9744086</Friction>
              <TargetVelocity>0.0372301154</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>1.13446343</MaxAngle>
              <CurrentAngle>0.120470367</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="22" y="3" z="-10" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="24" y="3" z="-13" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RemoteControl">
              <SubtypeName>SmallBlockRemoteControl</SubtypeName>
              <EntityId>85904477341728111</EntityId>
              <Min x="23" y="3" z="-13" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>AGunnerRC</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>110748912253565638</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>124386803149125880</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>92141809896083356</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>79302216411557445</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>95933841827690218</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>137297959657450361</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>77750756332039157</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>73197065098465392</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>89954160883401502</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>9</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>85904477341728111</BlockEntityId>
                      <GroupName>Turret switchG</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>10</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>85904477341728111</BlockEntityId>
                      <GroupName>Turret switch</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>11</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>85904477341728111</BlockEntityId>
                      <GroupName>Gattlings</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>12</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Shoot</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>85904477341728111</BlockEntityId>
                      <GroupName>Gattlings</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>13</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>127779292052327163</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>14</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Shoot</Action>
                      <BlockEntityId>127779292052327163</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>15</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemWeapon">
                      <DefinitionId Type="MyObjectBuilder_SmallMissileLauncher" Subtype="" />
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>16</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>18</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetMissiles</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>19</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetSmallShips</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>20</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetLargeShips</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>21</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetStations</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>22</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetCharacters</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>23</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TargetNeutrals_On</Action>
                      <BlockEntityId>103455281411990753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>24</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>85904477341728111</BlockEntityId>
                      <GroupName>GY</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>25</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Override</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>85904477341728111</BlockEntityId>
                      <GroupName>GY</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>26</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>130995835371078773</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>27</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>114133199966191645</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>28</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Reverse</Action>
                      <BlockEntityId>129683276568889511</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>29</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>109875867159840968</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>30</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>109875867159840968</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>31</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>108934167349038992</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>32</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>EnableBroadCast</Action>
                      <BlockEntityId>108934167349038992</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>33</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>73798704697666123</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>34</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>103394600491645425</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>35</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>85904477341728111</BlockEntityId>
                      <GroupName>PBs</GroupName>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <HorizonIndicatorEnabled>false</HorizonIndicatorEnabled>
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
              </BuildToolbar>
              <PreviousControlledEntityId xsi:nil="true" />
              <AutoPilotEnabled>false</AutoPilotEnabled>
              <FlightMode>0</FlightMode>
              <BindedCamera>0</BindedCamera>
              <CurrentWaypointIndex>-1</CurrentWaypointIndex>
              <Waypoints />
              <Direction>0</Direction>
              <DockingModeEnabled>false</DockingModeEnabled>
              <CollisionAvoidance>false</CollisionAvoidance>
              <Coords />
              <Names />
              <WaypointThresholdDistance>0</WaypointThresholdDistance>
              <IsMainRemoteControl>false</IsMainRemoteControl>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>89954160883401502</EntityId>
              <Min x="20" y="3" z="-12" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>TBDecoyR2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_On</Action>
                      <BlockEntityId>130256132884452363</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Force weld</Action>
                      <BlockEntityId>74350953969691101</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Detach</Action>
                      <BlockEntityId>74350953969691101</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <Delay>1800</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>true</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="19" y="4" z="-9" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="18" y="3" z="-10" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="18" y="4" z="-9" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="20" y="3" z="-13" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>86861820172540723</EntityId>
              <Min x="21" y="3" z="-13" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>PBbearing</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>//Pirate Drone Script (Encounter)  
//By Rexxar 
 
//################################## 
//modify these 
private const double WEAPON_ENGAGE_DIST = 300;          //fire static weapons when player gets this close 
private const double WEAPON_DISENGAGE_DIST = 400;       //disable static weapons after this distance 
private const bool USE_STATIC_GUNS = true;              //use static weapons? 
private const int WEAPON_ANGLE_LIMIT = 30;              //activate weapons if player is within this many degrees in front of drone 
private const double PATROL_RADIUS = 10000;             //engage any player inside a sphere with this radius 
private const double BREAKAWAY_DISTANCE = 1000;         //stop chasing a player outside the patrol sphere if they get this far away from drone 
//################################## 
 
 
private List&lt;IMyUserControllableGun&gt; _guns; 
private Vector3D _origin; 
private List&lt;IMyRemoteControl&gt; _controllers; 
private IMyRemoteControl _currentControl; 
private double _weaponAngle; 
private bool _shooting; 
 
Program() 
{ 
    _guns = new List&lt;IMyUserControllableGun&gt;(); 
    _controllers = new List&lt;IMyRemoteControl&gt;(); 
    GridTerminalSystem.GetBlocksOfType(_guns); 
    GridTerminalSystem.GetBlocksOfType(_controllers); 
    _currentControl = _controllers.FirstOrDefault(c =&gt; c.IsFunctional); 
 
    if (_currentControl == null) 
        return; 
 
    if (string.IsNullOrEmpty(Storage)) 
    { 
        if (!Vector3D.TryParse(Storage, out _origin)) 
            _origin = _currentControl.GetPosition(); 
    } 
    else 
    { 
        _origin = _currentControl.GetPosition(); 
        Storage = _origin.ToString(); 
    } 
 
    _weaponAngle = Math.Cos(MathHelperD.ToRadians(WEAPON_ANGLE_LIMIT)); 
} 
 
void Main() 
{ 
 
    //check if current RC is damaged, look for a replacement 
    if (_currentControl == null || !_currentControl.IsFunctional) 
    { 
        _currentControl = _controllers.FirstOrDefault(c =&gt; c.IsFunctional); 
    } 
 
    if (_currentControl == null) 
        return; //no controls left :( 
 
 
    //Check Player Distance From Origin  
    _currentControl.ClearWaypoints(); 
    Vector3D currentPos = _currentControl.GetPosition(); 
    Vector3D closestPlayer; 
    _currentControl.GetNearestPlayer(out closestPlayer); 
    double playerDistanceOrigin = Vector3D.DistanceSquared(closestPlayer, _origin); 
    double playerDistanceDrone = Vector3D.DistanceSquared(currentPos, closestPlayer); 
    if (playerDistanceDrone &lt; BREAKAWAY_DISTANCE * BREAKAWAY_DISTANCE || playerDistanceOrigin &lt; PATROL_RADIUS * PATROL_RADIUS) 
    { 
        //Chase Player  
        _currentControl.AddWaypoint(closestPlayer, "Player"); 
 
        //update guns 
        if (USE_STATIC_GUNS) 
        { 
            if (playerDistanceDrone &lt;= WEAPON_ENGAGE_DIST * WEAPON_ENGAGE_DIST) 
            { 
                Vector3D playerDir = closestPlayer - currentPos; 
                playerDir.Normalize(); 
                double dot = Vector3D.Dot(_currentControl.WorldMatrix.Forward, playerDir); 
                //check if player is inside our target cone 
                if (dot &gt; _weaponAngle) 
                { 
                    StartShooting(); 
                    _shooting = true; 
                } 
                else 
                { 
                    StopShooting(); 
                    _shooting = false; 
                } 
            } 
            else if (playerDistanceDrone &gt; WEAPON_DISENGAGE_DIST * WEAPON_DISENGAGE_DIST &amp;&amp; _shooting) 
            { 
                StopShooting(); 
                _shooting = false; 
            } 
        } 
    } 
    else 
    { 
        //Go To Origin  
        _currentControl.AddWaypoint(_origin, "Origin"); 
        if (_shooting &amp;&amp; USE_STATIC_GUNS) 
        { 
            _shooting = false; 
            StopShooting(); 
        } 
    } 
 
    _currentControl.SetAutoPilotEnabled(true); 
 
} 
 
void StopShooting() 
{ 
    foreach (var gun in _guns) 
        gun.SetValueBool("Shoot", false); 
} 
 
void StartShooting() 
{ 
    foreach (var gun in _guns) 
    { 
        bool shoot = gun.Orientation.Forward == _currentControl.Orientation.Forward; 
        gun.SetValueBool("Shoot", shoot); 
    } 
} 
</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="22" y="3" z="-13" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallBlockConveyor</SubtypeName>
              <EntityId>121691359281931569</EntityId>
              <Min x="22" y="4" z="-10" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="24" y="3" z="-8" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Base</SubtypeName>
              <Min x="24" y="4" z="-8" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="20" y="3" z="-8" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="23" y="3" z="-9" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="21" y="4" z="-9" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="22" y="4" z="-9" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_1</SubtypeName>
              <EntityId>104552235629343382</EntityId>
              <Min x="24" y="3" z="-9" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Bearing</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages />
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Monospace" />
              <FontSize>1.25</FontSize>
              <PublicDescription>Bearing: 006 N
.W&gt;----&lt; N &gt;----&lt;N.E&gt;
          ^</PublicDescription>
              <PublicTitle>Public title</PublicTitle>
              <ShowText>PUBLIC</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="23" y="5" z="-10" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="19" y="4" z="-10" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <EntityId>106042299376795464</EntityId>
              <Min x="21" y="3" z="-16" />
              <IntegrityPercent>0.28</IntegrityPercent>
              <BuildPercent>0.28</BuildPercent>
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="25" y="4" z="-9" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>129683276568889511</EntityId>
              <Min x="24" y="4" z="-9" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Rradar</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>132215300444855022</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <Friction>1</Friction>
              <TargetVelocity>-0.08333331</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle xsi:nil="true" />
              <CurrentAngle>-0.01258645</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
              <Min x="20" y="4" z="-9" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>124386803149125880</EntityId>
              <Min x="24" y="3" z="-10" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Cam Tfront</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04719758</Fov>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SmallGatlingGun">
              <SubtypeName />
              <EntityId>82476702028863040</EntityId>
              <Min x="25" y="3" z="-11" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.064</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>GatlingL</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsShooting>false</IsShooting>
              <IsShootingFromTerminal>false</IsShootingFromTerminal>
              <IsLargeTurret>false</IsLargeTurret>
              <MinFov>0.1</MinFov>
              <MaxFov>1.04719758</MaxFov>
              <Inventory>
                <Items />
                <nextItemId>0</nextItemId>
                <Volume>0.064</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
              <GunBase>
                <RemainingAmmo>128</RemainingAmmo>
                <CurrentAmmoMagazineName>NATO_25x184mm</CurrentAmmoMagazineName>
                <RemainingAmmosList />
                <LastShootTime>636462061211570491</LastShootTime>
              </GunBase>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>114133199966191645</EntityId>
              <Min x="19" y="3" z="-12" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.25555557" y="1" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>PBradar</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Program>// -- BASIC SETTINGS -- 
bool _longRangeMode = true;                    // set this to true to enable long range mode (uses camera instead of sensor)   
                                                                     // if '_longRangeMode = true;' replace the sensor on your radar with a camera,   
                                                                     // you do not need both.   
int _longRangeModeRange = 1000;             // 500 metres (WARNING: the higher this number, the more game performance   
                                                                     // will be affected)   
 
string _sensorName = "Sensor [Radar]";    // suggested settings: front 50m, left and right 3m, top and bottom 5m, back 1m   
string _cameraName = "Cam Radar";  // NOTE: RaycastDistanceLimit is infinite (cannot be changed in ingame scripts)   
                                                                     //            RaycastConeLimit is 45 desgrees +/- of zero (cannot be changed in ingame scripts)   
 
string _lcdName = "LCDRadar"; 
string _rotorName = "Rradar";          // recommended rotation ~12.5rpm, safety lock 50 mp/s   
 
bool _hideDetectingMessage = false;        // show/hide the LCD top line message 'Target Distance: 72m --- Detecting: true' 
 
string _objectsToHide = "";                         // use this setting to hide objects from your radar. 
                                                                    // "Item01,Item02" etc 
 
// -- ADVANCED SETTINGS --     
int _refreshRate = 1;                                    // script runs per second, for performance reasons. 60 for realtime.   
                                                                    // the lower this number, the longer range you will get with Long Range Mode enabled.
                                                                    // recommend 40 for short range mode, 1 for long range mode.

float _fontSize = 0.4f;                                 // choose fontsize, 0.3f to see everything   
bool _upsideDown = false;                         // set this to true if your rotor is upside down 
 
// -- NOT SETTINGS - DO NOT EDIT BELOW THIS LINE --  
List&lt;IMyTextPanel&gt; _lcds; 
IMyMotorStator _rotor; 
IMySensorBlock _sensor; 
IMyCameraBlock _camera; 
 
string[] _matrix; 
bool _detecting = false; 
int _ticks = 0; 
List&lt;string&gt; _scanData = new List&lt;string&gt;(); 
double _sensorRange = 0d; 
float _rotorOffset = -90f; 
double _distance = 0d; 
int _center = 25; 
double[] _lineX = new double[25]; 
double[] _lineY = new double[25]; 
double[] _oldLineX = new double[25]; 
double[] _oldLineY = new double[25]; 
List&lt;Vector3D&gt; _vecDims = new List&lt;Vector3D&gt;(); 
double _angle = 0; 
List&lt;string&gt; _exclusionList; 
 
bool _initialized = false; 
 
void Main(string argument) 
{ 
    if (_initialized == false) this.Init(); 
 
    _angle = (_rotor.Angle + MathHelper.ToRadians(_rotorOffset)); 
    if (_upsideDown) _angle = (MathHelper.ToRadians(180) - _angle); 
 
    _ticks++; 
 
    if (_ticks == 60 / _refreshRate) 
    { 
        _ticks = 0; 
 
        if (_longRangeMode == false) 
            this.SensorScan(); 
        else 
            this.CameraScan(); 
 
        if (_detecting == true) 
        { 
            double x = _center + ((Math.Cos(_angle) * _distance) / (_sensorRange / 25d)); 
            double y = _center + ((Math.Sin(_angle) * _distance) / (_sensorRange / 25d)); 
 
            Echo(string.Format("x: {0}, y: {1}", (int)x, (int)y)); 
 
            string storeLine = string.Format("{0}:{1}", (int)x, (int)y); 
 
            if (_scanData.Count == 0 || _scanData[_scanData.Count - 1] != storeLine) 
                _scanData.Add(storeLine); 
        } 
 
        if (_detecting == false || _scanData.Count &gt; 2500) 
            _scanData.Clear(); 
    } 
 
    for (int i = 0; i &lt; 25; i++) 
    { 
        _lineX[i] = _center + (Math.Cos(_angle) * i); 
        _lineY[i] = _center + (Math.Sin(_angle) * i); 
 
        this.Plot((int)_oldLineX[i], (int)_oldLineY[i], '_'); 
 
        this.Plot((int)_lineX[i], (int)_lineY[i], 'x'); 
 
        _oldLineX[i] = _lineX[i]; 
        _oldLineY[i] = _lineY[i]; 
    } 
 
    this.Refresh(); 
} 
 
void Init() 
{ 
    try 
    { 
        if (_longRangeMode == false) 
        { 
            _sensor = this.GetBlock&lt;IMySensorBlock&gt;(_sensorName); 
            if (_sensor == default(IMySensorBlock)) throw new Exception(string.Format("No sensor found with name {0}.", _sensorName)); 
        } 
        else 
        { 
            _camera = this.GetBlock&lt;IMyCameraBlock&gt;(_cameraName); 
            if (_camera == default(IMyCameraBlock)) throw new Exception(string.Format("No camera found with name {0}.", _cameraName)); 
            _camera.EnableRaycast = true; 
        } 
 
        _rotor = this.GetBlock&lt;IMyMotorStator&gt;(_rotorName); 
        if (_rotor == default(IMyMotorStator)) throw new Exception(string.Format("No rotor found with name {0}.", _rotorName)); 
 
        _lcds = this.GetBlocks&lt;IMyTextPanel&gt;(_lcdName); 
        if (_lcds == null || _lcds.Count == 0) throw new Exception(string.Format("No LCD(s) found with name {0}.", _lcdName)); 
        for (int i = 0; i &lt; _lcds.Count; i++) _lcds[i].SetValue&lt;float&gt;("FontSize", _fontSize); 
 
        if (_matrix == null) _matrix = new string[50]; 
        for (int a = 0; a &lt; 50; a++) 
        { 
            _matrix[a] = ""; 
 
            for (int b = 0; b &lt; 50; b++) 
            { 
                _matrix[a] += "x_"; 
            } 
 
            _matrix[a] += "\n"; 
        } 
 
        _exclusionList = new List&lt;string&gt;(); 
        if (string.IsNullOrEmpty(_objectsToHide) == false) 
        { 
            _exclusionList.AddRange(_objectsToHide.Split(',')); 
            for (int i = 0; i &lt; _exclusionList.Count; i++) _exclusionList[i] = _exclusionList[i].Trim().ToLower(); 
        } 
 
        this.Refresh(); 
 
        _initialized = true; 
    } 
    catch (Exception ex) 
    { 
        Echo(string.Format("Error: {0}", ex.Message)); 
    } 
} 
 
void Refresh() 
{ 
    string output = ""; 
 
    if (_hideDetectingMessage == false) 
    { 
        if (_detecting == true) output += string.Format("Target Aquired - Range: {0}m.\n", (int)_distance); 
        else output += "No Targets Detected.\n"; 
    } 
 
    for (int i = 0; i &lt; _scanData.Count; i++) 
    { 
        string[] scanLine = _scanData[i].Split(':'); 
 
        int tempX = Int32.Parse(scanLine[0]); 
        int tempY = Int32.Parse(scanLine[1]); 
 
        this.Plot(tempX, tempY, 'x'); 
    } 
 
    for (int i = 0; i &lt; 50; i++) 
    { 
        output += _matrix[i]; 
    } 
 
    this.Render(output); 
} 
 
void Plot(int x, int y, char c) 
{ 
    if ((x &gt;= 0 &amp;&amp; y &gt;= 0) 
        &amp;&amp; (x &lt; 50 &amp;&amp; y &lt; 50)) 
    { 
        x = x * 2; 
 
        char[] chars = _matrix[y].ToCharArray(); 
 
        chars[x] = c; 
 
        _matrix[y] = new string(chars); 
    } 
} 
 
void Render(string text) 
{ 
    if (_lcds != null) 
    { 
        for (int i = 0; i &lt; _lcds.Count; i++) 
        { 
            _lcds[i].WritePublicText(text); 
 
            _lcds[i].ShowTextureOnScreen(); 
 
            _lcds[i].ShowPublicTextOnScreen(); 
        } 
    } 
} 
 
void SensorScan() 
{ 
    _sensorRange = (int)_sensor.FrontExtend; 
 
    Echo(string.Format("Available scan range: {0}m", (int)_sensorRange)); 
 
    MyDetectedEntityInfo entityInfo = _sensor.LastDetectedEntity; 
 
    this.GetPosition(entityInfo);             
} 
 
void CameraScan() 
{ 
    _sensorRange = (_camera.CanScan(_longRangeModeRange) == true) ? _longRangeModeRange : _camera.AvailableScanRange; 
 
    if (_camera.EnableRaycast == true 
        &amp;&amp; _camera.CanScan(_sensorRange) == true) 
    { 
        Echo(string.Format("Available scan range: {0}m", (int)_sensorRange)); 
 
        MyDetectedEntityInfo entityInfo = _camera.Raycast(_sensorRange, pitch: 0f, yaw: 0f); 
 
        this.GetPosition(entityInfo); 
 
        return; 
    } 
 
    _detecting = false; 
} 
 
void GetPosition(MyDetectedEntityInfo entityInfo) 
{ 
    if (entityInfo.IsEmpty() == false 
        &amp;&amp; _exclusionList.Contains(entityInfo.Name.Trim().ToLower()) == false) 
    { 
        _detecting = true; 
 
        _distance = this.GetDistance(entityInfo.HitPosition ?? entityInfo.Position); 
 
        Echo(string.Format("Entity {0} detected.", entityInfo.Name)); 
 
        return; 
    } 
 
    _detecting = false; 
} 
 
double GetDistance(Vector3D target) 
{ 
    Vector3D myPos; 
 
    if (_longRangeMode == false) 
        myPos = _sensor.GetPosition(); 
    else 
        myPos = _camera.GetPosition(); 
 
    double distance = Vector3D.Distance(target, myPos); 
 
    return distance; 
} 
 
T GetBlock&lt;T&gt;(string tag) 
    where T : IMyTerminalBlock 
{ 
    List&lt;T&gt; blocks = this.GetBlocks&lt;T&gt;(tag); 
 
    return (blocks.Count &gt; 0) ? blocks[0] : default(T); 
} 
 
List&lt;T&gt; GetBlocks&lt;T&gt;(string tag) 
    where T : IMyTerminalBlock 
{ 
    List&lt;IMyTerminalBlock&gt; blocks = new List&lt;IMyTerminalBlock&gt;(); 
 
    this.GridTerminalSystem.SearchBlocksOfName(tag, blocks); 
 
    return blocks.Cast&lt;T&gt;().ToList(); 
}</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockSmallContainer</SubtypeName>
              <EntityId>126801845563427875</EntityId>
              <Min x="21" y="4" z="-10" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Cargo Container 1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockSmallContainer</SubtypeName>
              <EntityId>104768755601493941</EntityId>
              <Min x="23" y="4" z="-10" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Cargo Container 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="22" y="5" z="-10" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="21" y="5" z="-10" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="20" y="4" z="-10" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="26" y="4" z="-10" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="25" y="4" z="-11" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="25" y="4" z="-10" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="25" y="4" z="-14" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="24" y="4" z="-10" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>123241006784979201</EntityId>
              <Min x="23" y="4" z="-16" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>RDecoyL2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>88435307389882477</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <Friction>0.9904837</Friction>
              <TargetVelocity>0</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>0</MaxAngle>
              <CurrentAngle>0.000354771124</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="19" y="4" z="-12" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="19" y="4" z="-8" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>92141809896083356</EntityId>
              <Min x="24" y="3" z="-14" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Cam Tleft</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04711854</Fov>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="19" y="4" z="-11" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="25" y="3" z="-12" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="26" y="4" z="-12" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>95933841827690218</EntityId>
              <Min x="22" y="3" z="-14" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Cam Trear</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04688144</Fov>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="26" y="3" z="-11" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="18" y="4" z="-10" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="19" y="4" z="-14" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="21" y="3" z="-14" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>79302216411557445</EntityId>
              <Min x="20" y="3" z="-14" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Cam Tright</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04620743</Fov>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="19" y="4" z="-13" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="23" y="3" z="-14" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>74350953969691101</EntityId>
              <Min x="20" y="4" z="-16" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>RDecoyR2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>82425729330021661</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <Friction>0.9904837</Friction>
              <TargetVelocity>0</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>0</MaxAngle>
              <CurrentAngle>0.00511184</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="23" y="3" z="-15" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="18" y="4" z="-12" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="25" y="3" z="-13" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SmallGatlingGun">
              <SubtypeName />
              <EntityId>76604142745734618</EntityId>
              <Min x="19" y="3" z="-11" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.064</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>GatlingR</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsShooting>false</IsShooting>
              <IsShootingFromTerminal>false</IsShootingFromTerminal>
              <IsLargeTurret>false</IsLargeTurret>
              <MinFov>0.1</MinFov>
              <MaxFov>1.04719758</MaxFov>
              <Inventory>
                <Items />
                <nextItemId>0</nextItemId>
                <Volume>0.064</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
              <GunBase>
                <RemainingAmmo>134</RemainingAmmo>
                <CurrentAmmoMagazineName>NATO_25x184mm</CurrentAmmoMagazineName>
                <RemainingAmmosList />
                <LastShootTime>636460737567209834</LastShootTime>
              </GunBase>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="26" y="3" z="-12" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope</SubtypeName>
              <Min x="18" y="3" z="-9" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>72628830305220695</EntityId>
              <Min x="24" y="3" z="-15" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>RDecoyL1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>91649175660345761</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <Friction>0.9904837</Friction>
              <TargetVelocity>0</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>0</MaxAngle>
              <CurrentAngle>-0.000323634624</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="26" y="4" z="-9" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="26" y="3" z="-13" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="24" y="5" z="-10" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="20" y="5" z="-10" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="25" y="4" z="-8" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="26" y="4" z="-11" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="18" y="4" z="-11" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="25" y="4" z="-12" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="26" y="3" z="-10" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="19" y="3" z="-13" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="21" y="3" z="-15" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>137297959657450361</EntityId>
              <Min x="20" y="3" z="-11" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>TBDecoyL1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_On</Action>
                      <BlockEntityId>119103957484490961</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Force weld</Action>
                      <BlockEntityId>72628830305220695</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Detach</Action>
                      <BlockEntityId>72628830305220695</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
              </Toolbar>
              <Delay>1800</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>true</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="22" y="3" z="-12" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>100372805131168682</EntityId>
              <Min x="22" y="2" z="-11" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>RTurret2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>118021978969237547</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <Friction>1</Friction>
              <TargetVelocity>0</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>0</MaxAngle>
              <CurrentAngle>-0.00405552331</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="21" y="3" z="-12" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope</SubtypeName>
              <Min x="26" y="3" z="-9" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="23" y="3" z="-10" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="21" y="3" z="-11" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="23" y="3" z="-11" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="23" y="3" z="-12" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="18" y="3" z="-11" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Base</SubtypeName>
              <Min x="18" y="3" z="-12" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <EntityId>95398460549898879</EntityId>
              <Min x="19" y="3" z="-14" />
              <IntegrityPercent>0.28</IntegrityPercent>
              <BuildPercent>0.28</BuildPercent>
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <EntityId>131613343767857027</EntityId>
              <Min x="22" y="3" z="-16" />
              <IntegrityPercent>0.28</IntegrityPercent>
              <BuildPercent>0.28</BuildPercent>
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <EntityId>73740891563211656</EntityId>
              <Min x="23" y="3" z="-16" />
              <IntegrityPercent>0.28</IntegrityPercent>
              <BuildPercent>0.28</BuildPercent>
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <EntityId>108419631640996560</EntityId>
              <Min x="25" y="3" z="-14" />
              <IntegrityPercent>0.28</IntegrityPercent>
              <BuildPercent>0.28</BuildPercent>
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="21" y="3" z="-8" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope</SubtypeName>
              <Min x="21" y="4" z="-8" />
              <ColorMaskHSV x="0.194444448" y="-0.29" z="-0.44" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="23" y="3" z="-8" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="23" y="4" z="-9" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope</SubtypeName>
              <Min x="23" y="4" z="-8" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="23" y="3" z="-7" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorStator">
              <SubtypeName>SmallStator</SubtypeName>
              <EntityId>78028215622447275</EntityId>
              <Min x="19" y="3" z="-15" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>RDecoyR1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>112109952089189332</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <Friction>0.9904837</Friction>
              <TargetVelocity>0</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>0</MaxAngle>
              <CurrentAngle>-0.008161221</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <DummyDisplacement>0.065</DummyDisplacement>
              <RotorLock>false</RotorLock>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="23" y="4" z="-17" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="21" y="4" z="-17" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.5743885" y="0.0299220569" z="-2.42048454" />
          <AngularVelocity x="0.00852807052" y="0.00518747559" z="-0.0123317186" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="22" y="4" z="-11" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="22" y="4" z="-10" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="22" y="4" z="-10" />
              <StartDirection>Right</StartDirection>
              <EndPosition x="23" y="4" z="-10" />
              <EndDirection>Left</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="22" y="4" z="-10" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="21" y="4" z="-10" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Gattlings</Name>
              <Blocks>
                <Vector3I>
                  <X>25</X>
                  <Y>3</Y>
                  <Z>-11</Z>
                </Vector3I>
                <Vector3I>
                  <X>19</X>
                  <Y>3</Y>
                  <Z>-11</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>cams</Name>
              <Blocks>
                <Vector3I>
                  <X>24</X>
                  <Y>3</Y>
                  <Z>-10</Z>
                </Vector3I>
                <Vector3I>
                  <X>22</X>
                  <Y>3</Y>
                  <Z>-14</Z>
                </Vector3I>
                <Vector3I>
                  <X>24</X>
                  <Y>3</Y>
                  <Z>-14</Z>
                </Vector3I>
                <Vector3I>
                  <X>20</X>
                  <Y>3</Y>
                  <Z>-14</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>MART</Name>
              <Blocks>
                <Vector3I>
                  <X>21</X>
                  <Y>3</Y>
                  <Z>-9</Z>
                </Vector3I>
                <Vector3I>
                  <X>23</X>
                  <Y>3</Y>
                  <Z>-13</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>PBs</Name>
              <Blocks>
                <Vector3I>
                  <X>19</X>
                  <Y>3</Y>
                  <Z>-12</Z>
                </Vector3I>
                <Vector3I>
                  <X>21</X>
                  <Y>3</Y>
                  <Z>-13</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Turret group 1</Name>
              <Blocks>
                <Vector3I>
                  <X>21</X>
                  <Y>3</Y>
                  <Z>-9</Z>
                </Vector3I>
                <Vector3I>
                  <X>23</X>
                  <Y>3</Y>
                  <Z>-13</Z>
                </Vector3I>
                <Vector3I>
                  <X>22</X>
                  <Y>6</Y>
                  <Z>-13</Z>
                </Vector3I>
                <Vector3I>
                  <X>25</X>
                  <Y>3</Y>
                  <Z>-11</Z>
                </Vector3I>
                <Vector3I>
                  <X>19</X>
                  <Y>3</Y>
                  <Z>-11</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <Handbrake>true</Handbrake>
          <DisplayName>Small Grid 7347</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>89259626923695997</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="13.679239273071289" y="1.676116943359375" z="-22.786369323730469" />
            <Forward x="0.3479678" y="0.4035948" z="-0.8461853" />
            <Up x="-0.6928712" y="0.7187342" z="0.057883814" />
            <Orientation>
              <X>0.129058555</X>
              <Y>-0.245461255</Y>
              <Z>0.352103382</Z>
              <W>0.8939328</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>143919086593232799</EntityId>
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <ParentEntityId>119570962961933621</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="0" y="0" z="-2" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>110748912253565638</EntityId>
              <Min x="0" y="0" z="-3" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Cam Gun</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04631615</Fov>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="0" y="1" z="-1" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_SmallMissileLauncher">
              <SubtypeName />
              <EntityId>127779292052327163</EntityId>
              <Min x="0" y="1" z="-6" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items>
                        <MyObjectBuilder_InventoryItem>
                          <Amount>50</Amount>
                          <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                            <SubtypeName>Missile200mm</SubtypeName>
                            <ProjectilesCount>0</ProjectilesCount>
                          </PhysicalContent>
                          <ItemId>0</ItemId>
                        </MyObjectBuilder_InventoryItem>
                      </Items>
                      <nextItemId>1</nextItemId>
                      <Volume>0.24</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>gun</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsShooting>false</IsShooting>
              <IsShootingFromTerminal>false</IsShootingFromTerminal>
              <IsLargeTurret>false</IsLargeTurret>
              <MinFov>0.1</MinFov>
              <MaxFov>1.04719758</MaxFov>
              <Inventory>
                <Items>
                  <MyObjectBuilder_InventoryItem>
                    <Amount>50</Amount>
                    <PhysicalContent xsi:type="MyObjectBuilder_AmmoMagazine">
                      <SubtypeName>Missile200mm</SubtypeName>
                      <ProjectilesCount>0</ProjectilesCount>
                    </PhysicalContent>
                    <ItemId>0</ItemId>
                  </MyObjectBuilder_InventoryItem>
                </Items>
                <nextItemId>1</nextItemId>
                <Volume>0.24</Volume>
                <Mass>9223372036854.775807</Mass>
                <MaxItemCount>2147483647</MaxItemCount>
                <Size xsi:nil="true" />
                <InventoryFlags>CanReceive</InventoryFlags>
                <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
              </Inventory>
              <UseConveyorSystem>false</UseConveyorSystem>
              <GunBase>
                <CurrentAmmoMagazineName>Missile200mm</CurrentAmmoMagazineName>
                <RemainingAmmosList>
                  <RemainingAmmoIns SubtypeName="Missile200mm" Amount="0" />
                </RemainingAmmosList>
                <LastShootTime>636486799546870573</LastShootTime>
              </GunBase>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="1" y="1" z="-3" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="1" y="0" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="0" y="1" z="0" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="0" y="1" z="-2" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="1" y="1" z="-2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorCorner2Tip</SubtypeName>
              <Min x="1" y="1" z="-1" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.71537685" y="0.16884625" z="-2.26722622" />
          <AngularVelocity x="0.1816642" y="-0.17354773" z="-0.0254264753" />
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>cams</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>0</Y>
                  <Z>-3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>MART</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>1</Y>
                  <Z>-3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Turret group 1</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>1</Y>
                  <Z>-3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <DisplayName>Small Grid 380</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>95179828798075928</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="13.112627983093262" y="3.0494537353515625" z="-22.45263671875" />
            <Forward x="-0.258009344" y="-0.339095324" z="0.90468" />
            <Up x="0.669939339" y="0.611905932" z="0.420419484" />
            <Orientation>
              <X>0.386210024</X>
              <Y>0.896204054</Y>
              <Z>0.21186991</Z>
              <W>0.0526424348</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>132215300444855022</EntityId>
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <ParentEntityId>138931211505638397</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="0" y="1" z="0" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>109875867159840968</EntityId>
              <Min x="0" y="1" z="1" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>Cam Radar</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04719758</Fov>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.587245" y="0.04149508" z="-2.40718937" />
          <AngularVelocity x="0.008017731" y="0.005286996" z="-0.0147030121" />
          <DisplayName>Small Grid 2859</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>72255817418080028</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="12.38968563079834" y="1.5475006103515625" z="-19.343917846679688" />
            <Forward x="0.6828575" y="0.5982145" z="0.419338167" />
            <Up x="-0.683940768" y="0.72523123" z="0.0791493356" />
            <Orientation>
              <X>0.33065775</X>
              <Y>-0.774812639</Y>
              <Z>0.167480916</Z>
              <W>0.5121338</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>88435307389882477</EntityId>
              <ParentEntityId>139791222135802988</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Decoy">
              <SubtypeName>SmallDecoy</SubtypeName>
              <EntityId>73506815324028728</EntityId>
              <Min x="0" y="1" z="0" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>DecoyL2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.58447266" y="0.02510646" z="-2.41679859" />
          <AngularVelocity x="0.006841558" y="0.00506577548" z="-0.0120233279" />
          <DisplayName>Small Grid 7353</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>132721523390083718</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="13.222820281982422" y="0.683013916015625" z="-19.413986206054688" />
            <Forward x="0.273302734" y="0.31687814" z="-0.9082366" />
            <Up x="0.7007453" y="-0.7124143" z="-0.0376917869" />
            <Orientation>
              <X>-0.190521121</X>
              <Y>-0.0978946462</Y>
              <Z>0.9054883</Z>
              <W>-0.3663458</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>82425729330021661</EntityId>
              <ParentEntityId>95347199390493923</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Decoy">
              <SubtypeName>SmallDecoy</SubtypeName>
              <EntityId>130256132884452363</EntityId>
              <Min x="0" y="1" z="0" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>DecoyR2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.57164907" y="0.011517331" z="-2.429388" />
          <AngularVelocity x="0.008740516" y="0.00465810252" z="-0.0110434238" />
          <DisplayName>Small Grid 7353</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>75050914917983788</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="11.840070724487305" y="1.7642974853515625" z="-19.982597351074219" />
            <Forward x="0.266544" y="0.329895079" z="-0.9056067" />
            <Up x="-0.692873955" y="0.7187312" z="0.05788879" />
            <Orientation>
              <X>0.106825933</X>
              <Y>-0.189168885</Y>
              <Z>0.3594755</Z>
              <W>0.9075135</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>91649175660345761</EntityId>
              <ParentEntityId>125246284333372173</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Decoy">
              <SubtypeName>SmallDecoy</SubtypeName>
              <EntityId>119103957484490961</EntityId>
              <Min x="0" y="1" z="0" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>DecoyL1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.58374453" y="0.03622617" z="-2.411663" />
          <AngularVelocity x="0.008377414" y="0.00526423752" z="-0.0123414407" />
          <DisplayName>Small Grid 7353</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>107159388409990829</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="13.36578369140625" y="0.181549072265625" z="-20.110115051269531" />
            <Forward x="-0.272203624" y="-0.335088581" z="0.902009" />
            <Up x="0.692806363" y="-0.7187909" z="-0.05795312" />
            <Orientation>
              <X>0.906721532</X>
              <Y>0.358971626</Y>
              <Z>0.19300659</Z>
              <W>-0.108368933</W>
            </Orientation>
          </PositionAndOrientation>
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorRotor">
              <SubtypeName>SmallRotor</SubtypeName>
              <EntityId>112109952089189332</EntityId>
              <ParentEntityId>131885586855806728</ParentEntityId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Decoy">
              <SubtypeName>SmallDecoy</SubtypeName>
              <EntityId>123451274474565023</EntityId>
              <Min x="0" y="1" z="0" />
              <ColorMaskHSV x="0.222222224" y="-0.24" z="-0.54" />
              <Owner>144115188075855896</Owner>
              <ShareMode>Faction</ShareMode>
              <CustomName>DecoyR1</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="1.561955" y="0.0166389644" z="-2.43394661" />
          <AngularVelocity x="0.008822681" y="0.005842013" z="-0.0147493538" />
          <DisplayName>Small Grid 7353</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
      </CubeGrids>
    </Prefab>
  </Prefabs>
</Definitions>